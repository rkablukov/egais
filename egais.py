#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Mar 11 12:21:35 2020 by generateDS.py version 2.35.15.
# Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:57:15) [MSC v.1915 64 bit (AMD64)]
#
# Command line options:
#   ('-o', 'egais.py')
#   ('-s', 'egaissubs.py')
#   ('--use-old-simpletype-validators', '')
#   ('--external-encoding', 'utf-8')
#   ('--silence', '')
#
# Command line arguments:
#   .\xsd\WB_DOC_SINGLE_01.xsd
#
# Command line:
#   C:\Users\roof\.virtualenvs\egais-djViaaeL\Scripts\generateDS.py -o "egais.py" -s "egaissubs.py" --use-old-simpletype-validators --external-encoding="utf-8" --silence .\xsd\WB_DOC_SINGLE_01.xsd
#
# Current working directory (os.getcwd()):
#   egais
#

from six.moves import zip_longest
import os
import sys
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ImportError:

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer valuess')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%s' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class AcceptType(Enum):
    """Принимаем или отказываем накладную"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'


class AcceptType28(Enum):
    """Принимаем, принимаем с разногласиями или отказываем накладную"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'
    DIFFERENCES='Differences'


class AcceptType45(Enum):
    """Принимаем, принимаем с разногласиями или отказываем накладную"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'
    DIFFERENCES='Differences'


class ConclusionType(Enum):
    """Вид результата фиксации"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'


class ConclusionType3(Enum):
    """Вид результата фиксации"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'


class ConclusionType34(Enum):
    """Вид результата фиксации"""
    ACCEPTED='Accepted'
    REJECTED='Rejected'


class FormatType(Enum):
    WAY_BILL='WayBill'
    WAY_BILL_V_2='WayBill_v2'
    WAY_BILL_V_3='WayBill_v3'


class ModeEnum(Enum):
    """Справочник идентификаторов режимов работы средств измерения"""
    _0_01='001' # Промывка АСИиУ (линии)
    _0_02='002' # Калибровка АСИиУ
    _0_03='003' # Технологический прогон
    _0_04='004' # Производство продукции
    _0_05='005' # Остановка (выключение) АСИиУ
    _0_06='006' # Прием (возврат)
    _0_07='007' # Прием (закупка)
    _0_08='008' # Внутренний расход
    _0_09='009' # Отгрузка (покупателю)
    _0_10='010' # Отгрузка (возврат)


class OperType(Enum):
    """Типы операций"""
    OPER_PRODUCTION='OperProduction'
    OPER_CONVERSION='OperConversion'
    OPER_MATERIALS='OperMaterials'


class OperType48(Enum):
    """Типы операций"""
    OPER_PRODUCTION='OperProduction'
    OPER_CONVERSION='OperConversion'
    OPER_MATERIALS='OperMaterials'


class PlaceEnum(Enum):
    """Справочник идентификаторов мест размещения счетчиков"""
    _1_186240='1186240' # Производственный цех
    _1_186244='1186244' # Приемное отделение
    _1_186245='1186245' # Отпускное отделение
    _1_710969='1710969' # Приемно-отпускное отделение


class TypeEnum(Enum):
    """Список кодов типов ФСМ/АМ"""
    _0_01='001' # ФСМ. Алкогольная продукция свыше 9 до 25%
    _0_02='002' # ФСМ. Алкогольная продукция свыше 25%. До 0.1 л
    _0_03='003' # ФСМ. Алкогольная продукция свыше 25%. До 0.25 л
    _0_04='004' # ФСМ. Алкогольная продукция свыше 25%. До 0.5 л
    _0_05='005' # ФСМ. Алкогольная продукция свыше 25%. До 0.75 л
    _0_06='006' # ФСМ. Алкогольная продукция свыше 25%. До 1 л
    _0_07='007' # ФСМ. Алкогольная продукция свыше 25%. Свыше 1 л
    _0_08='008' # ФСМ. Вина
    _0_09='009' # ФСМ. Вина шампанские и игристые
    _0_10='010' # ФСМ. Вина натуральные
    _0_20='020' # АМ. Алкогольная продукция свыше 9 до 25%
    _0_21='021' # АМ. Алкогольная продукция свыше 25%. До 0.1 л
    _0_22='022' # АМ. Алкогольная продукция свыше 25%. До 0.25 л
    _0_23='023' # АМ. Алкогольная продукция свыше 25%. До 0.5 л
    _0_24='024' # АМ. Алкогольная продукция свыше 25%. До 0.75 л
    _0_25='025' # АМ. Алкогольная продукция свыше 25%. До 1 л
    _0_26='026' # АМ. Алкогольная продукция свыше 25%. Свыше 1 л
    _0_27='027' # АМ. Вина
    _0_28='028' # АМ. Вина шампанские и игристые
    _0_29='029' # АМ. Вина натуральные
    _0_31='031' # АМ. Алкогольная продукция до 9 % включительно
    _1_01='101' # ФСМ. Спиртные напитки до 9 %
    _1_02='102' # ФСМ. Спиртные напитки свыше 9 до 25 %
    _1_03='103' # ФСМ. Крепкие спиртные напитки до 0,5 л
    _1_04='104' # ФСМ. Крепкие спиртные напитки до 0,75 л
    _1_05='105' # ФСМ. Крепкие спиртные напитки до 1 л
    _1_06='106' # ФСМ. Крепкие спиртные напитки свыше 1 л
    _1_07='107' # ФСМ. Водка до 0,5 л
    _1_08='108' # ФСМ. Водка до 0,75 л
    _1_09='109' # ФСМ. Водка до 1 л
    _1_10='110' # ФСМ. Водка свыше 1 л.
    _1_11='111' # ФСМ. Вина игристые(шампанские) до 0,375 л.
    _1_12='112' # ФСМ. Вина игристые(шампанские) до 0,75 л.
    _1_13='113' # ФСМ. Вина игристые(шампанские) до 1,5 л.
    _1_14='114' # ФСМ. Вина игристые(шампанские) свыше 1,5 л.
    _1_15='115' # ФСМ. Вина виноградные до 0,375 л.
    _1_16='116' # ФСМ. Вина виноградные до 0,75 л.
    _1_17='117' # ФСМ. Вина виноградные до 1,5 л.
    _1_18='118' # ФСМ. Вина виноградные свыше 1,5 л.
    _1_19='119' # ФСМ. Вина ликерные до 0,375 л.
    _1_20='120' # ФСМ. Вина ликерные до 0,75 л.
    _1_21='121' # ФСМ. Вина ликерные до 1,5 л.
    _1_22='122' # ФСМ. Вина ликерные свыше 1,5 л.
    _1_23='123' # ФСМ. Вина фруктовые до 0,375 л.
    _1_24='124' # ФСМ. Вина фруктовые до 0,75 л.
    _1_25='125' # ФСМ. Вина фруктовые до 1,5 л.
    _1_26='126' # ФСМ. Вина фруктовые свыше 1,5 л.
    _1_27='127' # ФСМ. Винные напитки до 0,375 л.
    _1_28='128' # ФСМ. Винные напитки до 0,75 л.
    _1_29='129' # ФСМ. Винные напитки до 1,5 л.
    _1_30='130' # ФСМ. Винные напитки свыше 1,5 л.
    _1_31='131' # ФСМ. Крепкие спиртные напитки до 0,1 л
    _1_32='132' # ФСМ. Крепкие спиртные напитки 0,25 л
    _1_33='133' # ФСМ. Водка до 0,1 л
    _1_34='134' # ФСМ. Водка 0,25 л
    _1_35='135' # ФСМ. Водка 0,375 л
    _1_36='136' # ФСМ. Водка 0,5 л
    _1_37='137' # ФСМ. Винные напитки (без этилового спирта) до 0,375 л.
    _1_38='138' # ФСМ. Винные напитки (без этилового спирта) до 0,75 л.
    _1_39='139' # ФСМ. Винные напитки (без этилового спирта) до 1,5 л.
    _1_40='140' # ФСМ. Винные напитки (без этилового спирта) свыше 1,5 л.
    _1_41='141' # ФСМ. Винные напитки (с этиловым спиртом) до 0,375 л.
    _1_42='142' # ФСМ. Винные напитки (с этиловым спиртом) до 0,75 л.
    _1_43='143' # ФСМ. Винные напитки (с этиловым спиртом) до 1,5 л.
    _1_44='144' # ФСМ. Винные напитки (с этиловым спиртом) свыше 1,5 л.
    _1_45='145' # ФСМ. Коньяк. До 0,1 л
    _1_46='146' # ФСМ. Коньяк. 0,25 л
    _1_47='147' # ФСМ. Коньяк. До 0,5 л
    _1_48='148' # ФСМ. Коньяк. До 0,75 л
    _1_49='149' # ФСМ. Коньяк. До 1 л.
    _1_50='150' # ФСМ. Коньяк. Свыше 1 л
    _1_51='151' # ФСМ. Коньяк (особый). До 0,1 л
    _1_52='152' # ФСМ. Коньяк (особый). 0,25 л
    _1_53='153' # ФСМ. Коньяк (особый). До 0,5 л
    _1_54='154' # ФСМ. Коньяк (особый). До 0,75 л
    _1_55='155' # ФСМ. Коньяк (особый). До 1 л
    _1_56='156' # ФСМ. Коньяк (особый). Свыше 1 л
    _1_57='157' # ФСМ. Вина виноградные (особые). До 1 л.
    _1_58='158' # ФСМ. Вина виноградные (особые). Свыше 1 л.
    _1_59='159' # ФСМ. Вина ликерные (особые). До 1 л.
    _1_60='160' # ФСМ. Вина ликерные (особые). Свыше 1 л.
    _1_61='161' # ФСМ. Вина игристые (особые). До 0,375 л.
    _1_62='162' # ФСМ. Вина игристые (особые). До 1 л.
    _1_63='163' # ФСМ. Вина игристые (особые). Свыше 1 л.
    _1_64='164' # ФСМ. Спиртные напитки (особые). До 0,1 л.
    _1_65='165' # ФСМ. Спиртные напитки (особые). 0,25 л.
    _1_66='166' # ФСМ. Спиртные напитки (особые). До 0,5 л.
    _1_67='167' # ФСМ. Спиртные напитки (особые). До 0,75 л.
    _1_68='168' # ФСМ. Спиртные напитки (особые). До 1 л.
    _1_69='169' # ФСМ. Спиртные напитки (особые). Свыше 1 л.
    _2_02='202' # АМ. Спиртные напитки свыше 9 до 25 %
    _2_03='203' # АМ. Крепкие спиртные напитки до 0,5 л.
    _2_04='204' # АМ. Крепкие спиртные напитки до 0,75 л.
    _2_05='205' # АМ. Крепкие спиртные напитки до 1 л.
    _2_06='206' # АМ. Крепкие спиртные напитки свыше 1 л.
    _2_07='207' # АМ. Водка до 0,5 л.
    _2_08='208' # АМ. Водка до 0,75 л.
    _2_09='209' # АМ. Водка до 1 л.
    _2_10='210' # АМ. Водка свыше 1 л.
    _2_11='211' # АМ. Вина игристые (шампанские) до 0,375 л.
    _2_12='212' # АМ. Вина игристые (шампанские) до 0,75 л.
    _2_13='213' # АМ. Вина игристые (шампанские) до 1,5 л.
    _2_14='214' # АМ. Вина игристые (шампанские) свыше 1,5 л.
    _2_15='215' # АМ. Вина виноградные до 0,375 л.
    _2_16='216' # АМ. Вина виноградные до 0,75 л.
    _2_17='217' # АМ. Вина виноградные до 1,5 л.
    _2_18='218' # АМ. Вина виноградные свыше 1,5 л.
    _2_19='219' # АМ. Вина ликерные до 0,375 л.
    _2_20='220' # АМ. Вина ликерные до 0,75 л.
    _2_21='221' # АМ. Вина ликерные до 1,5 л.
    _2_22='222' # АМ. Вина ликерные свыше 1,5 л.
    _2_23='223' # АМ. Вина фруктовые до 0,375 л.
    _2_24='224' # АМ. Вина фруктовые до 0,75 л.
    _2_25='225' # АМ. Вина фруктовые до 1,5 л.
    _2_26='226' # АМ. Вина фруктовые свыше 1,5 л.
    _2_27='227' # АМ. Винные напитки до 0,375 л.
    _2_28='228' # АМ. Винные напитки до 0,75 л.
    _2_29='229' # АМ. Винные напитки до 1,5 л.
    _2_30='230' # АМ. Винные напитки свыше 1,5 л.
    _2_31='231' # АМ. Спиртные напитки до 9 %
    _2_32='232' # АМ. Крепкие спиртные напитки до 0,1 л.
    _2_33='233' # АМ. Крепкие спиртные напитки до 0,25 л.
    _2_34='234' # АМ. Водка до 0,1 л.
    _2_35='235' # АМ. Водка до 0,25 л.
    _1_70='170' # ФСМ. Вина виноградные (особые)
    _1_71='171' # ФСМ. Вина виноградные
    _1_72='172' # ФСМ. Вина игристые шампанские (особые)
    _1_73='173' # ФСМ. Вина игристые(шампанские)
    _1_74='174' # ФСМ. Вина ликерные (особые)
    _1_75='175' # ФСМ. Вина ликерные
    _1_76='176' # ФСМ. Вина фруктовые
    _1_77='177' # ФСМ. Винные напитки (без этилового спирта) до 0,75 л.
    _1_78='178' # ФСМ. Винные напитки (без этилового спирта) свыше 0,75 л.
    _1_79='179' # ФСМ. Винные напитки (с этиловым спиртом) до 0,75 л.
    _1_80='180' # ФСМ. Винные напитки (с этиловым спиртом) свыше 0,75 л.
    _1_81='181' # ФСМ. Водка свыше 0,75 л
    _1_82='182' # ФСМ. Коньяк (особый). Свыше 0,75 л
    _1_83='183' # ФСМ. Коньяк. свыше 0,75 л
    _1_84='184' # ФСМ. Крепкие спиртные напитки свыше 0,75 л
    _1_85='185' # ФСМ. Спиртные напитки (особые), свыше 0,75 л
    _2_36='236' # АМ. Вина виноградные
    _2_37='237' # АМ. Вина игристые(шампанские)
    _2_38='238' # АМ. Вина ликерные
    _2_39='239' # АМ. Вина фруктовые
    _2_40='240' # АМ. Винные напитки
    _2_41='241' # АМ. Водка 0,25 л
    _2_42='242' # АМ. Водка 0,375 л
    _2_43='243' # АМ. Водка 0,5 л
    _2_44='244' # АМ. Водка свыше 0,75 л
    _2_45='245' # АМ. Крепкие спиртные напитки 0,25 л
    _2_46='246' # АМ. Крепкие спиртные напитки свыше 0,75 л


class UnpackedType(Enum):
    """Типы продукции: упакованная, неупакованная"""
    _0='0'
    _1='1'


class WbType(Enum):
    """Типы накладных"""
    WB_RETURN_TO_ME='WBReturnToMe'
    WB_INVOICE_TO_ME='WBInvoiceToMe'
    WB_RETURN_FROM_ME='WBReturnFromMe'
    WB_INVOICE_FROM_ME='WBInvoiceFromMe'


class WbType25(Enum):
    """Типы накладных"""
    WB_RETURN_TO_ME='WBReturnToMe'
    WB_INVOICE_TO_ME='WBInvoiceToMe'
    WB_RETURN_FROM_ME='WBReturnFromMe'
    WB_INVOICE_FROM_ME='WBInvoiceFromMe'


class WbType40(Enum):
    """Типы накладных"""
    WB_RETURN_TO_ME='WBReturnToMe'
    WB_INVOICE_TO_ME='WBInvoiceToMe'
    WB_RETURN_FROM_ME='WBReturnFromMe'
    WB_INVOICE_FROM_ME='WBInvoiceFromMe'


class WbUnitType(Enum):
    """Типы продукции: упакованная, неупакованная"""
    PACKED='Packed'
    UNPACKED='Unpacked'


class WbUnitType1(Enum):
    """Типы продукции"""
    PACKED='Packed'
    UNPACKED='Unpacked'


class WbUnitType16(Enum):
    """Типы продукции: упакованная, неупакованная"""
    PACKED='Packed'
    UNPACKED='Unpacked'


class WbUnitType26(Enum):
    """Типы продукции"""
    PACKED='Packed'
    UNPACKED='Unpacked'


class WbUnitType41(Enum):
    """Типы продукции"""
    PACKED='Packed'
    UNPACKED='Unpacked'


class Documents(GeneratedsSuper):
    """Документы от организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Version='1.0', Owner=None, Document=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Version = _cast(None, Version)
        self.Version_nsprefix_ = None
        self.Owner = Owner
        self.Owner_nsprefix_ = None
        self.Document = Document
        self.Document_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Documents)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Documents.subclass:
            return Documents.subclass(*args_, **kwargs_)
        else:
            return Documents(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Owner(self):
        return self.Owner
    def set_Owner(self, Owner):
        self.Owner = Owner
    def get_Document(self):
        return self.Document
    def set_Document(self, Document):
        self.Document = Document
    def get_Version(self):
        return self.Version
    def set_Version(self, Version):
        self.Version = Version
    def validate_NoEmptyString(self, value):
        # Validate type c:NoEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.Owner is not None or
            self.Document is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='Documents', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Documents')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Documents':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Documents')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Documents', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Documents'):
        if self.Version != "1.0" and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Version), input_name='Version')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='Documents', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Owner is not None:
            namespaceprefix_ = self.Owner_nsprefix_ + ':' if (UseCapturedNS_ and self.Owner_nsprefix_) else ''
            self.Owner.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Owner', pretty_print=pretty_print)
        if self.Document is not None:
            namespaceprefix_ = self.Document_nsprefix_ + ':' if (UseCapturedNS_ and self.Document_nsprefix_) else ''
            self.Document.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Document', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
            self.validate_NoEmptyString(self.Version)    # validate type NoEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Owner':
            obj_ = SenderInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Owner = obj_
            obj_.original_tagname_ = 'Owner'
        elif nodeName_ == 'Document':
            obj_ = DocBody.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Document = obj_
            obj_.original_tagname_ = 'Document'
# end class Documents


class DocBody(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WayBill=None, Ticket=None, WayBillAct=None, ConfirmTicket=None, TTNInformBReg=None, ActInventory=None, ActChargeOn=None, ActInventoryInformBReg=None, QueryAP=None, QuerySSP=None, QuerySP=None, QueryClients=None, QueryClientVersion=None, QueryRests=None, QueryFormBHistory=None, QueryResendDoc=None, QueryFormA=None, QueryFormB=None, ActWriteOff=None, RepProducedProduct=None, RepImportedProduct=None, ReplySSP=None, ReplySpirit=None, ReplyClient=None, ReplyAP=None, ReplyRests=None, ReplyFormA=None, ReplyFormB=None, ReplyHistFormB=None, ReplyClientVersion=None, QueryRejectRepProduced=None, QueryRejectRepImported=None, ReplySSP_v2=None, ReplySpirit_v2=None, ReplyClient_v2=None, ReplyAP_v2=None, ReplyRests_v2=None, ReplyForm1=None, ReplyForm2=None, ReplyHistForm2=None, WayBill_v2=None, WayBillAct_v2=None, ActChargeOn_v2=None, ActInventoryInformF2Reg=None, TTNInformF2Reg=None, QueryAP_v2=None, QuerySSP_v2=None, QuerySP_v2=None, QueryClients_v2=None, QueryRests_v2=None, QueryFormF1=None, QueryFormF2=None, ActWriteOff_v2=None, TransferFromShop=None, TransferToShop=None, QueryForm2History=None, RepInformF1Reg=None, ReplyNoAnswerTTN=None, QueryNATTN=None, QueryRestsShop_v2=None, ReplyRestsShop_v2=None, Asiiu=None, AsiiuTime=None, ActChargeOnShop_v2=None, ActWriteOffShop_v2=None, InfoVersionTTN=None, QueryBarcode=None, ReplyBarcode=None, RequestRepealWB=None, ConfirmRepealWB=None, RequestRepealACO=None, RequestRepealAWO=None, QueryRests_Mini=None, QueryRestsShop_Mini=None, ReplyRests_Mini=None, ReplyRestsShop_Mini=None, RequestAddFProducer=None, RequestAddProducts=None, QueryHistoryRestShop=None, QueryWriteOffCheque=None, ReplyHistoryShop=None, ReplyWriteOffCheque=None, AscpNav=None, AsiiuSign=None, AsiiuTimeSign=None, WayBill_v3=None, ActWriteOff_v3=None, WayBillAct_v3=None, RepProducedProduct_v3=None, RepImportedProduct_v3=None, QueryRestBCode=None, ReplyRestBCode=None, ActFixBarCode=None, ActUnFixBarCode=None, QueryParentHistForm2=None, ReplyParentHistForm2=None, TTNHistoryF2Reg=None, CarrierNotice=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WayBill = WayBill
        self.WayBill_nsprefix_ = None
        self.Ticket = Ticket
        self.Ticket_nsprefix_ = None
        self.WayBillAct = WayBillAct
        self.WayBillAct_nsprefix_ = None
        self.ConfirmTicket = ConfirmTicket
        self.ConfirmTicket_nsprefix_ = None
        self.TTNInformBReg = TTNInformBReg
        self.TTNInformBReg_nsprefix_ = None
        self.ActInventory = ActInventory
        self.ActInventory_nsprefix_ = None
        self.ActChargeOn = ActChargeOn
        self.ActChargeOn_nsprefix_ = None
        self.ActInventoryInformBReg = ActInventoryInformBReg
        self.ActInventoryInformBReg_nsprefix_ = None
        self.QueryAP = QueryAP
        self.QueryAP_nsprefix_ = None
        self.QuerySSP = QuerySSP
        self.QuerySSP_nsprefix_ = None
        self.QuerySP = QuerySP
        self.QuerySP_nsprefix_ = None
        self.QueryClients = QueryClients
        self.QueryClients_nsprefix_ = None
        self.QueryClientVersion = QueryClientVersion
        self.QueryClientVersion_nsprefix_ = None
        self.QueryRests = QueryRests
        self.QueryRests_nsprefix_ = None
        self.QueryFormBHistory = QueryFormBHistory
        self.QueryFormBHistory_nsprefix_ = None
        self.QueryResendDoc = QueryResendDoc
        self.QueryResendDoc_nsprefix_ = None
        self.QueryFormA = QueryFormA
        self.QueryFormA_nsprefix_ = None
        self.QueryFormB = QueryFormB
        self.QueryFormB_nsprefix_ = None
        self.ActWriteOff = ActWriteOff
        self.ActWriteOff_nsprefix_ = None
        self.RepProducedProduct = RepProducedProduct
        self.RepProducedProduct_nsprefix_ = None
        self.RepImportedProduct = RepImportedProduct
        self.RepImportedProduct_nsprefix_ = None
        self.ReplySSP = ReplySSP
        self.ReplySSP_nsprefix_ = None
        self.ReplySpirit = ReplySpirit
        self.ReplySpirit_nsprefix_ = None
        self.ReplyClient = ReplyClient
        self.ReplyClient_nsprefix_ = None
        self.ReplyAP = ReplyAP
        self.ReplyAP_nsprefix_ = None
        self.ReplyRests = ReplyRests
        self.ReplyRests_nsprefix_ = None
        self.ReplyFormA = ReplyFormA
        self.ReplyFormA_nsprefix_ = None
        self.ReplyFormB = ReplyFormB
        self.ReplyFormB_nsprefix_ = None
        self.ReplyHistFormB = ReplyHistFormB
        self.ReplyHistFormB_nsprefix_ = None
        self.ReplyClientVersion = ReplyClientVersion
        self.ReplyClientVersion_nsprefix_ = None
        self.QueryRejectRepProduced = QueryRejectRepProduced
        self.QueryRejectRepProduced_nsprefix_ = None
        self.QueryRejectRepImported = QueryRejectRepImported
        self.QueryRejectRepImported_nsprefix_ = None
        self.ReplySSP_v2 = ReplySSP_v2
        self.ReplySSP_v2_nsprefix_ = None
        self.ReplySpirit_v2 = ReplySpirit_v2
        self.ReplySpirit_v2_nsprefix_ = None
        self.ReplyClient_v2 = ReplyClient_v2
        self.ReplyClient_v2_nsprefix_ = None
        self.ReplyAP_v2 = ReplyAP_v2
        self.ReplyAP_v2_nsprefix_ = None
        self.ReplyRests_v2 = ReplyRests_v2
        self.ReplyRests_v2_nsprefix_ = None
        self.ReplyForm1 = ReplyForm1
        self.ReplyForm1_nsprefix_ = None
        self.ReplyForm2 = ReplyForm2
        self.ReplyForm2_nsprefix_ = None
        self.ReplyHistForm2 = ReplyHistForm2
        self.ReplyHistForm2_nsprefix_ = None
        self.WayBill_v2 = WayBill_v2
        self.WayBill_v2_nsprefix_ = None
        self.WayBillAct_v2 = WayBillAct_v2
        self.WayBillAct_v2_nsprefix_ = None
        self.ActChargeOn_v2 = ActChargeOn_v2
        self.ActChargeOn_v2_nsprefix_ = None
        self.ActInventoryInformF2Reg = ActInventoryInformF2Reg
        self.ActInventoryInformF2Reg_nsprefix_ = None
        self.TTNInformF2Reg = TTNInformF2Reg
        self.TTNInformF2Reg_nsprefix_ = None
        self.QueryAP_v2 = QueryAP_v2
        self.QueryAP_v2_nsprefix_ = None
        self.QuerySSP_v2 = QuerySSP_v2
        self.QuerySSP_v2_nsprefix_ = None
        self.QuerySP_v2 = QuerySP_v2
        self.QuerySP_v2_nsprefix_ = None
        self.QueryClients_v2 = QueryClients_v2
        self.QueryClients_v2_nsprefix_ = None
        self.QueryRests_v2 = QueryRests_v2
        self.QueryRests_v2_nsprefix_ = None
        self.QueryFormF1 = QueryFormF1
        self.QueryFormF1_nsprefix_ = None
        self.QueryFormF2 = QueryFormF2
        self.QueryFormF2_nsprefix_ = None
        self.ActWriteOff_v2 = ActWriteOff_v2
        self.ActWriteOff_v2_nsprefix_ = None
        self.TransferFromShop = TransferFromShop
        self.TransferFromShop_nsprefix_ = None
        self.TransferToShop = TransferToShop
        self.TransferToShop_nsprefix_ = None
        self.QueryForm2History = QueryForm2History
        self.QueryForm2History_nsprefix_ = None
        self.RepInformF1Reg = RepInformF1Reg
        self.RepInformF1Reg_nsprefix_ = None
        self.ReplyNoAnswerTTN = ReplyNoAnswerTTN
        self.ReplyNoAnswerTTN_nsprefix_ = None
        self.QueryNATTN = QueryNATTN
        self.QueryNATTN_nsprefix_ = None
        self.QueryRestsShop_v2 = QueryRestsShop_v2
        self.QueryRestsShop_v2_nsprefix_ = None
        self.ReplyRestsShop_v2 = ReplyRestsShop_v2
        self.ReplyRestsShop_v2_nsprefix_ = None
        self.Asiiu = Asiiu
        self.Asiiu_nsprefix_ = None
        self.AsiiuTime = AsiiuTime
        self.AsiiuTime_nsprefix_ = None
        self.ActChargeOnShop_v2 = ActChargeOnShop_v2
        self.ActChargeOnShop_v2_nsprefix_ = None
        self.ActWriteOffShop_v2 = ActWriteOffShop_v2
        self.ActWriteOffShop_v2_nsprefix_ = None
        self.InfoVersionTTN = InfoVersionTTN
        self.InfoVersionTTN_nsprefix_ = None
        self.QueryBarcode = QueryBarcode
        self.QueryBarcode_nsprefix_ = None
        self.ReplyBarcode = ReplyBarcode
        self.ReplyBarcode_nsprefix_ = None
        self.RequestRepealWB = RequestRepealWB
        self.RequestRepealWB_nsprefix_ = None
        self.ConfirmRepealWB = ConfirmRepealWB
        self.ConfirmRepealWB_nsprefix_ = None
        self.RequestRepealACO = RequestRepealACO
        self.RequestRepealACO_nsprefix_ = None
        self.RequestRepealAWO = RequestRepealAWO
        self.RequestRepealAWO_nsprefix_ = None
        self.QueryRests_Mini = QueryRests_Mini
        self.QueryRests_Mini_nsprefix_ = None
        self.QueryRestsShop_Mini = QueryRestsShop_Mini
        self.QueryRestsShop_Mini_nsprefix_ = None
        self.ReplyRests_Mini = ReplyRests_Mini
        self.ReplyRests_Mini_nsprefix_ = None
        self.ReplyRestsShop_Mini = ReplyRestsShop_Mini
        self.ReplyRestsShop_Mini_nsprefix_ = None
        self.RequestAddFProducer = RequestAddFProducer
        self.RequestAddFProducer_nsprefix_ = None
        self.RequestAddProducts = RequestAddProducts
        self.RequestAddProducts_nsprefix_ = None
        self.QueryHistoryRestShop = QueryHistoryRestShop
        self.QueryHistoryRestShop_nsprefix_ = None
        self.QueryWriteOffCheque = QueryWriteOffCheque
        self.QueryWriteOffCheque_nsprefix_ = None
        self.ReplyHistoryShop = ReplyHistoryShop
        self.ReplyHistoryShop_nsprefix_ = None
        self.ReplyWriteOffCheque = ReplyWriteOffCheque
        self.ReplyWriteOffCheque_nsprefix_ = None
        self.AscpNav = AscpNav
        self.AscpNav_nsprefix_ = None
        self.AsiiuSign = AsiiuSign
        self.AsiiuSign_nsprefix_ = None
        self.AsiiuTimeSign = AsiiuTimeSign
        self.AsiiuTimeSign_nsprefix_ = None
        self.WayBill_v3 = WayBill_v3
        self.WayBill_v3_nsprefix_ = None
        self.ActWriteOff_v3 = ActWriteOff_v3
        self.ActWriteOff_v3_nsprefix_ = None
        self.WayBillAct_v3 = WayBillAct_v3
        self.WayBillAct_v3_nsprefix_ = None
        self.RepProducedProduct_v3 = RepProducedProduct_v3
        self.RepProducedProduct_v3_nsprefix_ = None
        self.RepImportedProduct_v3 = RepImportedProduct_v3
        self.RepImportedProduct_v3_nsprefix_ = None
        self.QueryRestBCode = QueryRestBCode
        self.QueryRestBCode_nsprefix_ = None
        self.ReplyRestBCode = ReplyRestBCode
        self.ReplyRestBCode_nsprefix_ = None
        self.ActFixBarCode = ActFixBarCode
        self.ActFixBarCode_nsprefix_ = None
        self.ActUnFixBarCode = ActUnFixBarCode
        self.ActUnFixBarCode_nsprefix_ = None
        self.QueryParentHistForm2 = QueryParentHistForm2
        self.QueryParentHistForm2_nsprefix_ = None
        self.ReplyParentHistForm2 = ReplyParentHistForm2
        self.ReplyParentHistForm2_nsprefix_ = None
        self.TTNHistoryF2Reg = TTNHistoryF2Reg
        self.TTNHistoryF2Reg_nsprefix_ = None
        self.CarrierNotice = CarrierNotice
        self.CarrierNotice_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocBody)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocBody.subclass:
            return DocBody.subclass(*args_, **kwargs_)
        else:
            return DocBody(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WayBill(self):
        return self.WayBill
    def set_WayBill(self, WayBill):
        self.WayBill = WayBill
    def get_Ticket(self):
        return self.Ticket
    def set_Ticket(self, Ticket):
        self.Ticket = Ticket
    def get_WayBillAct(self):
        return self.WayBillAct
    def set_WayBillAct(self, WayBillAct):
        self.WayBillAct = WayBillAct
    def get_ConfirmTicket(self):
        return self.ConfirmTicket
    def set_ConfirmTicket(self, ConfirmTicket):
        self.ConfirmTicket = ConfirmTicket
    def get_TTNInformBReg(self):
        return self.TTNInformBReg
    def set_TTNInformBReg(self, TTNInformBReg):
        self.TTNInformBReg = TTNInformBReg
    def get_ActInventory(self):
        return self.ActInventory
    def set_ActInventory(self, ActInventory):
        self.ActInventory = ActInventory
    def get_ActChargeOn(self):
        return self.ActChargeOn
    def set_ActChargeOn(self, ActChargeOn):
        self.ActChargeOn = ActChargeOn
    def get_ActInventoryInformBReg(self):
        return self.ActInventoryInformBReg
    def set_ActInventoryInformBReg(self, ActInventoryInformBReg):
        self.ActInventoryInformBReg = ActInventoryInformBReg
    def get_QueryAP(self):
        return self.QueryAP
    def set_QueryAP(self, QueryAP):
        self.QueryAP = QueryAP
    def get_QuerySSP(self):
        return self.QuerySSP
    def set_QuerySSP(self, QuerySSP):
        self.QuerySSP = QuerySSP
    def get_QuerySP(self):
        return self.QuerySP
    def set_QuerySP(self, QuerySP):
        self.QuerySP = QuerySP
    def get_QueryClients(self):
        return self.QueryClients
    def set_QueryClients(self, QueryClients):
        self.QueryClients = QueryClients
    def get_QueryClientVersion(self):
        return self.QueryClientVersion
    def set_QueryClientVersion(self, QueryClientVersion):
        self.QueryClientVersion = QueryClientVersion
    def get_QueryRests(self):
        return self.QueryRests
    def set_QueryRests(self, QueryRests):
        self.QueryRests = QueryRests
    def get_QueryFormBHistory(self):
        return self.QueryFormBHistory
    def set_QueryFormBHistory(self, QueryFormBHistory):
        self.QueryFormBHistory = QueryFormBHistory
    def get_QueryResendDoc(self):
        return self.QueryResendDoc
    def set_QueryResendDoc(self, QueryResendDoc):
        self.QueryResendDoc = QueryResendDoc
    def get_QueryFormA(self):
        return self.QueryFormA
    def set_QueryFormA(self, QueryFormA):
        self.QueryFormA = QueryFormA
    def get_QueryFormB(self):
        return self.QueryFormB
    def set_QueryFormB(self, QueryFormB):
        self.QueryFormB = QueryFormB
    def get_ActWriteOff(self):
        return self.ActWriteOff
    def set_ActWriteOff(self, ActWriteOff):
        self.ActWriteOff = ActWriteOff
    def get_RepProducedProduct(self):
        return self.RepProducedProduct
    def set_RepProducedProduct(self, RepProducedProduct):
        self.RepProducedProduct = RepProducedProduct
    def get_RepImportedProduct(self):
        return self.RepImportedProduct
    def set_RepImportedProduct(self, RepImportedProduct):
        self.RepImportedProduct = RepImportedProduct
    def get_ReplySSP(self):
        return self.ReplySSP
    def set_ReplySSP(self, ReplySSP):
        self.ReplySSP = ReplySSP
    def get_ReplySpirit(self):
        return self.ReplySpirit
    def set_ReplySpirit(self, ReplySpirit):
        self.ReplySpirit = ReplySpirit
    def get_ReplyClient(self):
        return self.ReplyClient
    def set_ReplyClient(self, ReplyClient):
        self.ReplyClient = ReplyClient
    def get_ReplyAP(self):
        return self.ReplyAP
    def set_ReplyAP(self, ReplyAP):
        self.ReplyAP = ReplyAP
    def get_ReplyRests(self):
        return self.ReplyRests
    def set_ReplyRests(self, ReplyRests):
        self.ReplyRests = ReplyRests
    def get_ReplyFormA(self):
        return self.ReplyFormA
    def set_ReplyFormA(self, ReplyFormA):
        self.ReplyFormA = ReplyFormA
    def get_ReplyFormB(self):
        return self.ReplyFormB
    def set_ReplyFormB(self, ReplyFormB):
        self.ReplyFormB = ReplyFormB
    def get_ReplyHistFormB(self):
        return self.ReplyHistFormB
    def set_ReplyHistFormB(self, ReplyHistFormB):
        self.ReplyHistFormB = ReplyHistFormB
    def get_ReplyClientVersion(self):
        return self.ReplyClientVersion
    def set_ReplyClientVersion(self, ReplyClientVersion):
        self.ReplyClientVersion = ReplyClientVersion
    def get_QueryRejectRepProduced(self):
        return self.QueryRejectRepProduced
    def set_QueryRejectRepProduced(self, QueryRejectRepProduced):
        self.QueryRejectRepProduced = QueryRejectRepProduced
    def get_QueryRejectRepImported(self):
        return self.QueryRejectRepImported
    def set_QueryRejectRepImported(self, QueryRejectRepImported):
        self.QueryRejectRepImported = QueryRejectRepImported
    def get_ReplySSP_v2(self):
        return self.ReplySSP_v2
    def set_ReplySSP_v2(self, ReplySSP_v2):
        self.ReplySSP_v2 = ReplySSP_v2
    def get_ReplySpirit_v2(self):
        return self.ReplySpirit_v2
    def set_ReplySpirit_v2(self, ReplySpirit_v2):
        self.ReplySpirit_v2 = ReplySpirit_v2
    def get_ReplyClient_v2(self):
        return self.ReplyClient_v2
    def set_ReplyClient_v2(self, ReplyClient_v2):
        self.ReplyClient_v2 = ReplyClient_v2
    def get_ReplyAP_v2(self):
        return self.ReplyAP_v2
    def set_ReplyAP_v2(self, ReplyAP_v2):
        self.ReplyAP_v2 = ReplyAP_v2
    def get_ReplyRests_v2(self):
        return self.ReplyRests_v2
    def set_ReplyRests_v2(self, ReplyRests_v2):
        self.ReplyRests_v2 = ReplyRests_v2
    def get_ReplyForm1(self):
        return self.ReplyForm1
    def set_ReplyForm1(self, ReplyForm1):
        self.ReplyForm1 = ReplyForm1
    def get_ReplyForm2(self):
        return self.ReplyForm2
    def set_ReplyForm2(self, ReplyForm2):
        self.ReplyForm2 = ReplyForm2
    def get_ReplyHistForm2(self):
        return self.ReplyHistForm2
    def set_ReplyHistForm2(self, ReplyHistForm2):
        self.ReplyHistForm2 = ReplyHistForm2
    def get_WayBill_v2(self):
        return self.WayBill_v2
    def set_WayBill_v2(self, WayBill_v2):
        self.WayBill_v2 = WayBill_v2
    def get_WayBillAct_v2(self):
        return self.WayBillAct_v2
    def set_WayBillAct_v2(self, WayBillAct_v2):
        self.WayBillAct_v2 = WayBillAct_v2
    def get_ActChargeOn_v2(self):
        return self.ActChargeOn_v2
    def set_ActChargeOn_v2(self, ActChargeOn_v2):
        self.ActChargeOn_v2 = ActChargeOn_v2
    def get_ActInventoryInformF2Reg(self):
        return self.ActInventoryInformF2Reg
    def set_ActInventoryInformF2Reg(self, ActInventoryInformF2Reg):
        self.ActInventoryInformF2Reg = ActInventoryInformF2Reg
    def get_TTNInformF2Reg(self):
        return self.TTNInformF2Reg
    def set_TTNInformF2Reg(self, TTNInformF2Reg):
        self.TTNInformF2Reg = TTNInformF2Reg
    def get_QueryAP_v2(self):
        return self.QueryAP_v2
    def set_QueryAP_v2(self, QueryAP_v2):
        self.QueryAP_v2 = QueryAP_v2
    def get_QuerySSP_v2(self):
        return self.QuerySSP_v2
    def set_QuerySSP_v2(self, QuerySSP_v2):
        self.QuerySSP_v2 = QuerySSP_v2
    def get_QuerySP_v2(self):
        return self.QuerySP_v2
    def set_QuerySP_v2(self, QuerySP_v2):
        self.QuerySP_v2 = QuerySP_v2
    def get_QueryClients_v2(self):
        return self.QueryClients_v2
    def set_QueryClients_v2(self, QueryClients_v2):
        self.QueryClients_v2 = QueryClients_v2
    def get_QueryRests_v2(self):
        return self.QueryRests_v2
    def set_QueryRests_v2(self, QueryRests_v2):
        self.QueryRests_v2 = QueryRests_v2
    def get_QueryFormF1(self):
        return self.QueryFormF1
    def set_QueryFormF1(self, QueryFormF1):
        self.QueryFormF1 = QueryFormF1
    def get_QueryFormF2(self):
        return self.QueryFormF2
    def set_QueryFormF2(self, QueryFormF2):
        self.QueryFormF2 = QueryFormF2
    def get_ActWriteOff_v2(self):
        return self.ActWriteOff_v2
    def set_ActWriteOff_v2(self, ActWriteOff_v2):
        self.ActWriteOff_v2 = ActWriteOff_v2
    def get_TransferFromShop(self):
        return self.TransferFromShop
    def set_TransferFromShop(self, TransferFromShop):
        self.TransferFromShop = TransferFromShop
    def get_TransferToShop(self):
        return self.TransferToShop
    def set_TransferToShop(self, TransferToShop):
        self.TransferToShop = TransferToShop
    def get_QueryForm2History(self):
        return self.QueryForm2History
    def set_QueryForm2History(self, QueryForm2History):
        self.QueryForm2History = QueryForm2History
    def get_RepInformF1Reg(self):
        return self.RepInformF1Reg
    def set_RepInformF1Reg(self, RepInformF1Reg):
        self.RepInformF1Reg = RepInformF1Reg
    def get_ReplyNoAnswerTTN(self):
        return self.ReplyNoAnswerTTN
    def set_ReplyNoAnswerTTN(self, ReplyNoAnswerTTN):
        self.ReplyNoAnswerTTN = ReplyNoAnswerTTN
    def get_QueryNATTN(self):
        return self.QueryNATTN
    def set_QueryNATTN(self, QueryNATTN):
        self.QueryNATTN = QueryNATTN
    def get_QueryRestsShop_v2(self):
        return self.QueryRestsShop_v2
    def set_QueryRestsShop_v2(self, QueryRestsShop_v2):
        self.QueryRestsShop_v2 = QueryRestsShop_v2
    def get_ReplyRestsShop_v2(self):
        return self.ReplyRestsShop_v2
    def set_ReplyRestsShop_v2(self, ReplyRestsShop_v2):
        self.ReplyRestsShop_v2 = ReplyRestsShop_v2
    def get_Asiiu(self):
        return self.Asiiu
    def set_Asiiu(self, Asiiu):
        self.Asiiu = Asiiu
    def get_AsiiuTime(self):
        return self.AsiiuTime
    def set_AsiiuTime(self, AsiiuTime):
        self.AsiiuTime = AsiiuTime
    def get_ActChargeOnShop_v2(self):
        return self.ActChargeOnShop_v2
    def set_ActChargeOnShop_v2(self, ActChargeOnShop_v2):
        self.ActChargeOnShop_v2 = ActChargeOnShop_v2
    def get_ActWriteOffShop_v2(self):
        return self.ActWriteOffShop_v2
    def set_ActWriteOffShop_v2(self, ActWriteOffShop_v2):
        self.ActWriteOffShop_v2 = ActWriteOffShop_v2
    def get_InfoVersionTTN(self):
        return self.InfoVersionTTN
    def set_InfoVersionTTN(self, InfoVersionTTN):
        self.InfoVersionTTN = InfoVersionTTN
    def get_QueryBarcode(self):
        return self.QueryBarcode
    def set_QueryBarcode(self, QueryBarcode):
        self.QueryBarcode = QueryBarcode
    def get_ReplyBarcode(self):
        return self.ReplyBarcode
    def set_ReplyBarcode(self, ReplyBarcode):
        self.ReplyBarcode = ReplyBarcode
    def get_RequestRepealWB(self):
        return self.RequestRepealWB
    def set_RequestRepealWB(self, RequestRepealWB):
        self.RequestRepealWB = RequestRepealWB
    def get_ConfirmRepealWB(self):
        return self.ConfirmRepealWB
    def set_ConfirmRepealWB(self, ConfirmRepealWB):
        self.ConfirmRepealWB = ConfirmRepealWB
    def get_RequestRepealACO(self):
        return self.RequestRepealACO
    def set_RequestRepealACO(self, RequestRepealACO):
        self.RequestRepealACO = RequestRepealACO
    def get_RequestRepealAWO(self):
        return self.RequestRepealAWO
    def set_RequestRepealAWO(self, RequestRepealAWO):
        self.RequestRepealAWO = RequestRepealAWO
    def get_QueryRests_Mini(self):
        return self.QueryRests_Mini
    def set_QueryRests_Mini(self, QueryRests_Mini):
        self.QueryRests_Mini = QueryRests_Mini
    def get_QueryRestsShop_Mini(self):
        return self.QueryRestsShop_Mini
    def set_QueryRestsShop_Mini(self, QueryRestsShop_Mini):
        self.QueryRestsShop_Mini = QueryRestsShop_Mini
    def get_ReplyRests_Mini(self):
        return self.ReplyRests_Mini
    def set_ReplyRests_Mini(self, ReplyRests_Mini):
        self.ReplyRests_Mini = ReplyRests_Mini
    def get_ReplyRestsShop_Mini(self):
        return self.ReplyRestsShop_Mini
    def set_ReplyRestsShop_Mini(self, ReplyRestsShop_Mini):
        self.ReplyRestsShop_Mini = ReplyRestsShop_Mini
    def get_RequestAddFProducer(self):
        return self.RequestAddFProducer
    def set_RequestAddFProducer(self, RequestAddFProducer):
        self.RequestAddFProducer = RequestAddFProducer
    def get_RequestAddProducts(self):
        return self.RequestAddProducts
    def set_RequestAddProducts(self, RequestAddProducts):
        self.RequestAddProducts = RequestAddProducts
    def get_QueryHistoryRestShop(self):
        return self.QueryHistoryRestShop
    def set_QueryHistoryRestShop(self, QueryHistoryRestShop):
        self.QueryHistoryRestShop = QueryHistoryRestShop
    def get_QueryWriteOffCheque(self):
        return self.QueryWriteOffCheque
    def set_QueryWriteOffCheque(self, QueryWriteOffCheque):
        self.QueryWriteOffCheque = QueryWriteOffCheque
    def get_ReplyHistoryShop(self):
        return self.ReplyHistoryShop
    def set_ReplyHistoryShop(self, ReplyHistoryShop):
        self.ReplyHistoryShop = ReplyHistoryShop
    def get_ReplyWriteOffCheque(self):
        return self.ReplyWriteOffCheque
    def set_ReplyWriteOffCheque(self, ReplyWriteOffCheque):
        self.ReplyWriteOffCheque = ReplyWriteOffCheque
    def get_AscpNav(self):
        return self.AscpNav
    def set_AscpNav(self, AscpNav):
        self.AscpNav = AscpNav
    def get_AsiiuSign(self):
        return self.AsiiuSign
    def set_AsiiuSign(self, AsiiuSign):
        self.AsiiuSign = AsiiuSign
    def get_AsiiuTimeSign(self):
        return self.AsiiuTimeSign
    def set_AsiiuTimeSign(self, AsiiuTimeSign):
        self.AsiiuTimeSign = AsiiuTimeSign
    def get_WayBill_v3(self):
        return self.WayBill_v3
    def set_WayBill_v3(self, WayBill_v3):
        self.WayBill_v3 = WayBill_v3
    def get_ActWriteOff_v3(self):
        return self.ActWriteOff_v3
    def set_ActWriteOff_v3(self, ActWriteOff_v3):
        self.ActWriteOff_v3 = ActWriteOff_v3
    def get_WayBillAct_v3(self):
        return self.WayBillAct_v3
    def set_WayBillAct_v3(self, WayBillAct_v3):
        self.WayBillAct_v3 = WayBillAct_v3
    def get_RepProducedProduct_v3(self):
        return self.RepProducedProduct_v3
    def set_RepProducedProduct_v3(self, RepProducedProduct_v3):
        self.RepProducedProduct_v3 = RepProducedProduct_v3
    def get_RepImportedProduct_v3(self):
        return self.RepImportedProduct_v3
    def set_RepImportedProduct_v3(self, RepImportedProduct_v3):
        self.RepImportedProduct_v3 = RepImportedProduct_v3
    def get_QueryRestBCode(self):
        return self.QueryRestBCode
    def set_QueryRestBCode(self, QueryRestBCode):
        self.QueryRestBCode = QueryRestBCode
    def get_ReplyRestBCode(self):
        return self.ReplyRestBCode
    def set_ReplyRestBCode(self, ReplyRestBCode):
        self.ReplyRestBCode = ReplyRestBCode
    def get_ActFixBarCode(self):
        return self.ActFixBarCode
    def set_ActFixBarCode(self, ActFixBarCode):
        self.ActFixBarCode = ActFixBarCode
    def get_ActUnFixBarCode(self):
        return self.ActUnFixBarCode
    def set_ActUnFixBarCode(self, ActUnFixBarCode):
        self.ActUnFixBarCode = ActUnFixBarCode
    def get_QueryParentHistForm2(self):
        return self.QueryParentHistForm2
    def set_QueryParentHistForm2(self, QueryParentHistForm2):
        self.QueryParentHistForm2 = QueryParentHistForm2
    def get_ReplyParentHistForm2(self):
        return self.ReplyParentHistForm2
    def set_ReplyParentHistForm2(self, ReplyParentHistForm2):
        self.ReplyParentHistForm2 = ReplyParentHistForm2
    def get_TTNHistoryF2Reg(self):
        return self.TTNHistoryF2Reg
    def set_TTNHistoryF2Reg(self, TTNHistoryF2Reg):
        self.TTNHistoryF2Reg = TTNHistoryF2Reg
    def get_CarrierNotice(self):
        return self.CarrierNotice
    def set_CarrierNotice(self, CarrierNotice):
        self.CarrierNotice = CarrierNotice
    def hasContent_(self):
        if (
            self.WayBill is not None or
            self.Ticket is not None or
            self.WayBillAct is not None or
            self.ConfirmTicket is not None or
            self.TTNInformBReg is not None or
            self.ActInventory is not None or
            self.ActChargeOn is not None or
            self.ActInventoryInformBReg is not None or
            self.QueryAP is not None or
            self.QuerySSP is not None or
            self.QuerySP is not None or
            self.QueryClients is not None or
            self.QueryClientVersion is not None or
            self.QueryRests is not None or
            self.QueryFormBHistory is not None or
            self.QueryResendDoc is not None or
            self.QueryFormA is not None or
            self.QueryFormB is not None or
            self.ActWriteOff is not None or
            self.RepProducedProduct is not None or
            self.RepImportedProduct is not None or
            self.ReplySSP is not None or
            self.ReplySpirit is not None or
            self.ReplyClient is not None or
            self.ReplyAP is not None or
            self.ReplyRests is not None or
            self.ReplyFormA is not None or
            self.ReplyFormB is not None or
            self.ReplyHistFormB is not None or
            self.ReplyClientVersion is not None or
            self.QueryRejectRepProduced is not None or
            self.QueryRejectRepImported is not None or
            self.ReplySSP_v2 is not None or
            self.ReplySpirit_v2 is not None or
            self.ReplyClient_v2 is not None or
            self.ReplyAP_v2 is not None or
            self.ReplyRests_v2 is not None or
            self.ReplyForm1 is not None or
            self.ReplyForm2 is not None or
            self.ReplyHistForm2 is not None or
            self.WayBill_v2 is not None or
            self.WayBillAct_v2 is not None or
            self.ActChargeOn_v2 is not None or
            self.ActInventoryInformF2Reg is not None or
            self.TTNInformF2Reg is not None or
            self.QueryAP_v2 is not None or
            self.QuerySSP_v2 is not None or
            self.QuerySP_v2 is not None or
            self.QueryClients_v2 is not None or
            self.QueryRests_v2 is not None or
            self.QueryFormF1 is not None or
            self.QueryFormF2 is not None or
            self.ActWriteOff_v2 is not None or
            self.TransferFromShop is not None or
            self.TransferToShop is not None or
            self.QueryForm2History is not None or
            self.RepInformF1Reg is not None or
            self.ReplyNoAnswerTTN is not None or
            self.QueryNATTN is not None or
            self.QueryRestsShop_v2 is not None or
            self.ReplyRestsShop_v2 is not None or
            self.Asiiu is not None or
            self.AsiiuTime is not None or
            self.ActChargeOnShop_v2 is not None or
            self.ActWriteOffShop_v2 is not None or
            self.InfoVersionTTN is not None or
            self.QueryBarcode is not None or
            self.ReplyBarcode is not None or
            self.RequestRepealWB is not None or
            self.ConfirmRepealWB is not None or
            self.RequestRepealACO is not None or
            self.RequestRepealAWO is not None or
            self.QueryRests_Mini is not None or
            self.QueryRestsShop_Mini is not None or
            self.ReplyRests_Mini is not None or
            self.ReplyRestsShop_Mini is not None or
            self.RequestAddFProducer is not None or
            self.RequestAddProducts is not None or
            self.QueryHistoryRestShop is not None or
            self.QueryWriteOffCheque is not None or
            self.ReplyHistoryShop is not None or
            self.ReplyWriteOffCheque is not None or
            self.AscpNav is not None or
            self.AsiiuSign is not None or
            self.AsiiuTimeSign is not None or
            self.WayBill_v3 is not None or
            self.ActWriteOff_v3 is not None or
            self.WayBillAct_v3 is not None or
            self.RepProducedProduct_v3 is not None or
            self.RepImportedProduct_v3 is not None or
            self.QueryRestBCode is not None or
            self.ReplyRestBCode is not None or
            self.ActFixBarCode is not None or
            self.ActUnFixBarCode is not None or
            self.QueryParentHistForm2 is not None or
            self.ReplyParentHistForm2 is not None or
            self.TTNHistoryF2Reg is not None or
            self.CarrierNotice is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:wb="http://fsrar.ru/WEGAIS/TTNSingle"  xmlns:tc="http://fsrar.ru/WEGAIS/Ticket"  xmlns:wa="http://fsrar.ru/WEGAIS/ActTTNSingle"  xmlns:ctc="http://fsrar.ru/WEGAIS/ConfirmTicket"  xmlns:wbr="http://fsrar.ru/WEGAIS/TTNInformBReg"  xmlns:ain="http://fsrar.ru/WEGAIS/ActInventorySingle"  xmlns:ainp="http://fsrar.ru/WEGAIS/ActChargeOn"  xmlns:aint="http://fsrar.ru/WEGAIS/ActInventoryInformBReg"  xmlns:qp="http://fsrar.ru/WEGAIS/QueryParameters"  xmlns:qf="http://fsrar.ru/WEGAIS/QueryFormAB"  xmlns:awr="http://fsrar.ru/WEGAIS/ActWriteOff"  xmlns:rpp="http://fsrar.ru/WEGAIS/RepProducedProduct"  xmlns:rpi="http://fsrar.ru/WEGAIS/RepImportedProduct"  xmlns:rssp="http://fsrar.ru/WEGAIS/ReplySSP"  xmlns:rs="http://fsrar.ru/WEGAIS/ReplySpirit"  xmlns:rc="http://fsrar.ru/WEGAIS/ReplyClient"  xmlns:rap="http://fsrar.ru/WEGAIS/ReplyAP"  xmlns:rst="http://fsrar.ru/WEGAIS/ReplyRests"  xmlns:rfa="http://fsrar.ru/WEGAIS/ReplyFormA"  xmlns:rfb="http://fsrar.ru/WEGAIS/ReplyFormB"  xmlns:rfhb="http://fsrar.ru/WEGAIS/ReplyHistFormB"  xmlns:orefv="http://fsrar.ru/WEGAIS/ReplyClientVersion"  xmlns:qrrp="http://fsrar.ru/WEGAIS/QueryRejectRepProduced"  xmlns:qrri="http://fsrar.ru/WEGAIS/QueryRejectRepImported"  xmlns:rssp2="http://fsrar.ru/WEGAIS/ReplySSP_v2"  xmlns:rs2="http://fsrar.ru/WEGAIS/ReplySpirit_v2"  xmlns:rc2="http://fsrar.ru/WEGAIS/ReplyClient_v2"  xmlns:rap2="http://fsrar.ru/WEGAIS/ReplyAP_v2"  xmlns:rst2="http://fsrar.ru/WEGAIS/ReplyRests_v2"  xmlns:rfa2="http://fsrar.ru/WEGAIS/ReplyForm1"  xmlns:rfb2="http://fsrar.ru/WEGAIS/ReplyForm2"  xmlns:rfhb2="http://fsrar.ru/WEGAIS/ReplyHistForm2"  xmlns:wb2="http://fsrar.ru/WEGAIS/TTNSingle_v2"  xmlns:wa2="http://fsrar.ru/WEGAIS/ActTTNSingle_v2"  xmlns:ainp2="http://fsrar.ru/WEGAIS/ActChargeOn_v2"  xmlns:aint2="http://fsrar.ru/WEGAIS/ActInventoryInformF2Reg"  xmlns:wbr2="http://fsrar.ru/WEGAIS/TTNInformF2Reg"  xmlns:qf2="http://fsrar.ru/WEGAIS/QueryFormF1F2"  xmlns:awr2="http://fsrar.ru/WEGAIS/ActWriteOff_v2"  xmlns:tfs="http://fsrar.ru/WEGAIS/TransferFromShop"  xmlns:tts="http://fsrar.ru/WEGAIS/TransferToShop"  xmlns:ripf1="http://fsrar.ru/WEGAIS/RepInformF1Reg"  xmlns:nattn="http://fsrar.ru/WEGAIS/ReplyNoAnswerTTN"  xmlns:rsts2="http://fsrar.ru/WEGAIS/ReplyRestsShop_v2"  xmlns:asiu="http://fsrar.ru/WEGAIS/Asiiu"  xmlns:asiut="http://fsrar.ru/WEGAIS/AsiiuTime"  xmlns:ains2="http://fsrar.ru/WEGAIS/ActChargeOnShop_v2"  xmlns:awrs2="http://fsrar.ru/WEGAIS/ActWriteOffShop_v2"  xmlns:wbfu="http://fsrar.ru/WEGAIS/InfoVersionTTN"  xmlns:qbc="http://fsrar.ru/WEGAIS/QueryBarcode"  xmlns:rbc="http://fsrar.ru/WEGAIS/ReplyBarcode"  xmlns:rrwb="http://fsrar.ru/WEGAIS/RequestRepealWB"  xmlns:crwb="http://fsrar.ru/WEGAIS/ConfirmRepealWB"  xmlns:rraco="http://fsrar.ru/WEGAIS/RequestRepealACO"  xmlns:rrawo="http://fsrar.ru/WEGAIS/RequestRepealAWO"  xmlns:rstm="http://fsrar.ru/WEGAIS/ReplyRests_Mini"  xmlns:rstsm="http://fsrar.ru/WEGAIS/ReplyRestsShop_Mini"  xmlns:raddf="http://fsrar.ru/WEGAIS/RequestAddFProducer"  xmlns:raddp="http://fsrar.ru/WEGAIS/RequestAddProducts"  xmlns:rhrs="http://fsrar.ru/WEGAIS/ReplyHistoryShop"  xmlns:rwoc="http://fsrar.ru/WEGAIS/ReplyWriteOffCheque"  xmlns:ascp="http://fsrar.ru/WEGAIS/AscpNavigation"  xmlns:wb3="http://fsrar.ru/WEGAIS/TTNSingle_v3"  xmlns:awr3="http://fsrar.ru/WEGAIS/ActWriteOff_v3"  xmlns:wa3="http://fsrar.ru/WEGAIS/ActTTNSingle_v3"  xmlns:rpp3="http://fsrar.ru/WEGAIS/RepProducedProduct_v3"  xmlns:rpi3="http://fsrar.ru/WEGAIS/RepImportedProduct_v3"  xmlns:rsbc="http://fsrar.ru/WEGAIS/ReplyRestBCode"  xmlns:afbc="http://fsrar.ru/WEGAIS/ActFixBarCode"  xmlns:aufbc="http://fsrar.ru/WEGAIS/ActUnFixBarCode"  xmlns:rrhb2="http://fsrar.ru/WEGAIS/ReplyParentHistForm2"  xmlns:wbhr2="http://fsrar.ru/WEGAIS/TTNHistoryF2Reg"  xmlns:wbhcn="http://fsrar.ru/WEGAIS/CarrierNotice" ', name_='DocBody', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocBody')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocBody':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocBody')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocBody', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DocBody'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:wb="http://fsrar.ru/WEGAIS/TTNSingle"  xmlns:tc="http://fsrar.ru/WEGAIS/Ticket"  xmlns:wa="http://fsrar.ru/WEGAIS/ActTTNSingle"  xmlns:ctc="http://fsrar.ru/WEGAIS/ConfirmTicket"  xmlns:wbr="http://fsrar.ru/WEGAIS/TTNInformBReg"  xmlns:ain="http://fsrar.ru/WEGAIS/ActInventorySingle"  xmlns:ainp="http://fsrar.ru/WEGAIS/ActChargeOn"  xmlns:aint="http://fsrar.ru/WEGAIS/ActInventoryInformBReg"  xmlns:qp="http://fsrar.ru/WEGAIS/QueryParameters"  xmlns:qf="http://fsrar.ru/WEGAIS/QueryFormAB"  xmlns:awr="http://fsrar.ru/WEGAIS/ActWriteOff"  xmlns:rpp="http://fsrar.ru/WEGAIS/RepProducedProduct"  xmlns:rpi="http://fsrar.ru/WEGAIS/RepImportedProduct"  xmlns:rssp="http://fsrar.ru/WEGAIS/ReplySSP"  xmlns:rs="http://fsrar.ru/WEGAIS/ReplySpirit"  xmlns:rc="http://fsrar.ru/WEGAIS/ReplyClient"  xmlns:rap="http://fsrar.ru/WEGAIS/ReplyAP"  xmlns:rst="http://fsrar.ru/WEGAIS/ReplyRests"  xmlns:rfa="http://fsrar.ru/WEGAIS/ReplyFormA"  xmlns:rfb="http://fsrar.ru/WEGAIS/ReplyFormB"  xmlns:rfhb="http://fsrar.ru/WEGAIS/ReplyHistFormB"  xmlns:orefv="http://fsrar.ru/WEGAIS/ReplyClientVersion"  xmlns:qrrp="http://fsrar.ru/WEGAIS/QueryRejectRepProduced"  xmlns:qrri="http://fsrar.ru/WEGAIS/QueryRejectRepImported"  xmlns:rssp2="http://fsrar.ru/WEGAIS/ReplySSP_v2"  xmlns:rs2="http://fsrar.ru/WEGAIS/ReplySpirit_v2"  xmlns:rc2="http://fsrar.ru/WEGAIS/ReplyClient_v2"  xmlns:rap2="http://fsrar.ru/WEGAIS/ReplyAP_v2"  xmlns:rst2="http://fsrar.ru/WEGAIS/ReplyRests_v2"  xmlns:rfa2="http://fsrar.ru/WEGAIS/ReplyForm1"  xmlns:rfb2="http://fsrar.ru/WEGAIS/ReplyForm2"  xmlns:rfhb2="http://fsrar.ru/WEGAIS/ReplyHistForm2"  xmlns:wb2="http://fsrar.ru/WEGAIS/TTNSingle_v2"  xmlns:wa2="http://fsrar.ru/WEGAIS/ActTTNSingle_v2"  xmlns:ainp2="http://fsrar.ru/WEGAIS/ActChargeOn_v2"  xmlns:aint2="http://fsrar.ru/WEGAIS/ActInventoryInformF2Reg"  xmlns:wbr2="http://fsrar.ru/WEGAIS/TTNInformF2Reg"  xmlns:qf2="http://fsrar.ru/WEGAIS/QueryFormF1F2"  xmlns:awr2="http://fsrar.ru/WEGAIS/ActWriteOff_v2"  xmlns:tfs="http://fsrar.ru/WEGAIS/TransferFromShop"  xmlns:tts="http://fsrar.ru/WEGAIS/TransferToShop"  xmlns:ripf1="http://fsrar.ru/WEGAIS/RepInformF1Reg"  xmlns:nattn="http://fsrar.ru/WEGAIS/ReplyNoAnswerTTN"  xmlns:rsts2="http://fsrar.ru/WEGAIS/ReplyRestsShop_v2"  xmlns:asiu="http://fsrar.ru/WEGAIS/Asiiu"  xmlns:asiut="http://fsrar.ru/WEGAIS/AsiiuTime"  xmlns:ains2="http://fsrar.ru/WEGAIS/ActChargeOnShop_v2"  xmlns:awrs2="http://fsrar.ru/WEGAIS/ActWriteOffShop_v2"  xmlns:wbfu="http://fsrar.ru/WEGAIS/InfoVersionTTN"  xmlns:qbc="http://fsrar.ru/WEGAIS/QueryBarcode"  xmlns:rbc="http://fsrar.ru/WEGAIS/ReplyBarcode"  xmlns:rrwb="http://fsrar.ru/WEGAIS/RequestRepealWB"  xmlns:crwb="http://fsrar.ru/WEGAIS/ConfirmRepealWB"  xmlns:rraco="http://fsrar.ru/WEGAIS/RequestRepealACO"  xmlns:rrawo="http://fsrar.ru/WEGAIS/RequestRepealAWO"  xmlns:rstm="http://fsrar.ru/WEGAIS/ReplyRests_Mini"  xmlns:rstsm="http://fsrar.ru/WEGAIS/ReplyRestsShop_Mini"  xmlns:raddf="http://fsrar.ru/WEGAIS/RequestAddFProducer"  xmlns:raddp="http://fsrar.ru/WEGAIS/RequestAddProducts"  xmlns:rhrs="http://fsrar.ru/WEGAIS/ReplyHistoryShop"  xmlns:rwoc="http://fsrar.ru/WEGAIS/ReplyWriteOffCheque"  xmlns:ascp="http://fsrar.ru/WEGAIS/AscpNavigation"  xmlns:wb3="http://fsrar.ru/WEGAIS/TTNSingle_v3"  xmlns:awr3="http://fsrar.ru/WEGAIS/ActWriteOff_v3"  xmlns:wa3="http://fsrar.ru/WEGAIS/ActTTNSingle_v3"  xmlns:rpp3="http://fsrar.ru/WEGAIS/RepProducedProduct_v3"  xmlns:rpi3="http://fsrar.ru/WEGAIS/RepImportedProduct_v3"  xmlns:rsbc="http://fsrar.ru/WEGAIS/ReplyRestBCode"  xmlns:afbc="http://fsrar.ru/WEGAIS/ActFixBarCode"  xmlns:aufbc="http://fsrar.ru/WEGAIS/ActUnFixBarCode"  xmlns:rrhb2="http://fsrar.ru/WEGAIS/ReplyParentHistForm2"  xmlns:wbhr2="http://fsrar.ru/WEGAIS/TTNHistoryF2Reg"  xmlns:wbhcn="http://fsrar.ru/WEGAIS/CarrierNotice" ', name_='DocBody', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WayBill is not None:
            namespaceprefix_ = self.WayBill_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBill_nsprefix_) else ''
            self.WayBill.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBill', pretty_print=pretty_print)
        if self.Ticket is not None:
            namespaceprefix_ = self.Ticket_nsprefix_ + ':' if (UseCapturedNS_ and self.Ticket_nsprefix_) else ''
            self.Ticket.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Ticket', pretty_print=pretty_print)
        if self.WayBillAct is not None:
            namespaceprefix_ = self.WayBillAct_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBillAct_nsprefix_) else ''
            self.WayBillAct.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBillAct', pretty_print=pretty_print)
        if self.ConfirmTicket is not None:
            namespaceprefix_ = self.ConfirmTicket_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmTicket_nsprefix_) else ''
            self.ConfirmTicket.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfirmTicket', pretty_print=pretty_print)
        if self.TTNInformBReg is not None:
            namespaceprefix_ = self.TTNInformBReg_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNInformBReg_nsprefix_) else ''
            self.TTNInformBReg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TTNInformBReg', pretty_print=pretty_print)
        if self.ActInventory is not None:
            namespaceprefix_ = self.ActInventory_nsprefix_ + ':' if (UseCapturedNS_ and self.ActInventory_nsprefix_) else ''
            self.ActInventory.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActInventory', pretty_print=pretty_print)
        if self.ActChargeOn is not None:
            namespaceprefix_ = self.ActChargeOn_nsprefix_ + ':' if (UseCapturedNS_ and self.ActChargeOn_nsprefix_) else ''
            self.ActChargeOn.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActChargeOn', pretty_print=pretty_print)
        if self.ActInventoryInformBReg is not None:
            namespaceprefix_ = self.ActInventoryInformBReg_nsprefix_ + ':' if (UseCapturedNS_ and self.ActInventoryInformBReg_nsprefix_) else ''
            self.ActInventoryInformBReg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActInventoryInformBReg', pretty_print=pretty_print)
        if self.QueryAP is not None:
            namespaceprefix_ = self.QueryAP_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryAP_nsprefix_) else ''
            self.QueryAP.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryAP', pretty_print=pretty_print)
        if self.QuerySSP is not None:
            namespaceprefix_ = self.QuerySSP_nsprefix_ + ':' if (UseCapturedNS_ and self.QuerySSP_nsprefix_) else ''
            self.QuerySSP.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QuerySSP', pretty_print=pretty_print)
        if self.QuerySP is not None:
            namespaceprefix_ = self.QuerySP_nsprefix_ + ':' if (UseCapturedNS_ and self.QuerySP_nsprefix_) else ''
            self.QuerySP.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QuerySP', pretty_print=pretty_print)
        if self.QueryClients is not None:
            namespaceprefix_ = self.QueryClients_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryClients_nsprefix_) else ''
            self.QueryClients.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryClients', pretty_print=pretty_print)
        if self.QueryClientVersion is not None:
            namespaceprefix_ = self.QueryClientVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryClientVersion_nsprefix_) else ''
            self.QueryClientVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryClientVersion', pretty_print=pretty_print)
        if self.QueryRests is not None:
            namespaceprefix_ = self.QueryRests_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRests_nsprefix_) else ''
            self.QueryRests.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRests', pretty_print=pretty_print)
        if self.QueryFormBHistory is not None:
            namespaceprefix_ = self.QueryFormBHistory_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryFormBHistory_nsprefix_) else ''
            self.QueryFormBHistory.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryFormBHistory', pretty_print=pretty_print)
        if self.QueryResendDoc is not None:
            namespaceprefix_ = self.QueryResendDoc_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryResendDoc_nsprefix_) else ''
            self.QueryResendDoc.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryResendDoc', pretty_print=pretty_print)
        if self.QueryFormA is not None:
            namespaceprefix_ = self.QueryFormA_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryFormA_nsprefix_) else ''
            self.QueryFormA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryFormA', pretty_print=pretty_print)
        if self.QueryFormB is not None:
            namespaceprefix_ = self.QueryFormB_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryFormB_nsprefix_) else ''
            self.QueryFormB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryFormB', pretty_print=pretty_print)
        if self.ActWriteOff is not None:
            namespaceprefix_ = self.ActWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOff_nsprefix_) else ''
            self.ActWriteOff.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActWriteOff', pretty_print=pretty_print)
        if self.RepProducedProduct is not None:
            namespaceprefix_ = self.RepProducedProduct_nsprefix_ + ':' if (UseCapturedNS_ and self.RepProducedProduct_nsprefix_) else ''
            self.RepProducedProduct.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepProducedProduct', pretty_print=pretty_print)
        if self.RepImportedProduct is not None:
            namespaceprefix_ = self.RepImportedProduct_nsprefix_ + ':' if (UseCapturedNS_ and self.RepImportedProduct_nsprefix_) else ''
            self.RepImportedProduct.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepImportedProduct', pretty_print=pretty_print)
        if self.ReplySSP is not None:
            namespaceprefix_ = self.ReplySSP_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplySSP_nsprefix_) else ''
            self.ReplySSP.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplySSP', pretty_print=pretty_print)
        if self.ReplySpirit is not None:
            namespaceprefix_ = self.ReplySpirit_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplySpirit_nsprefix_) else ''
            self.ReplySpirit.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplySpirit', pretty_print=pretty_print)
        if self.ReplyClient is not None:
            namespaceprefix_ = self.ReplyClient_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyClient_nsprefix_) else ''
            self.ReplyClient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyClient', pretty_print=pretty_print)
        if self.ReplyAP is not None:
            namespaceprefix_ = self.ReplyAP_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyAP_nsprefix_) else ''
            self.ReplyAP.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyAP', pretty_print=pretty_print)
        if self.ReplyRests is not None:
            namespaceprefix_ = self.ReplyRests_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRests_nsprefix_) else ''
            self.ReplyRests.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRests', pretty_print=pretty_print)
        if self.ReplyFormA is not None:
            namespaceprefix_ = self.ReplyFormA_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyFormA_nsprefix_) else ''
            self.ReplyFormA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyFormA', pretty_print=pretty_print)
        if self.ReplyFormB is not None:
            namespaceprefix_ = self.ReplyFormB_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyFormB_nsprefix_) else ''
            self.ReplyFormB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyFormB', pretty_print=pretty_print)
        if self.ReplyHistFormB is not None:
            namespaceprefix_ = self.ReplyHistFormB_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyHistFormB_nsprefix_) else ''
            self.ReplyHistFormB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyHistFormB', pretty_print=pretty_print)
        if self.ReplyClientVersion is not None:
            namespaceprefix_ = self.ReplyClientVersion_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyClientVersion_nsprefix_) else ''
            self.ReplyClientVersion.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyClientVersion', pretty_print=pretty_print)
        if self.QueryRejectRepProduced is not None:
            namespaceprefix_ = self.QueryRejectRepProduced_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRejectRepProduced_nsprefix_) else ''
            self.QueryRejectRepProduced.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRejectRepProduced', pretty_print=pretty_print)
        if self.QueryRejectRepImported is not None:
            namespaceprefix_ = self.QueryRejectRepImported_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRejectRepImported_nsprefix_) else ''
            self.QueryRejectRepImported.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRejectRepImported', pretty_print=pretty_print)
        if self.ReplySSP_v2 is not None:
            namespaceprefix_ = self.ReplySSP_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplySSP_v2_nsprefix_) else ''
            self.ReplySSP_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplySSP_v2', pretty_print=pretty_print)
        if self.ReplySpirit_v2 is not None:
            namespaceprefix_ = self.ReplySpirit_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplySpirit_v2_nsprefix_) else ''
            self.ReplySpirit_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplySpirit_v2', pretty_print=pretty_print)
        if self.ReplyClient_v2 is not None:
            namespaceprefix_ = self.ReplyClient_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyClient_v2_nsprefix_) else ''
            self.ReplyClient_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyClient_v2', pretty_print=pretty_print)
        if self.ReplyAP_v2 is not None:
            namespaceprefix_ = self.ReplyAP_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyAP_v2_nsprefix_) else ''
            self.ReplyAP_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyAP_v2', pretty_print=pretty_print)
        if self.ReplyRests_v2 is not None:
            namespaceprefix_ = self.ReplyRests_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRests_v2_nsprefix_) else ''
            self.ReplyRests_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRests_v2', pretty_print=pretty_print)
        if self.ReplyForm1 is not None:
            namespaceprefix_ = self.ReplyForm1_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyForm1_nsprefix_) else ''
            self.ReplyForm1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyForm1', pretty_print=pretty_print)
        if self.ReplyForm2 is not None:
            namespaceprefix_ = self.ReplyForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyForm2_nsprefix_) else ''
            self.ReplyForm2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyForm2', pretty_print=pretty_print)
        if self.ReplyHistForm2 is not None:
            namespaceprefix_ = self.ReplyHistForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyHistForm2_nsprefix_) else ''
            self.ReplyHistForm2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyHistForm2', pretty_print=pretty_print)
        if self.WayBill_v2 is not None:
            namespaceprefix_ = self.WayBill_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBill_v2_nsprefix_) else ''
            self.WayBill_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBill_v2', pretty_print=pretty_print)
        if self.WayBillAct_v2 is not None:
            namespaceprefix_ = self.WayBillAct_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBillAct_v2_nsprefix_) else ''
            self.WayBillAct_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBillAct_v2', pretty_print=pretty_print)
        if self.ActChargeOn_v2 is not None:
            namespaceprefix_ = self.ActChargeOn_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ActChargeOn_v2_nsprefix_) else ''
            self.ActChargeOn_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActChargeOn_v2', pretty_print=pretty_print)
        if self.ActInventoryInformF2Reg is not None:
            namespaceprefix_ = self.ActInventoryInformF2Reg_nsprefix_ + ':' if (UseCapturedNS_ and self.ActInventoryInformF2Reg_nsprefix_) else ''
            self.ActInventoryInformF2Reg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActInventoryInformF2Reg', pretty_print=pretty_print)
        if self.TTNInformF2Reg is not None:
            namespaceprefix_ = self.TTNInformF2Reg_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNInformF2Reg_nsprefix_) else ''
            self.TTNInformF2Reg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TTNInformF2Reg', pretty_print=pretty_print)
        if self.QueryAP_v2 is not None:
            namespaceprefix_ = self.QueryAP_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryAP_v2_nsprefix_) else ''
            self.QueryAP_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryAP_v2', pretty_print=pretty_print)
        if self.QuerySSP_v2 is not None:
            namespaceprefix_ = self.QuerySSP_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QuerySSP_v2_nsprefix_) else ''
            self.QuerySSP_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QuerySSP_v2', pretty_print=pretty_print)
        if self.QuerySP_v2 is not None:
            namespaceprefix_ = self.QuerySP_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QuerySP_v2_nsprefix_) else ''
            self.QuerySP_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QuerySP_v2', pretty_print=pretty_print)
        if self.QueryClients_v2 is not None:
            namespaceprefix_ = self.QueryClients_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryClients_v2_nsprefix_) else ''
            self.QueryClients_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryClients_v2', pretty_print=pretty_print)
        if self.QueryRests_v2 is not None:
            namespaceprefix_ = self.QueryRests_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRests_v2_nsprefix_) else ''
            self.QueryRests_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRests_v2', pretty_print=pretty_print)
        if self.QueryFormF1 is not None:
            namespaceprefix_ = self.QueryFormF1_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryFormF1_nsprefix_) else ''
            self.QueryFormF1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryFormF1', pretty_print=pretty_print)
        if self.QueryFormF2 is not None:
            namespaceprefix_ = self.QueryFormF2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryFormF2_nsprefix_) else ''
            self.QueryFormF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryFormF2', pretty_print=pretty_print)
        if self.ActWriteOff_v2 is not None:
            namespaceprefix_ = self.ActWriteOff_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOff_v2_nsprefix_) else ''
            self.ActWriteOff_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActWriteOff_v2', pretty_print=pretty_print)
        if self.TransferFromShop is not None:
            namespaceprefix_ = self.TransferFromShop_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferFromShop_nsprefix_) else ''
            self.TransferFromShop.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransferFromShop', pretty_print=pretty_print)
        if self.TransferToShop is not None:
            namespaceprefix_ = self.TransferToShop_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferToShop_nsprefix_) else ''
            self.TransferToShop.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TransferToShop', pretty_print=pretty_print)
        if self.QueryForm2History is not None:
            namespaceprefix_ = self.QueryForm2History_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryForm2History_nsprefix_) else ''
            self.QueryForm2History.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryForm2History', pretty_print=pretty_print)
        if self.RepInformF1Reg is not None:
            namespaceprefix_ = self.RepInformF1Reg_nsprefix_ + ':' if (UseCapturedNS_ and self.RepInformF1Reg_nsprefix_) else ''
            self.RepInformF1Reg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepInformF1Reg', pretty_print=pretty_print)
        if self.ReplyNoAnswerTTN is not None:
            namespaceprefix_ = self.ReplyNoAnswerTTN_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyNoAnswerTTN_nsprefix_) else ''
            self.ReplyNoAnswerTTN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyNoAnswerTTN', pretty_print=pretty_print)
        if self.QueryNATTN is not None:
            namespaceprefix_ = self.QueryNATTN_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryNATTN_nsprefix_) else ''
            self.QueryNATTN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryNATTN', pretty_print=pretty_print)
        if self.QueryRestsShop_v2 is not None:
            namespaceprefix_ = self.QueryRestsShop_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRestsShop_v2_nsprefix_) else ''
            self.QueryRestsShop_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRestsShop_v2', pretty_print=pretty_print)
        if self.ReplyRestsShop_v2 is not None:
            namespaceprefix_ = self.ReplyRestsShop_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRestsShop_v2_nsprefix_) else ''
            self.ReplyRestsShop_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRestsShop_v2', pretty_print=pretty_print)
        if self.Asiiu is not None:
            namespaceprefix_ = self.Asiiu_nsprefix_ + ':' if (UseCapturedNS_ and self.Asiiu_nsprefix_) else ''
            self.Asiiu.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Asiiu', pretty_print=pretty_print)
        if self.AsiiuTime is not None:
            namespaceprefix_ = self.AsiiuTime_nsprefix_ + ':' if (UseCapturedNS_ and self.AsiiuTime_nsprefix_) else ''
            self.AsiiuTime.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AsiiuTime', pretty_print=pretty_print)
        if self.ActChargeOnShop_v2 is not None:
            namespaceprefix_ = self.ActChargeOnShop_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ActChargeOnShop_v2_nsprefix_) else ''
            self.ActChargeOnShop_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActChargeOnShop_v2', pretty_print=pretty_print)
        if self.ActWriteOffShop_v2 is not None:
            namespaceprefix_ = self.ActWriteOffShop_v2_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOffShop_v2_nsprefix_) else ''
            self.ActWriteOffShop_v2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActWriteOffShop_v2', pretty_print=pretty_print)
        if self.InfoVersionTTN is not None:
            namespaceprefix_ = self.InfoVersionTTN_nsprefix_ + ':' if (UseCapturedNS_ and self.InfoVersionTTN_nsprefix_) else ''
            self.InfoVersionTTN.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfoVersionTTN', pretty_print=pretty_print)
        if self.QueryBarcode is not None:
            namespaceprefix_ = self.QueryBarcode_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryBarcode_nsprefix_) else ''
            self.QueryBarcode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryBarcode', pretty_print=pretty_print)
        if self.ReplyBarcode is not None:
            namespaceprefix_ = self.ReplyBarcode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyBarcode_nsprefix_) else ''
            self.ReplyBarcode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyBarcode', pretty_print=pretty_print)
        if self.RequestRepealWB is not None:
            namespaceprefix_ = self.RequestRepealWB_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRepealWB_nsprefix_) else ''
            self.RequestRepealWB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRepealWB', pretty_print=pretty_print)
        if self.ConfirmRepealWB is not None:
            namespaceprefix_ = self.ConfirmRepealWB_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmRepealWB_nsprefix_) else ''
            self.ConfirmRepealWB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ConfirmRepealWB', pretty_print=pretty_print)
        if self.RequestRepealACO is not None:
            namespaceprefix_ = self.RequestRepealACO_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRepealACO_nsprefix_) else ''
            self.RequestRepealACO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRepealACO', pretty_print=pretty_print)
        if self.RequestRepealAWO is not None:
            namespaceprefix_ = self.RequestRepealAWO_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestRepealAWO_nsprefix_) else ''
            self.RequestRepealAWO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestRepealAWO', pretty_print=pretty_print)
        if self.QueryRests_Mini is not None:
            namespaceprefix_ = self.QueryRests_Mini_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRests_Mini_nsprefix_) else ''
            self.QueryRests_Mini.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRests_Mini', pretty_print=pretty_print)
        if self.QueryRestsShop_Mini is not None:
            namespaceprefix_ = self.QueryRestsShop_Mini_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRestsShop_Mini_nsprefix_) else ''
            self.QueryRestsShop_Mini.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRestsShop_Mini', pretty_print=pretty_print)
        if self.ReplyRests_Mini is not None:
            namespaceprefix_ = self.ReplyRests_Mini_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRests_Mini_nsprefix_) else ''
            self.ReplyRests_Mini.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRests_Mini', pretty_print=pretty_print)
        if self.ReplyRestsShop_Mini is not None:
            namespaceprefix_ = self.ReplyRestsShop_Mini_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRestsShop_Mini_nsprefix_) else ''
            self.ReplyRestsShop_Mini.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRestsShop_Mini', pretty_print=pretty_print)
        if self.RequestAddFProducer is not None:
            namespaceprefix_ = self.RequestAddFProducer_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestAddFProducer_nsprefix_) else ''
            self.RequestAddFProducer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestAddFProducer', pretty_print=pretty_print)
        if self.RequestAddProducts is not None:
            namespaceprefix_ = self.RequestAddProducts_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestAddProducts_nsprefix_) else ''
            self.RequestAddProducts.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RequestAddProducts', pretty_print=pretty_print)
        if self.QueryHistoryRestShop is not None:
            namespaceprefix_ = self.QueryHistoryRestShop_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryHistoryRestShop_nsprefix_) else ''
            self.QueryHistoryRestShop.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryHistoryRestShop', pretty_print=pretty_print)
        if self.QueryWriteOffCheque is not None:
            namespaceprefix_ = self.QueryWriteOffCheque_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryWriteOffCheque_nsprefix_) else ''
            self.QueryWriteOffCheque.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryWriteOffCheque', pretty_print=pretty_print)
        if self.ReplyHistoryShop is not None:
            namespaceprefix_ = self.ReplyHistoryShop_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyHistoryShop_nsprefix_) else ''
            self.ReplyHistoryShop.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyHistoryShop', pretty_print=pretty_print)
        if self.ReplyWriteOffCheque is not None:
            namespaceprefix_ = self.ReplyWriteOffCheque_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyWriteOffCheque_nsprefix_) else ''
            self.ReplyWriteOffCheque.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyWriteOffCheque', pretty_print=pretty_print)
        if self.AscpNav is not None:
            namespaceprefix_ = self.AscpNav_nsprefix_ + ':' if (UseCapturedNS_ and self.AscpNav_nsprefix_) else ''
            self.AscpNav.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AscpNav', pretty_print=pretty_print)
        if self.AsiiuSign is not None:
            namespaceprefix_ = self.AsiiuSign_nsprefix_ + ':' if (UseCapturedNS_ and self.AsiiuSign_nsprefix_) else ''
            self.AsiiuSign.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AsiiuSign', pretty_print=pretty_print)
        if self.AsiiuTimeSign is not None:
            namespaceprefix_ = self.AsiiuTimeSign_nsprefix_ + ':' if (UseCapturedNS_ and self.AsiiuTimeSign_nsprefix_) else ''
            self.AsiiuTimeSign.export(outfile, level, namespaceprefix_, namespacedef_='', name_='AsiiuTimeSign', pretty_print=pretty_print)
        if self.WayBill_v3 is not None:
            namespaceprefix_ = self.WayBill_v3_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBill_v3_nsprefix_) else ''
            self.WayBill_v3.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBill_v3', pretty_print=pretty_print)
        if self.ActWriteOff_v3 is not None:
            namespaceprefix_ = self.ActWriteOff_v3_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOff_v3_nsprefix_) else ''
            self.ActWriteOff_v3.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActWriteOff_v3', pretty_print=pretty_print)
        if self.WayBillAct_v3 is not None:
            namespaceprefix_ = self.WayBillAct_v3_nsprefix_ + ':' if (UseCapturedNS_ and self.WayBillAct_v3_nsprefix_) else ''
            self.WayBillAct_v3.export(outfile, level, namespaceprefix_, namespacedef_='', name_='WayBillAct_v3', pretty_print=pretty_print)
        if self.RepProducedProduct_v3 is not None:
            namespaceprefix_ = self.RepProducedProduct_v3_nsprefix_ + ':' if (UseCapturedNS_ and self.RepProducedProduct_v3_nsprefix_) else ''
            self.RepProducedProduct_v3.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepProducedProduct_v3', pretty_print=pretty_print)
        if self.RepImportedProduct_v3 is not None:
            namespaceprefix_ = self.RepImportedProduct_v3_nsprefix_ + ':' if (UseCapturedNS_ and self.RepImportedProduct_v3_nsprefix_) else ''
            self.RepImportedProduct_v3.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RepImportedProduct_v3', pretty_print=pretty_print)
        if self.QueryRestBCode is not None:
            namespaceprefix_ = self.QueryRestBCode_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryRestBCode_nsprefix_) else ''
            self.QueryRestBCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryRestBCode', pretty_print=pretty_print)
        if self.ReplyRestBCode is not None:
            namespaceprefix_ = self.ReplyRestBCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyRestBCode_nsprefix_) else ''
            self.ReplyRestBCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyRestBCode', pretty_print=pretty_print)
        if self.ActFixBarCode is not None:
            namespaceprefix_ = self.ActFixBarCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ActFixBarCode_nsprefix_) else ''
            self.ActFixBarCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActFixBarCode', pretty_print=pretty_print)
        if self.ActUnFixBarCode is not None:
            namespaceprefix_ = self.ActUnFixBarCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ActUnFixBarCode_nsprefix_) else ''
            self.ActUnFixBarCode.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ActUnFixBarCode', pretty_print=pretty_print)
        if self.QueryParentHistForm2 is not None:
            namespaceprefix_ = self.QueryParentHistForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryParentHistForm2_nsprefix_) else ''
            self.QueryParentHistForm2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='QueryParentHistForm2', pretty_print=pretty_print)
        if self.ReplyParentHistForm2 is not None:
            namespaceprefix_ = self.ReplyParentHistForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyParentHistForm2_nsprefix_) else ''
            self.ReplyParentHistForm2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ReplyParentHistForm2', pretty_print=pretty_print)
        if self.TTNHistoryF2Reg is not None:
            namespaceprefix_ = self.TTNHistoryF2Reg_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNHistoryF2Reg_nsprefix_) else ''
            self.TTNHistoryF2Reg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TTNHistoryF2Reg', pretty_print=pretty_print)
        if self.CarrierNotice is not None:
            namespaceprefix_ = self.CarrierNotice_nsprefix_ + ':' if (UseCapturedNS_ and self.CarrierNotice_nsprefix_) else ''
            self.CarrierNotice.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CarrierNotice', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WayBill':
            obj_ = WayBillType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBill = obj_
            obj_.original_tagname_ = 'WayBill'
        elif nodeName_ == 'Ticket':
            obj_ = TicketType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Ticket = obj_
            obj_.original_tagname_ = 'Ticket'
        elif nodeName_ == 'WayBillAct':
            obj_ = WayBillActType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBillAct = obj_
            obj_.original_tagname_ = 'WayBillAct'
        elif nodeName_ == 'ConfirmTicket':
            obj_ = ConfirmTicketType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfirmTicket = obj_
            obj_.original_tagname_ = 'ConfirmTicket'
        elif nodeName_ == 'TTNInformBReg':
            obj_ = WayBillInformBRegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TTNInformBReg = obj_
            obj_.original_tagname_ = 'TTNInformBReg'
        elif nodeName_ == 'ActInventory':
            obj_ = ActInventoryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActInventory = obj_
            obj_.original_tagname_ = 'ActInventory'
        elif nodeName_ == 'ActChargeOn':
            obj_ = ActChargeOnType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActChargeOn = obj_
            obj_.original_tagname_ = 'ActChargeOn'
        elif nodeName_ == 'ActInventoryInformBReg':
            obj_ = ActInventoryInformBReg.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActInventoryInformBReg = obj_
            obj_.original_tagname_ = 'ActInventoryInformBReg'
        elif nodeName_ == 'QueryAP':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryAP = obj_
            obj_.original_tagname_ = 'QueryAP'
        elif nodeName_ == 'QuerySSP':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QuerySSP = obj_
            obj_.original_tagname_ = 'QuerySSP'
        elif nodeName_ == 'QuerySP':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QuerySP = obj_
            obj_.original_tagname_ = 'QuerySP'
        elif nodeName_ == 'QueryClients':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryClients = obj_
            obj_.original_tagname_ = 'QueryClients'
        elif nodeName_ == 'QueryClientVersion':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryClientVersion = obj_
            obj_.original_tagname_ = 'QueryClientVersion'
        elif nodeName_ == 'QueryRests':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRests = obj_
            obj_.original_tagname_ = 'QueryRests'
        elif nodeName_ == 'QueryFormBHistory':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryFormBHistory = obj_
            obj_.original_tagname_ = 'QueryFormBHistory'
        elif nodeName_ == 'QueryResendDoc':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryResendDoc = obj_
            obj_.original_tagname_ = 'QueryResendDoc'
        elif nodeName_ == 'QueryFormA':
            obj_ = QueryFormAB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryFormA = obj_
            obj_.original_tagname_ = 'QueryFormA'
        elif nodeName_ == 'QueryFormB':
            obj_ = QueryFormAB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryFormB = obj_
            obj_.original_tagname_ = 'QueryFormB'
        elif nodeName_ == 'ActWriteOff':
            obj_ = ActWriteOffType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActWriteOff = obj_
            obj_.original_tagname_ = 'ActWriteOff'
        elif nodeName_ == 'RepProducedProduct':
            obj_ = RepProducedType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepProducedProduct = obj_
            obj_.original_tagname_ = 'RepProducedProduct'
        elif nodeName_ == 'RepImportedProduct':
            obj_ = RepImportedType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepImportedProduct = obj_
            obj_.original_tagname_ = 'RepImportedProduct'
        elif nodeName_ == 'ReplySSP':
            obj_ = ReplySSP.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplySSP = obj_
            obj_.original_tagname_ = 'ReplySSP'
        elif nodeName_ == 'ReplySpirit':
            obj_ = ReplySpirit.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplySpirit = obj_
            obj_.original_tagname_ = 'ReplySpirit'
        elif nodeName_ == 'ReplyClient':
            obj_ = ReplyClient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyClient = obj_
            obj_.original_tagname_ = 'ReplyClient'
        elif nodeName_ == 'ReplyAP':
            obj_ = ReplyAP.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyAP = obj_
            obj_.original_tagname_ = 'ReplyAP'
        elif nodeName_ == 'ReplyRests':
            obj_ = ReplyRests.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRests = obj_
            obj_.original_tagname_ = 'ReplyRests'
        elif nodeName_ == 'ReplyFormA':
            obj_ = ReplyFormA.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyFormA = obj_
            obj_.original_tagname_ = 'ReplyFormA'
        elif nodeName_ == 'ReplyFormB':
            obj_ = ReplyFormB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyFormB = obj_
            obj_.original_tagname_ = 'ReplyFormB'
        elif nodeName_ == 'ReplyHistFormB':
            obj_ = ReplyHistFormB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyHistFormB = obj_
            obj_.original_tagname_ = 'ReplyHistFormB'
        elif nodeName_ == 'ReplyClientVersion':
            obj_ = ReplyClientVersion.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyClientVersion = obj_
            obj_.original_tagname_ = 'ReplyClientVersion'
        elif nodeName_ == 'QueryRejectRepProduced':
            obj_ = QueryRejectRepProduced.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRejectRepProduced = obj_
            obj_.original_tagname_ = 'QueryRejectRepProduced'
        elif nodeName_ == 'QueryRejectRepImported':
            obj_ = QueryRejectRepImported.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRejectRepImported = obj_
            obj_.original_tagname_ = 'QueryRejectRepImported'
        elif nodeName_ == 'ReplySSP_v2':
            obj_ = ReplySSP_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplySSP_v2 = obj_
            obj_.original_tagname_ = 'ReplySSP_v2'
        elif nodeName_ == 'ReplySpirit_v2':
            obj_ = ReplySpirit_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplySpirit_v2 = obj_
            obj_.original_tagname_ = 'ReplySpirit_v2'
        elif nodeName_ == 'ReplyClient_v2':
            obj_ = ReplyClient_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyClient_v2 = obj_
            obj_.original_tagname_ = 'ReplyClient_v2'
        elif nodeName_ == 'ReplyAP_v2':
            obj_ = ReplyAP_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyAP_v2 = obj_
            obj_.original_tagname_ = 'ReplyAP_v2'
        elif nodeName_ == 'ReplyRests_v2':
            obj_ = ReplyRests_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRests_v2 = obj_
            obj_.original_tagname_ = 'ReplyRests_v2'
        elif nodeName_ == 'ReplyForm1':
            obj_ = ReplyForm1.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyForm1 = obj_
            obj_.original_tagname_ = 'ReplyForm1'
        elif nodeName_ == 'ReplyForm2':
            obj_ = ReplyForm2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyForm2 = obj_
            obj_.original_tagname_ = 'ReplyForm2'
        elif nodeName_ == 'ReplyHistForm2':
            obj_ = ReplyHistForm2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyHistForm2 = obj_
            obj_.original_tagname_ = 'ReplyHistForm2'
        elif nodeName_ == 'WayBill_v2':
            obj_ = WayBillType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBill_v2 = obj_
            obj_.original_tagname_ = 'WayBill_v2'
        elif nodeName_ == 'WayBillAct_v2':
            obj_ = WayBillActType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBillAct_v2 = obj_
            obj_.original_tagname_ = 'WayBillAct_v2'
        elif nodeName_ == 'ActChargeOn_v2':
            obj_ = ActChargeOnType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActChargeOn_v2 = obj_
            obj_.original_tagname_ = 'ActChargeOn_v2'
        elif nodeName_ == 'ActInventoryInformF2Reg':
            obj_ = ActInventoryInformF2Reg.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActInventoryInformF2Reg = obj_
            obj_.original_tagname_ = 'ActInventoryInformF2Reg'
        elif nodeName_ == 'TTNInformF2Reg':
            obj_ = WayBillInformF2RegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TTNInformF2Reg = obj_
            obj_.original_tagname_ = 'TTNInformF2Reg'
        elif nodeName_ == 'QueryAP_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryAP_v2 = obj_
            obj_.original_tagname_ = 'QueryAP_v2'
        elif nodeName_ == 'QuerySSP_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QuerySSP_v2 = obj_
            obj_.original_tagname_ = 'QuerySSP_v2'
        elif nodeName_ == 'QuerySP_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QuerySP_v2 = obj_
            obj_.original_tagname_ = 'QuerySP_v2'
        elif nodeName_ == 'QueryClients_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryClients_v2 = obj_
            obj_.original_tagname_ = 'QueryClients_v2'
        elif nodeName_ == 'QueryRests_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRests_v2 = obj_
            obj_.original_tagname_ = 'QueryRests_v2'
        elif nodeName_ == 'QueryFormF1':
            obj_ = QueryFormF1F2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryFormF1 = obj_
            obj_.original_tagname_ = 'QueryFormF1'
        elif nodeName_ == 'QueryFormF2':
            obj_ = QueryFormF1F2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryFormF2 = obj_
            obj_.original_tagname_ = 'QueryFormF2'
        elif nodeName_ == 'ActWriteOff_v2':
            obj_ = ActWriteOffType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActWriteOff_v2 = obj_
            obj_.original_tagname_ = 'ActWriteOff_v2'
        elif nodeName_ == 'TransferFromShop':
            obj_ = TransferFromShopType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransferFromShop = obj_
            obj_.original_tagname_ = 'TransferFromShop'
        elif nodeName_ == 'TransferToShop':
            obj_ = TransferToShopType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TransferToShop = obj_
            obj_.original_tagname_ = 'TransferToShop'
        elif nodeName_ == 'QueryForm2History':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryForm2History = obj_
            obj_.original_tagname_ = 'QueryForm2History'
        elif nodeName_ == 'RepInformF1Reg':
            obj_ = RepPIInformF1RegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepInformF1Reg = obj_
            obj_.original_tagname_ = 'RepInformF1Reg'
        elif nodeName_ == 'ReplyNoAnswerTTN':
            obj_ = NoAnswerTTN.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyNoAnswerTTN = obj_
            obj_.original_tagname_ = 'ReplyNoAnswerTTN'
        elif nodeName_ == 'QueryNATTN':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryNATTN = obj_
            obj_.original_tagname_ = 'QueryNATTN'
        elif nodeName_ == 'QueryRestsShop_v2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRestsShop_v2 = obj_
            obj_.original_tagname_ = 'QueryRestsShop_v2'
        elif nodeName_ == 'ReplyRestsShop_v2':
            obj_ = ReplyRestsShop_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRestsShop_v2 = obj_
            obj_.original_tagname_ = 'ReplyRestsShop_v2'
        elif nodeName_ == 'Asiiu':
            obj_ = Asiiu.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Asiiu = obj_
            obj_.original_tagname_ = 'Asiiu'
        elif nodeName_ == 'AsiiuTime':
            obj_ = AsiiuTime.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AsiiuTime = obj_
            obj_.original_tagname_ = 'AsiiuTime'
        elif nodeName_ == 'ActChargeOnShop_v2':
            obj_ = ActChargeOnShopType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActChargeOnShop_v2 = obj_
            obj_.original_tagname_ = 'ActChargeOnShop_v2'
        elif nodeName_ == 'ActWriteOffShop_v2':
            obj_ = ActWriteOffShopType_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActWriteOffShop_v2 = obj_
            obj_.original_tagname_ = 'ActWriteOffShop_v2'
        elif nodeName_ == 'InfoVersionTTN':
            obj_ = InfoVersionTTN.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InfoVersionTTN = obj_
            obj_.original_tagname_ = 'InfoVersionTTN'
        elif nodeName_ == 'QueryBarcode':
            obj_ = QueryBarcode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryBarcode = obj_
            obj_.original_tagname_ = 'QueryBarcode'
        elif nodeName_ == 'ReplyBarcode':
            obj_ = ReplyBarcode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyBarcode = obj_
            obj_.original_tagname_ = 'ReplyBarcode'
        elif nodeName_ == 'RequestRepealWB':
            obj_ = RequestRepealWB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRepealWB = obj_
            obj_.original_tagname_ = 'RequestRepealWB'
        elif nodeName_ == 'ConfirmRepealWB':
            obj_ = ConfirmRepealWB.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ConfirmRepealWB = obj_
            obj_.original_tagname_ = 'ConfirmRepealWB'
        elif nodeName_ == 'RequestRepealACO':
            obj_ = RequestRepealACO.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRepealACO = obj_
            obj_.original_tagname_ = 'RequestRepealACO'
        elif nodeName_ == 'RequestRepealAWO':
            obj_ = RequestRepealAWO.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestRepealAWO = obj_
            obj_.original_tagname_ = 'RequestRepealAWO'
        elif nodeName_ == 'QueryRests_Mini':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRests_Mini = obj_
            obj_.original_tagname_ = 'QueryRests_Mini'
        elif nodeName_ == 'QueryRestsShop_Mini':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRestsShop_Mini = obj_
            obj_.original_tagname_ = 'QueryRestsShop_Mini'
        elif nodeName_ == 'ReplyRests_Mini':
            obj_ = ReplyRests_Mini.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRests_Mini = obj_
            obj_.original_tagname_ = 'ReplyRests_Mini'
        elif nodeName_ == 'ReplyRestsShop_Mini':
            obj_ = ReplyRestsShop_Mini.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRestsShop_Mini = obj_
            obj_.original_tagname_ = 'ReplyRestsShop_Mini'
        elif nodeName_ == 'RequestAddFProducer':
            obj_ = RequestAddFProducer.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestAddFProducer = obj_
            obj_.original_tagname_ = 'RequestAddFProducer'
        elif nodeName_ == 'RequestAddProducts':
            obj_ = RequestAddProducts.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RequestAddProducts = obj_
            obj_.original_tagname_ = 'RequestAddProducts'
        elif nodeName_ == 'QueryHistoryRestShop':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryHistoryRestShop = obj_
            obj_.original_tagname_ = 'QueryHistoryRestShop'
        elif nodeName_ == 'QueryWriteOffCheque':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryWriteOffCheque = obj_
            obj_.original_tagname_ = 'QueryWriteOffCheque'
        elif nodeName_ == 'ReplyHistoryShop':
            obj_ = ReplyHistoryTransferShop.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyHistoryShop = obj_
            obj_.original_tagname_ = 'ReplyHistoryShop'
        elif nodeName_ == 'ReplyWriteOffCheque':
            obj_ = ReplyWOCheque.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyWriteOffCheque = obj_
            obj_.original_tagname_ = 'ReplyWriteOffCheque'
        elif nodeName_ == 'AscpNav':
            obj_ = AscpNav.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AscpNav = obj_
            obj_.original_tagname_ = 'AscpNav'
        elif nodeName_ == 'AsiiuSign':
            obj_ = Asiiu.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AsiiuSign = obj_
            obj_.original_tagname_ = 'AsiiuSign'
        elif nodeName_ == 'AsiiuTimeSign':
            obj_ = AsiiuTime.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.AsiiuTimeSign = obj_
            obj_.original_tagname_ = 'AsiiuTimeSign'
        elif nodeName_ == 'WayBill_v3':
            obj_ = WayBillType_v3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBill_v3 = obj_
            obj_.original_tagname_ = 'WayBill_v3'
        elif nodeName_ == 'ActWriteOff_v3':
            obj_ = ActWriteOffType_v3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActWriteOff_v3 = obj_
            obj_.original_tagname_ = 'ActWriteOff_v3'
        elif nodeName_ == 'WayBillAct_v3':
            obj_ = WayBillActType_v3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.WayBillAct_v3 = obj_
            obj_.original_tagname_ = 'WayBillAct_v3'
        elif nodeName_ == 'RepProducedProduct_v3':
            obj_ = RepProducedType_v3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepProducedProduct_v3 = obj_
            obj_.original_tagname_ = 'RepProducedProduct_v3'
        elif nodeName_ == 'RepImportedProduct_v3':
            obj_ = RepImportedType_v3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.RepImportedProduct_v3 = obj_
            obj_.original_tagname_ = 'RepImportedProduct_v3'
        elif nodeName_ == 'QueryRestBCode':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryRestBCode = obj_
            obj_.original_tagname_ = 'QueryRestBCode'
        elif nodeName_ == 'ReplyRestBCode':
            obj_ = ReplyRestBCode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyRestBCode = obj_
            obj_.original_tagname_ = 'ReplyRestBCode'
        elif nodeName_ == 'ActFixBarCode':
            obj_ = ActFixBarCode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActFixBarCode = obj_
            obj_.original_tagname_ = 'ActFixBarCode'
        elif nodeName_ == 'ActUnFixBarCode':
            obj_ = ActUnFixBarCode.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ActUnFixBarCode = obj_
            obj_.original_tagname_ = 'ActUnFixBarCode'
        elif nodeName_ == 'QueryParentHistForm2':
            obj_ = QueryParameters.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.QueryParentHistForm2 = obj_
            obj_.original_tagname_ = 'QueryParentHistForm2'
        elif nodeName_ == 'ReplyParentHistForm2':
            obj_ = ReplyParentHistForm2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ReplyParentHistForm2 = obj_
            obj_.original_tagname_ = 'ReplyParentHistForm2'
        elif nodeName_ == 'TTNHistoryF2Reg':
            obj_ = TTNHistoryF2Reg.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TTNHistoryF2Reg = obj_
            obj_.original_tagname_ = 'TTNHistoryF2Reg'
        elif nodeName_ == 'CarrierNotice':
            obj_ = CarrierNotice.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.CarrierNotice = obj_
            obj_.original_tagname_ = 'CarrierNotice'
# end class DocBody


class SenderInfo(GeneratedsSuper):
    """Информация об отправителе"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FSRAR_ID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FSRAR_ID = FSRAR_ID
        self.validate_FSRARIDType(self.FSRAR_ID)
        self.FSRAR_ID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SenderInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SenderInfo.subclass:
            return SenderInfo.subclass(*args_, **kwargs_)
        else:
            return SenderInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FSRAR_ID(self):
        return self.FSRAR_ID
    def set_FSRAR_ID(self, FSRAR_ID):
        self.FSRAR_ID = FSRAR_ID
    def validate_FSRARIDType(self, value):
        result = True
        # Validate type FSRARIDType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.FSRAR_ID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='SenderInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SenderInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SenderInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SenderInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SenderInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SenderInfo'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='SenderInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FSRAR_ID is not None:
            namespaceprefix_ = self.FSRAR_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.FSRAR_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFSRAR_ID>%s</%sFSRAR_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FSRAR_ID), input_name='FSRAR_ID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FSRAR_ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FSRAR_ID')
            value_ = self.gds_validate_string(value_, node, 'FSRAR_ID')
            self.FSRAR_ID = value_
            self.FSRAR_ID_nsprefix_ = child_.prefix
            # validate type FSRARIDType
            self.validate_FSRARIDType(self.FSRAR_ID)
# end class SenderInfo


class MarkCodeInfoType(GeneratedsSuper):
    """Список считанных кодов марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkCode is None:
            self.MarkCode = []
        else:
            self.MarkCode = MarkCode
        self.MarkCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkCodeInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkCodeInfoType.subclass:
            return MarkCodeInfoType.subclass(*args_, **kwargs_)
        else:
            return MarkCodeInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkCode(self):
        return self.MarkCode
    def set_MarkCode(self, MarkCode):
        self.MarkCode = MarkCode
    def add_MarkCode(self, value):
        self.MarkCode.append(value)
    def insert_MarkCode_at(self, index, value):
        self.MarkCode.insert(index, value)
    def replace_MarkCode_at(self, index, value):
        self.MarkCode[index] = value
    def validate_PDF417String(self, value):
        result = True
        # Validate type PDF417String, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.MarkCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkCodeInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkCodeInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkCodeInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkCodeInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkCodeInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkCodeInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkCodeInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkCode_ in self.MarkCode:
            namespaceprefix_ = self.MarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCode>%s</%sMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MarkCode_), input_name='MarkCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkCode')
            value_ = self.gds_validate_string(value_, node, 'MarkCode')
            self.MarkCode.append(value_)
            self.MarkCode_nsprefix_ = child_.prefix
            # validate type PDF417String
            self.validate_PDF417String(self.MarkCode[-1])
# end class MarkCodeInfoType


class AMCforDocType(GeneratedsSuper):
    """Список считанных кодов марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, amc=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if amc is None:
            self.amc = []
        else:
            self.amc = amc
        self.amc_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AMCforDocType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AMCforDocType.subclass:
            return AMCforDocType.subclass(*args_, **kwargs_)
        else:
            return AMCforDocType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_amc(self):
        return self.amc
    def set_amc(self, amc):
        self.amc = amc
    def add_amc(self, value):
        self.amc.append(value)
    def insert_amc_at(self, index, value):
        self.amc.insert(index, value)
    def replace_amc_at(self, index, value):
        self.amc[index] = value
    def validate_PDF417String(self, value):
        result = True
        # Validate type PDF417String, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.amc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='AMCforDocType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AMCforDocType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AMCforDocType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AMCforDocType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AMCforDocType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='AMCforDocType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='AMCforDocType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for amc_ in self.amc:
            namespaceprefix_ = self.amc_nsprefix_ + ':' if (UseCapturedNS_ and self.amc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%samc>%s</%samc>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(amc_), input_name='amc')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'amc':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'amc')
            value_ = self.gds_validate_string(value_, node, 'amc')
            self.amc.append(value_)
            self.amc_nsprefix_ = child_.prefix
            # validate type PDF417String
            self.validate_PDF417String(self.amc[-1])
# end class AMCforDocType


class boxtype(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, bl=None, boxnum=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if bl is None:
            self.bl = []
        else:
            self.bl = bl
        self.bl_nsprefix_ = None
        if boxnum is None:
            self.boxnum = []
        else:
            self.boxnum = boxnum
        self.boxnum_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, boxtype)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if boxtype.subclass:
            return boxtype.subclass(*args_, **kwargs_)
        else:
            return boxtype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_bl(self):
        return self.bl
    def set_bl(self, bl):
        self.bl = bl
    def add_bl(self, value):
        self.bl.append(value)
    def insert_bl_at(self, index, value):
        self.bl.insert(index, value)
    def replace_bl_at(self, index, value):
        self.bl[index] = value
    def get_boxnum(self):
        return self.boxnum
    def set_boxnum(self, boxnum):
        self.boxnum = boxnum
    def add_boxnum(self, value):
        self.boxnum.append(value)
    def insert_boxnum_at(self, index, value):
        self.boxnum.insert(index, value)
    def replace_boxnum_at(self, index, value):
        self.boxnum[index] = value
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.bl or
            self.boxnum
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='boxtype', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('boxtype')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'boxtype':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='boxtype')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='boxtype', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='boxtype'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='boxtype', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for bl_ in self.bl:
            namespaceprefix_ = self.bl_nsprefix_ + ':' if (UseCapturedNS_ and self.bl_nsprefix_) else ''
            bl_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='bl', pretty_print=pretty_print)
        for boxnum_ in self.boxnum:
            namespaceprefix_ = self.boxnum_nsprefix_ + ':' if (UseCapturedNS_ and self.boxnum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sboxnum>%s</%sboxnum>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(boxnum_), input_name='boxnum')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'bl':
            obj_ = boxtype.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.bl.append(obj_)
            obj_.original_tagname_ = 'bl'
        elif nodeName_ == 'boxnum':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'boxnum')
            value_ = self.gds_validate_string(value_, node, 'boxnum')
            self.boxnum.append(value_)
            self.boxnum_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.boxnum[-1])
# end class boxtype


class bktype(GeneratedsSuper):
    """Список считанных кодов марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, bk=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if bk is None:
            self.bk = []
        else:
            self.bk = bk
        self.bk_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, bktype)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if bktype.subclass:
            return bktype.subclass(*args_, **kwargs_)
        else:
            return bktype(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_bk(self):
        return self.bk
    def set_bk(self, bk):
        self.bk = bk
    def add_bk(self, value):
        self.bk.append(value)
    def insert_bk_at(self, index, value):
        self.bk.insert(index, value)
    def replace_bk_at(self, index, value):
        self.bk[index] = value
    def validate_PDF417String(self, value):
        result = True
        # Validate type PDF417String, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.bk
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='bktype', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('bktype')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'bktype':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='bktype')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='bktype', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='bktype'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='bktype', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for bk_ in self.bk:
            namespaceprefix_ = self.bk_nsprefix_ + ':' if (UseCapturedNS_ and self.bk_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbk>%s</%sbk>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(bk_), input_name='bk')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'bk':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'bk')
            value_ = self.gds_validate_string(value_, node, 'bk')
            self.bk.append(value_)
            self.bk_nsprefix_ = child_.prefix
            # validate type PDF417String
            self.validate_PDF417String(self.bk[-1])
# end class bktype


class boxamcType(GeneratedsSuper):
    """информация об упаковке с марками"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, boxnumber=None, amclist=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.boxnumber = boxnumber
        self.validate_NoEmptyString(self.boxnumber)
        self.boxnumber_nsprefix_ = None
        self.amclist = amclist
        self.amclist_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, boxamcType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if boxamcType.subclass:
            return boxamcType.subclass(*args_, **kwargs_)
        else:
            return boxamcType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_boxnumber(self):
        return self.boxnumber
    def set_boxnumber(self, boxnumber):
        self.boxnumber = boxnumber
    def get_amclist(self):
        return self.amclist
    def set_amclist(self, amclist):
        self.amclist = amclist
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.boxnumber is not None or
            self.amclist is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='boxamcType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('boxamcType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'boxamcType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='boxamcType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='boxamcType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='boxamcType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='boxamcType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.boxnumber is not None:
            namespaceprefix_ = self.boxnumber_nsprefix_ + ':' if (UseCapturedNS_ and self.boxnumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sboxnumber>%s</%sboxnumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.boxnumber), input_name='boxnumber')), namespaceprefix_ , eol_))
        if self.amclist is not None:
            namespaceprefix_ = self.amclist_nsprefix_ + ':' if (UseCapturedNS_ and self.amclist_nsprefix_) else ''
            self.amclist.export(outfile, level, namespaceprefix_, namespacedef_='', name_='amclist', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'boxnumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'boxnumber')
            value_ = self.gds_validate_string(value_, node, 'boxnumber')
            self.boxnumber = value_
            self.boxnumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.boxnumber)
        elif nodeName_ == 'amclist':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.amclist = obj_
            obj_.original_tagname_ = 'amclist'
# end class boxamcType


class MarkInfoTypeBC(GeneratedsSuper):
    """Информация о марках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, boxpos=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if boxpos is None:
            self.boxpos = []
        else:
            self.boxpos = boxpos
        self.boxpos_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkInfoTypeBC)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkInfoTypeBC.subclass:
            return MarkInfoTypeBC.subclass(*args_, **kwargs_)
        else:
            return MarkInfoTypeBC(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_boxpos(self):
        return self.boxpos
    def set_boxpos(self, boxpos):
        self.boxpos = boxpos
    def add_boxpos(self, value):
        self.boxpos.append(value)
    def insert_boxpos_at(self, index, value):
        self.boxpos.insert(index, value)
    def replace_boxpos_at(self, index, value):
        self.boxpos[index] = value
    def hasContent_(self):
        if (
            self.boxpos
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarkInfoTypeBC', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkInfoTypeBC')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkInfoTypeBC':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkInfoTypeBC')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkInfoTypeBC', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkInfoTypeBC'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarkInfoTypeBC', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for boxpos_ in self.boxpos:
            namespaceprefix_ = self.boxpos_nsprefix_ + ':' if (UseCapturedNS_ and self.boxpos_nsprefix_) else ''
            boxpos_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='boxpos', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'boxpos':
            obj_ = boxamcType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.boxpos.append(obj_)
            obj_.original_tagname_ = 'boxpos'
# end class MarkInfoTypeBC


class InformF2TypeItemBC(GeneratedsSuper):
    """Запись в справке 2 к ТТН, Информация о предыдущих отгрузках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, F2RegId='FIRSTSHIPMENT', MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.F2RegId = F2RegId
        self.validate_NoEmptyString50(self.F2RegId)
        self.F2RegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2TypeItemBC)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2TypeItemBC.subclass:
            return InformF2TypeItemBC.subclass(*args_, **kwargs_)
        else:
            return InformF2TypeItemBC(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_F2RegId(self):
        return self.F2RegId
    def set_F2RegId(self, F2RegId):
        self.F2RegId = F2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.F2RegId != "FIRSTSHIPMENT" or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeItemBC', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2TypeItemBC')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2TypeItemBC':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2TypeItemBC')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2TypeItemBC', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF2TypeItemBC'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeItemBC', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.F2RegId is not None:
            namespaceprefix_ = self.F2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.F2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sF2RegId>%s</%sF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.F2RegId), input_name='F2RegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'F2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'F2RegId')
            value_ = self.gds_validate_string(value_, node, 'F2RegId')
            self.F2RegId = value_
            self.F2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.F2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoTypeBC.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformF2TypeItemBC


class OrganizationsType(GeneratedsSuper):
    """Организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Organization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Organization is None:
            self.Organization = []
        else:
            self.Organization = Organization
        self.Organization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationsType.subclass:
            return OrganizationsType.subclass(*args_, **kwargs_)
        else:
            return OrganizationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Organization(self):
        return self.Organization
    def set_Organization(self, Organization):
        self.Organization = Organization
    def add_Organization(self, value):
        self.Organization.append(value)
    def insert_Organization_at(self, index, value):
        self.Organization.insert(index, value)
    def replace_Organization_at(self, index, value):
        self.Organization[index] = value
    def hasContent_(self):
        if (
            self.Organization
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrganizationsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrganizationsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrganizationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Organization_ in self.Organization:
            namespaceprefix_ = self.Organization_nsprefix_ + ':' if (UseCapturedNS_ and self.Organization_nsprefix_) else ''
            Organization_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Organization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Organization':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Organization.append(obj_)
            obj_.original_tagname_ = 'Organization'
# end class OrganizationsType


class OrgInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ClientRegId=None, FullName=None, ShortName=None, INN=None, KPP=None, UNP=None, RNN=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INNType(self.INN)
        self.INN_nsprefix_ = None
        self.KPP = KPP
        self.validate_KPPType(self.KPP)
        self.KPP_nsprefix_ = None
        self.UNP = UNP
        self.UNP_nsprefix_ = None
        self.RNN = RNN
        self.RNN_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfo.subclass:
            return OrgInfo.subclass(*args_, **kwargs_)
        else:
            return OrgInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_KPP(self):
        return self.KPP
    def set_KPP(self, KPP):
        self.KPP = KPP
    def get_UNP(self):
        return self.UNP
    def set_UNP(self, UNP):
        self.UNP = UNP
    def get_RNN(self):
        return self.RNN
    def set_RNN(self, RNN):
        self.RNN = RNN
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType(self, value):
        result = True
        # Validate type FullNameType, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType(self, value):
        result = True
        # Validate type ShortNameType, a restriction on xs:string.
        pass
        return result
    def validate_INNType(self, value):
        result = True
        # Validate type INNType, a restriction on xs:string.
        pass
        return result
    def validate_KPPType(self, value):
        result = True
        # Validate type KPPType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.KPP is not None or
            self.UNP is not None or
            self.RNN is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfo'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.KPP is not None:
            namespaceprefix_ = self.KPP_nsprefix_ + ':' if (UseCapturedNS_ and self.KPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKPP>%s</%sKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KPP), input_name='KPP')), namespaceprefix_ , eol_))
        if self.UNP is not None:
            namespaceprefix_ = self.UNP_nsprefix_ + ':' if (UseCapturedNS_ and self.UNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNP>%s</%sUNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNP), input_name='UNP')), namespaceprefix_ , eol_))
        if self.RNN is not None:
            namespaceprefix_ = self.RNN_nsprefix_ + ':' if (UseCapturedNS_ and self.RNN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNN>%s</%sRNN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RNN), input_name='RNN')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType
            self.validate_FullNameType(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType
            self.validate_ShortNameType(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INNType
            self.validate_INNType(self.INN)
        elif nodeName_ == 'KPP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'KPP')
            value_ = self.gds_validate_string(value_, node, 'KPP')
            self.KPP = value_
            self.KPP_nsprefix_ = child_.prefix
            # validate type KPPType
            self.validate_KPPType(self.KPP)
        elif nodeName_ == 'UNP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UNP')
            value_ = self.gds_validate_string(value_, node, 'UNP')
            self.UNP = value_
            self.UNP_nsprefix_ = child_.prefix
        elif nodeName_ == 'RNN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RNN')
            value_ = self.gds_validate_string(value_, node, 'RNN')
            self.RNN = value_
            self.RNN_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = OrgAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class OrgInfo


class OrgInfoEx(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ClientRegId=None, FullName=None, ShortName=None, INN=None, KPP=None, UNP=None, RNN=None, address=None, addresslist=None, State=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType51(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType52(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INNType(self.INN)
        self.INN_nsprefix_ = None
        self.KPP = KPP
        self.validate_KPPType(self.KPP)
        self.KPP_nsprefix_ = None
        self.UNP = UNP
        self.UNP_nsprefix_ = None
        self.RNN = RNN
        self.RNN_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
        self.addresslist = addresslist
        self.addresslist_nsprefix_ = None
        self.State = State
        self.State_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoEx)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoEx.subclass:
            return OrgInfoEx.subclass(*args_, **kwargs_)
        else:
            return OrgInfoEx(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_KPP(self):
        return self.KPP
    def set_KPP(self, KPP):
        self.KPP = KPP
    def get_UNP(self):
        return self.UNP
    def set_UNP(self, UNP):
        self.UNP = UNP
    def get_RNN(self):
        return self.RNN
    def set_RNN(self, RNN):
        self.RNN = RNN
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def get_addresslist(self):
        return self.addresslist
    def set_addresslist(self, addresslist):
        self.addresslist = addresslist
    def get_State(self):
        return self.State
    def set_State(self, State):
        self.State = State
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType51(self, value):
        result = True
        # Validate type FullNameType51, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType52(self, value):
        result = True
        # Validate type ShortNameType52, a restriction on xs:string.
        pass
        return result
    def validate_INNType(self, value):
        result = True
        # Validate type INNType, a restriction on xs:string.
        pass
        return result
    def validate_KPPType(self, value):
        result = True
        # Validate type KPPType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.KPP is not None or
            self.UNP is not None or
            self.RNN is not None or
            self.address is not None or
            self.addresslist is not None or
            self.State is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfoEx', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoEx')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoEx':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoEx')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoEx', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoEx'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfoEx', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.KPP is not None:
            namespaceprefix_ = self.KPP_nsprefix_ + ':' if (UseCapturedNS_ and self.KPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKPP>%s</%sKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KPP), input_name='KPP')), namespaceprefix_ , eol_))
        if self.UNP is not None:
            namespaceprefix_ = self.UNP_nsprefix_ + ':' if (UseCapturedNS_ and self.UNP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNP>%s</%sUNP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UNP), input_name='UNP')), namespaceprefix_ , eol_))
        if self.RNN is not None:
            namespaceprefix_ = self.RNN_nsprefix_ + ':' if (UseCapturedNS_ and self.RNN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRNN>%s</%sRNN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RNN), input_name='RNN')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
        if self.addresslist is not None:
            namespaceprefix_ = self.addresslist_nsprefix_ + ':' if (UseCapturedNS_ and self.addresslist_nsprefix_) else ''
            self.addresslist.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addresslist', pretty_print=pretty_print)
        if self.State is not None:
            namespaceprefix_ = self.State_nsprefix_ + ':' if (UseCapturedNS_ and self.State_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType51
            self.validate_FullNameType51(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType52
            self.validate_ShortNameType52(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INNType
            self.validate_INNType(self.INN)
        elif nodeName_ == 'KPP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'KPP')
            value_ = self.gds_validate_string(value_, node, 'KPP')
            self.KPP = value_
            self.KPP_nsprefix_ = child_.prefix
            # validate type KPPType
            self.validate_KPPType(self.KPP)
        elif nodeName_ == 'UNP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UNP')
            value_ = self.gds_validate_string(value_, node, 'UNP')
            self.UNP = value_
            self.UNP_nsprefix_ = child_.prefix
        elif nodeName_ == 'RNN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RNN')
            value_ = self.gds_validate_string(value_, node, 'RNN')
            self.RNN = value_
            self.RNN_nsprefix_ = child_.prefix
        elif nodeName_ == 'address':
            obj_ = OrgAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
        elif nodeName_ == 'addresslist':
            obj_ = addresslistType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addresslist = obj_
            obj_.original_tagname_ = 'addresslist'
        elif nodeName_ == 'State':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'State')
            value_ = self.gds_validate_string(value_, node, 'State')
            self.State = value_
            self.State_nsprefix_ = child_.prefix
# end class OrgInfoEx


class OrgItemType(GeneratedsSuper):
    """Ссылка на организацию"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ID = ID
        self.validate_NoEmptyString50(self.ID)
        self.ID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgItemType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgItemType.subclass:
            return OrgItemType.subclass(*args_, **kwargs_)
        else:
            return OrgItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ID(self):
        return self.ID
    def set_ID(self, ID):
        self.ID = ID
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgItemType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgItemType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgItemType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgItemType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgItemType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgItemType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            namespaceprefix_ = self.ID_nsprefix_ + ':' if (UseCapturedNS_ and self.ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sID>%s</%sID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ID), input_name='ID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ID')
            value_ = self.gds_validate_string(value_, node, 'ID')
            self.ID = value_
            self.ID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ID)
# end class OrgItemType


class OrgAddressType(GeneratedsSuper):
    """Адрес организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Country=None, Index=None, RegionCode=None, area=None, city=None, place=None, street=None, house=None, building=None, liter=None, description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Country = Country
        self.validate_CountryType(self.Country)
        self.Country_nsprefix_ = None
        self.Index = Index
        self.validate_NoEmptyString50(self.Index)
        self.Index_nsprefix_ = None
        self.RegionCode = RegionCode
        self.validate_RegionCodeType(self.RegionCode)
        self.RegionCode_nsprefix_ = None
        self.area = area
        self.validate_NoEmptyString50(self.area)
        self.area_nsprefix_ = None
        self.city = city
        self.validate_NoEmptyString50(self.city)
        self.city_nsprefix_ = None
        self.place = place
        self.validate_NoEmptyString50(self.place)
        self.place_nsprefix_ = None
        self.street = street
        self.validate_NoEmptyString50(self.street)
        self.street_nsprefix_ = None
        self.house = house
        self.validate_NoEmptyString50(self.house)
        self.house_nsprefix_ = None
        self.building = building
        self.validate_NoEmptyString50(self.building)
        self.building_nsprefix_ = None
        self.liter = liter
        self.validate_NoEmptyString50(self.liter)
        self.liter_nsprefix_ = None
        self.description = description
        self.validate_descriptionType(self.description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgAddressType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgAddressType.subclass:
            return OrgAddressType.subclass(*args_, **kwargs_)
        else:
            return OrgAddressType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def get_RegionCode(self):
        return self.RegionCode
    def set_RegionCode(self, RegionCode):
        self.RegionCode = RegionCode
    def get_area(self):
        return self.area
    def set_area(self, area):
        self.area = area
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_place(self):
        return self.place
    def set_place(self, place):
        self.place = place
    def get_street(self):
        return self.street
    def set_street(self, street):
        self.street = street
    def get_house(self):
        return self.house
    def set_house(self, house):
        self.house = house
    def get_building(self):
        return self.building
    def set_building(self, building):
        self.building = building
    def get_liter(self):
        return self.liter
    def set_liter(self, liter):
        self.liter = liter
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def validate_CountryType(self, value):
        result = True
        # Validate type CountryType, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_RegionCodeType(self, value):
        result = True
        # Validate type RegionCodeType, a restriction on xs:string.
        pass
        return result
    def validate_descriptionType(self, value):
        result = True
        # Validate type descriptionType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Country is not None or
            self.Index is not None or
            self.RegionCode is not None or
            self.area is not None or
            self.city is not None or
            self.place is not None or
            self.street is not None or
            self.house is not None or
            self.building is not None or
            self.liter is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgAddressType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgAddressType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgAddressType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgAddressType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgAddressType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgAddressType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgAddressType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.Index is not None:
            namespaceprefix_ = self.Index_nsprefix_ + ':' if (UseCapturedNS_ and self.Index_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndex>%s</%sIndex>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Index), input_name='Index')), namespaceprefix_ , eol_))
        if self.RegionCode is not None:
            namespaceprefix_ = self.RegionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionCode>%s</%sRegionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionCode), input_name='RegionCode')), namespaceprefix_ , eol_))
        if self.area is not None:
            namespaceprefix_ = self.area_nsprefix_ + ':' if (UseCapturedNS_ and self.area_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sarea>%s</%sarea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.area), input_name='area')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.place is not None:
            namespaceprefix_ = self.place_nsprefix_ + ':' if (UseCapturedNS_ and self.place_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splace>%s</%splace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.place), input_name='place')), namespaceprefix_ , eol_))
        if self.street is not None:
            namespaceprefix_ = self.street_nsprefix_ + ':' if (UseCapturedNS_ and self.street_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstreet>%s</%sstreet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.street), input_name='street')), namespaceprefix_ , eol_))
        if self.house is not None:
            namespaceprefix_ = self.house_nsprefix_ + ':' if (UseCapturedNS_ and self.house_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shouse>%s</%shouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.house), input_name='house')), namespaceprefix_ , eol_))
        if self.building is not None:
            namespaceprefix_ = self.building_nsprefix_ + ':' if (UseCapturedNS_ and self.building_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbuilding>%s</%sbuilding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.building), input_name='building')), namespaceprefix_ , eol_))
        if self.liter is not None:
            namespaceprefix_ = self.liter_nsprefix_ + ':' if (UseCapturedNS_ and self.liter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sliter>%s</%sliter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.liter), input_name='liter')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType
            self.validate_CountryType(self.Country)
        elif nodeName_ == 'Index':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Index')
            value_ = self.gds_validate_string(value_, node, 'Index')
            self.Index = value_
            self.Index_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Index)
        elif nodeName_ == 'RegionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegionCode')
            value_ = self.gds_validate_string(value_, node, 'RegionCode')
            self.RegionCode = value_
            self.RegionCode_nsprefix_ = child_.prefix
            # validate type RegionCodeType
            self.validate_RegionCodeType(self.RegionCode)
        elif nodeName_ == 'area':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'area')
            value_ = self.gds_validate_string(value_, node, 'area')
            self.area = value_
            self.area_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.area)
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.city)
        elif nodeName_ == 'place':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'place')
            value_ = self.gds_validate_string(value_, node, 'place')
            self.place = value_
            self.place_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.place)
        elif nodeName_ == 'street':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'street')
            value_ = self.gds_validate_string(value_, node, 'street')
            self.street = value_
            self.street_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.street)
        elif nodeName_ == 'house':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'house')
            value_ = self.gds_validate_string(value_, node, 'house')
            self.house = value_
            self.house_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.house)
        elif nodeName_ == 'building':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'building')
            value_ = self.gds_validate_string(value_, node, 'building')
            self.building = value_
            self.building_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.building)
        elif nodeName_ == 'liter':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'liter')
            value_ = self.gds_validate_string(value_, node, 'liter')
            self.liter = value_
            self.liter_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.liter)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
            # validate type descriptionType
            self.validate_descriptionType(self.description)
# end class OrgAddressType


class OrgLicenseType(GeneratedsSuper):
    """Лицензия организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, number=None, datefrom=None, dateto=None, orgdistribute=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.number = number
        self.number_nsprefix_ = None
        if isinstance(datefrom, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datefrom, '%Y-%m-%d').date()
        else:
            initvalue_ = datefrom
        self.datefrom = initvalue_
        self.datefrom_nsprefix_ = None
        if isinstance(dateto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dateto, '%Y-%m-%d').date()
        else:
            initvalue_ = dateto
        self.dateto = initvalue_
        self.dateto_nsprefix_ = None
        self.orgdistribute = orgdistribute
        self.orgdistribute_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgLicenseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgLicenseType.subclass:
            return OrgLicenseType.subclass(*args_, **kwargs_)
        else:
            return OrgLicenseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_number(self):
        return self.number
    def set_number(self, number):
        self.number = number
    def get_datefrom(self):
        return self.datefrom
    def set_datefrom(self, datefrom):
        self.datefrom = datefrom
    def get_dateto(self):
        return self.dateto
    def set_dateto(self, dateto):
        self.dateto = dateto
    def get_orgdistribute(self):
        return self.orgdistribute
    def set_orgdistribute(self, orgdistribute):
        self.orgdistribute = orgdistribute
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.number is not None or
            self.datefrom is not None or
            self.dateto is not None or
            self.orgdistribute is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgLicenseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgLicenseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgLicenseType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgLicenseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgLicenseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgLicenseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgLicenseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.number is not None:
            namespaceprefix_ = self.number_nsprefix_ + ':' if (UseCapturedNS_ and self.number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.number), input_name='number')), namespaceprefix_ , eol_))
        if self.datefrom is not None:
            namespaceprefix_ = self.datefrom_nsprefix_ + ':' if (UseCapturedNS_ and self.datefrom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatefrom>%s</%sdatefrom>%s' % (namespaceprefix_ , self.gds_format_date(self.datefrom, input_name='datefrom'), namespaceprefix_ , eol_))
        if self.dateto is not None:
            namespaceprefix_ = self.dateto_nsprefix_ + ':' if (UseCapturedNS_ and self.dateto_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdateto>%s</%sdateto>%s' % (namespaceprefix_ , self.gds_format_date(self.dateto, input_name='dateto'), namespaceprefix_ , eol_))
        if self.orgdistribute is not None:
            namespaceprefix_ = self.orgdistribute_nsprefix_ + ':' if (UseCapturedNS_ and self.orgdistribute_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorgdistribute>%s</%sorgdistribute>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.orgdistribute), input_name='orgdistribute')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'number')
            value_ = self.gds_validate_string(value_, node, 'number')
            self.number = value_
            self.number_nsprefix_ = child_.prefix
        elif nodeName_ == 'datefrom':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.datefrom = dval_
            self.datefrom_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.datefrom)
        elif nodeName_ == 'dateto':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dateto = dval_
            self.dateto_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.dateto)
        elif nodeName_ == 'orgdistribute':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'orgdistribute')
            value_ = self.gds_validate_string(value_, node, 'orgdistribute')
            self.orgdistribute = value_
            self.orgdistribute_nsprefix_ = child_.prefix
# end class OrgLicenseType


class ProductContractType(GeneratedsSuper):
    """Сведения о контракте на поставку продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, number=None, date=None, Supplier=None, Contragent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.number = number
        self.validate_NoEmptyString50(self.number)
        self.number_nsprefix_ = None
        if isinstance(date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(date, '%Y-%m-%d').date()
        else:
            initvalue_ = date
        self.date = initvalue_
        self.date_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.Contragent = Contragent
        self.Contragent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductContractType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductContractType.subclass:
            return ProductContractType.subclass(*args_, **kwargs_)
        else:
            return ProductContractType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_number(self):
        return self.number
    def set_number(self, number):
        self.number = number
    def get_date(self):
        return self.date
    def set_date(self, date):
        self.date = date
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def get_Contragent(self):
        return self.Contragent
    def set_Contragent(self, Contragent):
        self.Contragent = Contragent
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.number is not None or
            self.date is not None or
            self.Supplier is not None or
            self.Contragent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductContractType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductContractType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductContractType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductContractType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductContractType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductContractType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductContractType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.number is not None:
            namespaceprefix_ = self.number_nsprefix_ + ':' if (UseCapturedNS_ and self.number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.number), input_name='number')), namespaceprefix_ , eol_))
        if self.date is not None:
            namespaceprefix_ = self.date_nsprefix_ + ':' if (UseCapturedNS_ and self.date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdate>%s</%sdate>%s' % (namespaceprefix_ , self.gds_format_date(self.date, input_name='date'), namespaceprefix_ , eol_))
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
        if self.Contragent is not None:
            namespaceprefix_ = self.Contragent_nsprefix_ + ':' if (UseCapturedNS_ and self.Contragent_nsprefix_) else ''
            self.Contragent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contragent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'number')
            value_ = self.gds_validate_string(value_, node, 'number')
            self.number = value_
            self.number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.number)
        elif nodeName_ == 'date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.date = dval_
            self.date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.date)
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
        elif nodeName_ == 'Contragent':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contragent = obj_
            obj_.original_tagname_ = 'Contragent'
# end class ProductContractType


class ProductsType(GeneratedsSuper):
    """Продукция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType.subclass:
            return ProductsType.subclass(*args_, **kwargs_)
        else:
            return ProductsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType


class ProductInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, Producer=None, Importer=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType53(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType54(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Importer = Importer
        self.Importer_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfo.subclass:
            return ProductInfo.subclass(*args_, **kwargs_)
        else:
            return ProductInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Importer(self):
        return self.Importer
    def set_Importer(self, Importer):
        self.Importer = Importer
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_ProductType(self, value):
        result = True
        # Validate type ProductType, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType53(self, value):
        result = True
        # Validate type FullNameType53, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType54(self, value):
        result = True
        # Validate type ShortNameType54, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType(self, value):
        result = True
        # Validate type AlcCodeType, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType(self, value):
        result = True
        # Validate type AlcVolumeType, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType(self, value):
        result = True
        # Validate type ProductVCodeType, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.Producer is not None or
            self.Importer is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfo'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Importer is not None:
            namespaceprefix_ = self.Importer_nsprefix_ + ':' if (UseCapturedNS_ and self.Importer_nsprefix_) else ''
            self.Importer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Importer', pretty_print=pretty_print)
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType
            self.validate_ProductType(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType53
            self.validate_FullNameType53(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType54
            self.validate_ShortNameType54(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType
            self.validate_AlcCodeType(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType
            self.validate_AlcVolumeType(self.AlcVolume)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Importer':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Importer = obj_
            obj_.original_tagname_ = 'Importer'
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType
            self.validate_ProductVCodeType(self.ProductVCode)
# end class ProductInfo


class InformAType(GeneratedsSuper):
    """Справка А к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegId = RegId
        self.validate_NoEmptyString50(self.RegId)
        self.RegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformAType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformAType.subclass:
            return InformAType.subclass(*args_, **kwargs_)
        else:
            return InformAType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegId(self):
        return self.RegId
    def set_RegId(self, RegId):
        self.RegId = RegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.RegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformAType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformAType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformAType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformAType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformAType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformAType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformAType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegId is not None:
            namespaceprefix_ = self.RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegId>%s</%sRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegId), input_name='RegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegId')
            value_ = self.gds_validate_string(value_, node, 'RegId')
            self.RegId = value_
            self.RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegId)
# end class InformAType


class InformBType(GeneratedsSuper):
    """Справка Б к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformBItem=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformBItem = InformBItem
        self.InformBItem_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBType.subclass:
            return InformBType.subclass(*args_, **kwargs_)
        else:
            return InformBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformBItem(self):
        return self.InformBItem
    def set_InformBItem(self, InformBItem):
        self.InformBItem = InformBItem
    def hasContent_(self):
        if (
            self.InformBItem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformBItem is not None:
            namespaceprefix_ = self.InformBItem_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBItem_nsprefix_) else ''
            self.InformBItem.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformBItem', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformBItem':
            obj_ = InformBTypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformBItem = obj_
            obj_.original_tagname_ = 'InformBItem'
# end class InformBType


class InformBTypeItem(GeneratedsSuper):
    """Запись в справке Б к ТТН, Информация о предыдущих отгрузках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, BRegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.BRegId = BRegId
        self.validate_NoEmptyString50(self.BRegId)
        self.BRegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBTypeItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBTypeItem.subclass:
            return InformBTypeItem.subclass(*args_, **kwargs_)
        else:
            return InformBTypeItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_BRegId(self):
        return self.BRegId
    def set_BRegId(self, BRegId):
        self.BRegId = BRegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.BRegId is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBTypeItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBTypeItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBTypeItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBTypeItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBTypeItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformBTypeItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBTypeItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BRegId is not None:
            namespaceprefix_ = self.BRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.BRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBRegId>%s</%sBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BRegId), input_name='BRegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'BRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BRegId')
            value_ = self.gds_validate_string(value_, node, 'BRegId')
            self.BRegId = value_
            self.BRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.BRegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformBTypeItem


class MarkInfoType(GeneratedsSuper):
    """Информация о марках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Ranges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_NoEmptyString50(self.Type)
        self.Type_nsprefix_ = None
        self.Ranges = Ranges
        self.Ranges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkInfoType.subclass:
            return MarkInfoType.subclass(*args_, **kwargs_)
        else:
            return MarkInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Ranges(self):
        return self.Ranges
    def set_Ranges(self, Ranges):
        self.Ranges = Ranges
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Ranges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Ranges is not None:
            namespaceprefix_ = self.Ranges_nsprefix_ + ':' if (UseCapturedNS_ and self.Ranges_nsprefix_) else ''
            self.Ranges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Ranges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Type)
        elif nodeName_ == 'Ranges':
            obj_ = RangesType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Ranges = obj_
            obj_.original_tagname_ = 'Ranges'
# end class MarkInfoType


class WayBillType(GeneratedsSuper):
    """Товарно-Транспортная Накладная"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillType.subclass:
            return WayBillType.subclass(*args_, **kwargs_)
        else:
            return WayBillType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillType


class PositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Pack_ID=None, Quantity=None, Price=None, Party=None, Identity=None, InformA=None, InformB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Pack_ID = Pack_ID
        self.validate_NoEmptyString50(self.Pack_ID)
        self.Pack_ID_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.Price = Price
        self.validate_NoNegativeDecimalType(self.Price)
        self.Price_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformA = InformA
        self.InformA_nsprefix_ = None
        self.InformB = InformB
        self.InformB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType.subclass:
            return PositionType.subclass(*args_, **kwargs_)
        else:
            return PositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Pack_ID(self):
        return self.Pack_ID
    def set_Pack_ID(self, Pack_ID):
        self.Pack_ID = Pack_ID
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformA(self):
        return self.InformA
    def set_InformA(self, InformA):
        self.InformA = InformA
    def get_InformB(self):
        return self.InformB
    def set_InformB(self, InformB):
        self.InformB = InformB
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Pack_ID is not None or
            self.Quantity is not None or
            self.Price is not None or
            self.Party is not None or
            self.Identity is not None or
            self.InformA is not None or
            self.InformB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Pack_ID is not None:
            namespaceprefix_ = self.Pack_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.Pack_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPack_ID>%s</%sPack_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Pack_ID), input_name='Pack_ID')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Price is not None:
            namespaceprefix_ = self.Price_nsprefix_ + ':' if (UseCapturedNS_ and self.Price_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformA is not None:
            namespaceprefix_ = self.InformA_nsprefix_ + ':' if (UseCapturedNS_ and self.InformA_nsprefix_) else ''
            self.InformA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformA', pretty_print=pretty_print)
        if self.InformB is not None:
            namespaceprefix_ = self.InformB_nsprefix_ + ':' if (UseCapturedNS_ and self.InformB_nsprefix_) else ''
            self.InformB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Pack_ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Pack_ID')
            value_ = self.gds_validate_string(value_, node, 'Pack_ID')
            self.Pack_ID = value_
            self.Pack_ID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Pack_ID)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Price')
            fval_ = self.gds_validate_decimal(fval_, node, 'Price')
            self.Price = fval_
            self.Price_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.Price)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformA':
            obj_ = InformAType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformA = obj_
            obj_.original_tagname_ = 'InformA'
        elif nodeName_ == 'InformB':
            obj_ = InformBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformB = obj_
            obj_.original_tagname_ = 'InformB'
# end class PositionType


class TransportType(GeneratedsSuper):
    """Транспортный раздел"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TRAN_TYPE=None, TRAN_COMPANY=None, TRAN_CAR=None, TRAN_TRAILER=None, TRAN_CUSTOMER=None, TRAN_DRIVER=None, TRAN_LOADPOINT=None, TRAN_UNLOADPOINT=None, TRAN_REDIRECT=None, TRAN_FORWARDER=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TRAN_TYPE = TRAN_TYPE
        self.validate_TRAN_TYPEType(self.TRAN_TYPE)
        self.TRAN_TYPE_nsprefix_ = None
        self.TRAN_COMPANY = TRAN_COMPANY
        self.validate_TRAN_COMPANYType(self.TRAN_COMPANY)
        self.TRAN_COMPANY_nsprefix_ = None
        self.TRAN_CAR = TRAN_CAR
        self.validate_TRAN_CARType(self.TRAN_CAR)
        self.TRAN_CAR_nsprefix_ = None
        self.TRAN_TRAILER = TRAN_TRAILER
        self.validate_TRAN_TRAILERType(self.TRAN_TRAILER)
        self.TRAN_TRAILER_nsprefix_ = None
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
        self.validate_TRAN_CUSTOMERType(self.TRAN_CUSTOMER)
        self.TRAN_CUSTOMER_nsprefix_ = None
        self.TRAN_DRIVER = TRAN_DRIVER
        self.validate_TRAN_DRIVERType(self.TRAN_DRIVER)
        self.TRAN_DRIVER_nsprefix_ = None
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
        self.validate_TRAN_LOADPOINTType(self.TRAN_LOADPOINT)
        self.TRAN_LOADPOINT_nsprefix_ = None
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
        self.validate_TRAN_UNLOADPOINTType(self.TRAN_UNLOADPOINT)
        self.TRAN_UNLOADPOINT_nsprefix_ = None
        self.TRAN_REDIRECT = TRAN_REDIRECT
        self.validate_TRAN_REDIRECTType(self.TRAN_REDIRECT)
        self.TRAN_REDIRECT_nsprefix_ = None
        self.TRAN_FORWARDER = TRAN_FORWARDER
        self.validate_TRAN_FORWARDERType(self.TRAN_FORWARDER)
        self.TRAN_FORWARDER_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportType.subclass:
            return TransportType.subclass(*args_, **kwargs_)
        else:
            return TransportType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TRAN_TYPE(self):
        return self.TRAN_TYPE
    def set_TRAN_TYPE(self, TRAN_TYPE):
        self.TRAN_TYPE = TRAN_TYPE
    def get_TRAN_COMPANY(self):
        return self.TRAN_COMPANY
    def set_TRAN_COMPANY(self, TRAN_COMPANY):
        self.TRAN_COMPANY = TRAN_COMPANY
    def get_TRAN_CAR(self):
        return self.TRAN_CAR
    def set_TRAN_CAR(self, TRAN_CAR):
        self.TRAN_CAR = TRAN_CAR
    def get_TRAN_TRAILER(self):
        return self.TRAN_TRAILER
    def set_TRAN_TRAILER(self, TRAN_TRAILER):
        self.TRAN_TRAILER = TRAN_TRAILER
    def get_TRAN_CUSTOMER(self):
        return self.TRAN_CUSTOMER
    def set_TRAN_CUSTOMER(self, TRAN_CUSTOMER):
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
    def get_TRAN_DRIVER(self):
        return self.TRAN_DRIVER
    def set_TRAN_DRIVER(self, TRAN_DRIVER):
        self.TRAN_DRIVER = TRAN_DRIVER
    def get_TRAN_LOADPOINT(self):
        return self.TRAN_LOADPOINT
    def set_TRAN_LOADPOINT(self, TRAN_LOADPOINT):
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
    def get_TRAN_UNLOADPOINT(self):
        return self.TRAN_UNLOADPOINT
    def set_TRAN_UNLOADPOINT(self, TRAN_UNLOADPOINT):
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
    def get_TRAN_REDIRECT(self):
        return self.TRAN_REDIRECT
    def set_TRAN_REDIRECT(self, TRAN_REDIRECT):
        self.TRAN_REDIRECT = TRAN_REDIRECT
    def get_TRAN_FORWARDER(self):
        return self.TRAN_FORWARDER
    def set_TRAN_FORWARDER(self, TRAN_FORWARDER):
        self.TRAN_FORWARDER = TRAN_FORWARDER
    def validate_TRAN_TYPEType(self, value):
        result = True
        # Validate type TRAN_TYPEType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_COMPANYType(self, value):
        result = True
        # Validate type TRAN_COMPANYType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CARType(self, value):
        result = True
        # Validate type TRAN_CARType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_TRAILERType(self, value):
        result = True
        # Validate type TRAN_TRAILERType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CUSTOMERType(self, value):
        result = True
        # Validate type TRAN_CUSTOMERType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_DRIVERType(self, value):
        result = True
        # Validate type TRAN_DRIVERType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_LOADPOINTType(self, value):
        result = True
        # Validate type TRAN_LOADPOINTType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_UNLOADPOINTType(self, value):
        result = True
        # Validate type TRAN_UNLOADPOINTType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_REDIRECTType(self, value):
        result = True
        # Validate type TRAN_REDIRECTType, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_FORWARDERType(self, value):
        result = True
        # Validate type TRAN_FORWARDERType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.TRAN_TYPE is not None or
            self.TRAN_COMPANY is not None or
            self.TRAN_CAR is not None or
            self.TRAN_TRAILER is not None or
            self.TRAN_CUSTOMER is not None or
            self.TRAN_DRIVER is not None or
            self.TRAN_LOADPOINT is not None or
            self.TRAN_UNLOADPOINT is not None or
            self.TRAN_REDIRECT is not None or
            self.TRAN_FORWARDER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransportType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TRAN_TYPE is not None:
            namespaceprefix_ = self.TRAN_TYPE_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TYPE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TYPE>%s</%sTRAN_TYPE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TYPE), input_name='TRAN_TYPE')), namespaceprefix_ , eol_))
        if self.TRAN_COMPANY is not None:
            namespaceprefix_ = self.TRAN_COMPANY_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_COMPANY_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_COMPANY>%s</%sTRAN_COMPANY>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_COMPANY), input_name='TRAN_COMPANY')), namespaceprefix_ , eol_))
        if self.TRAN_CAR is not None:
            namespaceprefix_ = self.TRAN_CAR_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CAR_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CAR>%s</%sTRAN_CAR>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CAR), input_name='TRAN_CAR')), namespaceprefix_ , eol_))
        if self.TRAN_TRAILER is not None:
            namespaceprefix_ = self.TRAN_TRAILER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TRAILER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TRAILER>%s</%sTRAN_TRAILER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TRAILER), input_name='TRAN_TRAILER')), namespaceprefix_ , eol_))
        if self.TRAN_CUSTOMER is not None:
            namespaceprefix_ = self.TRAN_CUSTOMER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CUSTOMER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CUSTOMER>%s</%sTRAN_CUSTOMER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CUSTOMER), input_name='TRAN_CUSTOMER')), namespaceprefix_ , eol_))
        if self.TRAN_DRIVER is not None:
            namespaceprefix_ = self.TRAN_DRIVER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_DRIVER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_DRIVER>%s</%sTRAN_DRIVER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_DRIVER), input_name='TRAN_DRIVER')), namespaceprefix_ , eol_))
        if self.TRAN_LOADPOINT is not None:
            namespaceprefix_ = self.TRAN_LOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_LOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_LOADPOINT>%s</%sTRAN_LOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_LOADPOINT), input_name='TRAN_LOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_UNLOADPOINT is not None:
            namespaceprefix_ = self.TRAN_UNLOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_UNLOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_UNLOADPOINT>%s</%sTRAN_UNLOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_UNLOADPOINT), input_name='TRAN_UNLOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_REDIRECT is not None:
            namespaceprefix_ = self.TRAN_REDIRECT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_REDIRECT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_REDIRECT>%s</%sTRAN_REDIRECT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_REDIRECT), input_name='TRAN_REDIRECT')), namespaceprefix_ , eol_))
        if self.TRAN_FORWARDER is not None:
            namespaceprefix_ = self.TRAN_FORWARDER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_FORWARDER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_FORWARDER>%s</%sTRAN_FORWARDER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_FORWARDER), input_name='TRAN_FORWARDER')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TRAN_TYPE':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TYPE')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TYPE')
            self.TRAN_TYPE = value_
            self.TRAN_TYPE_nsprefix_ = child_.prefix
            # validate type TRAN_TYPEType
            self.validate_TRAN_TYPEType(self.TRAN_TYPE)
        elif nodeName_ == 'TRAN_COMPANY':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_COMPANY')
            value_ = self.gds_validate_string(value_, node, 'TRAN_COMPANY')
            self.TRAN_COMPANY = value_
            self.TRAN_COMPANY_nsprefix_ = child_.prefix
            # validate type TRAN_COMPANYType
            self.validate_TRAN_COMPANYType(self.TRAN_COMPANY)
        elif nodeName_ == 'TRAN_CAR':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CAR')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CAR')
            self.TRAN_CAR = value_
            self.TRAN_CAR_nsprefix_ = child_.prefix
            # validate type TRAN_CARType
            self.validate_TRAN_CARType(self.TRAN_CAR)
        elif nodeName_ == 'TRAN_TRAILER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TRAILER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TRAILER')
            self.TRAN_TRAILER = value_
            self.TRAN_TRAILER_nsprefix_ = child_.prefix
            # validate type TRAN_TRAILERType
            self.validate_TRAN_TRAILERType(self.TRAN_TRAILER)
        elif nodeName_ == 'TRAN_CUSTOMER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CUSTOMER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CUSTOMER')
            self.TRAN_CUSTOMER = value_
            self.TRAN_CUSTOMER_nsprefix_ = child_.prefix
            # validate type TRAN_CUSTOMERType
            self.validate_TRAN_CUSTOMERType(self.TRAN_CUSTOMER)
        elif nodeName_ == 'TRAN_DRIVER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_DRIVER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_DRIVER')
            self.TRAN_DRIVER = value_
            self.TRAN_DRIVER_nsprefix_ = child_.prefix
            # validate type TRAN_DRIVERType
            self.validate_TRAN_DRIVERType(self.TRAN_DRIVER)
        elif nodeName_ == 'TRAN_LOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_LOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_LOADPOINT')
            self.TRAN_LOADPOINT = value_
            self.TRAN_LOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_LOADPOINTType
            self.validate_TRAN_LOADPOINTType(self.TRAN_LOADPOINT)
        elif nodeName_ == 'TRAN_UNLOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_UNLOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_UNLOADPOINT')
            self.TRAN_UNLOADPOINT = value_
            self.TRAN_UNLOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_UNLOADPOINTType
            self.validate_TRAN_UNLOADPOINTType(self.TRAN_UNLOADPOINT)
        elif nodeName_ == 'TRAN_REDIRECT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_REDIRECT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_REDIRECT')
            self.TRAN_REDIRECT = value_
            self.TRAN_REDIRECT_nsprefix_ = child_.prefix
            # validate type TRAN_REDIRECTType
            self.validate_TRAN_REDIRECTType(self.TRAN_REDIRECT)
        elif nodeName_ == 'TRAN_FORWARDER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_FORWARDER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_FORWARDER')
            self.TRAN_FORWARDER = value_
            self.TRAN_FORWARDER_nsprefix_ = child_.prefix
            # validate type TRAN_FORWARDERType
            self.validate_TRAN_FORWARDERType(self.TRAN_FORWARDER)
# end class TransportType


class TicketType(GeneratedsSuper):
    """Квитанция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TicketDate=None, Identity=None, DocId=None, TransportId=None, RegID=None, DocHash=None, DocType=None, Result=None, OperationResult=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(TicketDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TicketDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = TicketDate
        self.TicketDate = initvalue_
        self.TicketDate_nsprefix_ = None
        self.Identity = Identity
        self.Identity_nsprefix_ = None
        self.DocId = DocId
        self.DocId_nsprefix_ = None
        self.TransportId = TransportId
        self.TransportId_nsprefix_ = None
        self.RegID = RegID
        self.RegID_nsprefix_ = None
        self.DocHash = DocHash
        self.DocHash_nsprefix_ = None
        self.DocType = DocType
        self.DocType_nsprefix_ = None
        self.Result = Result
        self.Result_nsprefix_ = None
        self.OperationResult = OperationResult
        self.OperationResult_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TicketType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TicketType.subclass:
            return TicketType.subclass(*args_, **kwargs_)
        else:
            return TicketType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TicketDate(self):
        return self.TicketDate
    def set_TicketDate(self, TicketDate):
        self.TicketDate = TicketDate
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_TransportId(self):
        return self.TransportId
    def set_TransportId(self, TransportId):
        self.TransportId = TransportId
    def get_RegID(self):
        return self.RegID
    def set_RegID(self, RegID):
        self.RegID = RegID
    def get_DocHash(self):
        return self.DocHash
    def set_DocHash(self, DocHash):
        self.DocHash = DocHash
    def get_DocType(self):
        return self.DocType
    def set_DocType(self, DocType):
        self.DocType = DocType
    def get_Result(self):
        return self.Result
    def set_Result(self, Result):
        self.Result = Result
    def get_OperationResult(self):
        return self.OperationResult
    def set_OperationResult(self, OperationResult):
        self.OperationResult = OperationResult
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.TicketDate is not None or
            self.Identity is not None or
            self.DocId is not None or
            self.TransportId is not None or
            self.RegID is not None or
            self.DocHash is not None or
            self.DocType is not None or
            self.Result is not None or
            self.OperationResult is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TicketType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TicketType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TicketType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TicketType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TicketType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TicketType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TicketType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TicketDate is not None:
            namespaceprefix_ = self.TicketDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TicketDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTicketDate>%s</%sTicketDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.TicketDate, input_name='TicketDate'), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.TransportId is not None:
            namespaceprefix_ = self.TransportId_nsprefix_ + ':' if (UseCapturedNS_ and self.TransportId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransportId>%s</%sTransportId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransportId), input_name='TransportId')), namespaceprefix_ , eol_))
        if self.RegID is not None:
            namespaceprefix_ = self.RegID_nsprefix_ + ':' if (UseCapturedNS_ and self.RegID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegID>%s</%sRegID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegID), input_name='RegID')), namespaceprefix_ , eol_))
        if self.DocHash is not None:
            namespaceprefix_ = self.DocHash_nsprefix_ + ':' if (UseCapturedNS_ and self.DocHash_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocHash>%s</%sDocHash>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocHash), input_name='DocHash')), namespaceprefix_ , eol_))
        if self.DocType is not None:
            namespaceprefix_ = self.DocType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocType>%s</%sDocType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocType), input_name='DocType')), namespaceprefix_ , eol_))
        if self.Result is not None:
            namespaceprefix_ = self.Result_nsprefix_ + ':' if (UseCapturedNS_ and self.Result_nsprefix_) else ''
            self.Result.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Result', pretty_print=pretty_print)
        if self.OperationResult is not None:
            namespaceprefix_ = self.OperationResult_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationResult_nsprefix_) else ''
            self.OperationResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationResult', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TicketDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.TicketDate = dval_
            self.TicketDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.TicketDate)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
        elif nodeName_ == 'TransportId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransportId')
            value_ = self.gds_validate_string(value_, node, 'TransportId')
            self.TransportId = value_
            self.TransportId_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegID')
            value_ = self.gds_validate_string(value_, node, 'RegID')
            self.RegID = value_
            self.RegID_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocHash':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocHash')
            value_ = self.gds_validate_string(value_, node, 'DocHash')
            self.DocHash = value_
            self.DocHash_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocType')
            value_ = self.gds_validate_string(value_, node, 'DocType')
            self.DocType = value_
            self.DocType_nsprefix_ = child_.prefix
        elif nodeName_ == 'Result':
            obj_ = TicketResultType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Result = obj_
            obj_.original_tagname_ = 'Result'
        elif nodeName_ == 'OperationResult':
            obj_ = OperationResultType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationResult = obj_
            obj_.original_tagname_ = 'OperationResult'
# end class TicketType


class OperationResultType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OperationName=None, OperationResult=None, OperationComment=None, OperationDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.OperationName = OperationName
        self.OperationName_nsprefix_ = None
        self.OperationResult = OperationResult
        self.validate_ConclusionType(self.OperationResult)
        self.OperationResult_nsprefix_ = None
        self.OperationComment = OperationComment
        self.OperationComment_nsprefix_ = None
        if isinstance(OperationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OperationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OperationDate
        self.OperationDate = initvalue_
        self.OperationDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OperationResultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OperationResultType.subclass:
            return OperationResultType.subclass(*args_, **kwargs_)
        else:
            return OperationResultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OperationName(self):
        return self.OperationName
    def set_OperationName(self, OperationName):
        self.OperationName = OperationName
    def get_OperationResult(self):
        return self.OperationResult
    def set_OperationResult(self, OperationResult):
        self.OperationResult = OperationResult
    def get_OperationComment(self):
        return self.OperationComment
    def set_OperationComment(self, OperationComment):
        self.OperationComment = OperationComment
    def get_OperationDate(self):
        return self.OperationDate
    def set_OperationDate(self, OperationDate):
        self.OperationDate = OperationDate
    def validate_ConclusionType(self, value):
        result = True
        # Validate type ConclusionType, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.OperationName is not None or
            self.OperationResult is not None or
            self.OperationComment is not None or
            self.OperationDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OperationResultType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OperationResultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OperationResultType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OperationResultType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OperationResultType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OperationResultType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OperationResultType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OperationName is not None:
            namespaceprefix_ = self.OperationName_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperationName>%s</%sOperationName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperationName), input_name='OperationName')), namespaceprefix_ , eol_))
        if self.OperationResult is not None:
            namespaceprefix_ = self.OperationResult_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationResult_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperationResult>%s</%sOperationResult>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperationResult), input_name='OperationResult')), namespaceprefix_ , eol_))
        if self.OperationComment is not None:
            namespaceprefix_ = self.OperationComment_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationComment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperationComment>%s</%sOperationComment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OperationComment), input_name='OperationComment')), namespaceprefix_ , eol_))
        if self.OperationDate is not None:
            namespaceprefix_ = self.OperationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperationDate>%s</%sOperationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OperationDate, input_name='OperationDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OperationName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperationName')
            value_ = self.gds_validate_string(value_, node, 'OperationName')
            self.OperationName = value_
            self.OperationName_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperationResult':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperationResult')
            value_ = self.gds_validate_string(value_, node, 'OperationResult')
            self.OperationResult = value_
            self.OperationResult_nsprefix_ = child_.prefix
            # validate type ConclusionType
            self.validate_ConclusionType(self.OperationResult)
        elif nodeName_ == 'OperationComment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OperationComment')
            value_ = self.gds_validate_string(value_, node, 'OperationComment')
            self.OperationComment = value_
            self.OperationComment_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OperationDate = dval_
            self.OperationDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.OperationDate)
# end class OperationResultType


class TicketResultType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Conclusion=None, ConclusionDate=None, Comments=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Conclusion = Conclusion
        self.validate_ConclusionType(self.Conclusion)
        self.Conclusion_nsprefix_ = None
        if isinstance(ConclusionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ConclusionDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ConclusionDate
        self.ConclusionDate = initvalue_
        self.ConclusionDate_nsprefix_ = None
        self.Comments = Comments
        self.Comments_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TicketResultType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TicketResultType.subclass:
            return TicketResultType.subclass(*args_, **kwargs_)
        else:
            return TicketResultType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Conclusion(self):
        return self.Conclusion
    def set_Conclusion(self, Conclusion):
        self.Conclusion = Conclusion
    def get_ConclusionDate(self):
        return self.ConclusionDate
    def set_ConclusionDate(self, ConclusionDate):
        self.ConclusionDate = ConclusionDate
    def get_Comments(self):
        return self.Comments
    def set_Comments(self, Comments):
        self.Comments = Comments
    def validate_ConclusionType(self, value):
        result = True
        # Validate type ConclusionType, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.Conclusion is not None or
            self.ConclusionDate is not None or
            self.Comments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TicketResultType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TicketResultType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TicketResultType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TicketResultType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TicketResultType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TicketResultType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TicketResultType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Conclusion is not None:
            namespaceprefix_ = self.Conclusion_nsprefix_ + ':' if (UseCapturedNS_ and self.Conclusion_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConclusion>%s</%sConclusion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Conclusion), input_name='Conclusion')), namespaceprefix_ , eol_))
        if self.ConclusionDate is not None:
            namespaceprefix_ = self.ConclusionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ConclusionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConclusionDate>%s</%sConclusionDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ConclusionDate, input_name='ConclusionDate'), namespaceprefix_ , eol_))
        if self.Comments is not None:
            namespaceprefix_ = self.Comments_nsprefix_ + ':' if (UseCapturedNS_ and self.Comments_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComments>%s</%sComments>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comments), input_name='Comments')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Conclusion':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Conclusion')
            value_ = self.gds_validate_string(value_, node, 'Conclusion')
            self.Conclusion = value_
            self.Conclusion_nsprefix_ = child_.prefix
            # validate type ConclusionType
            self.validate_ConclusionType(self.Conclusion)
        elif nodeName_ == 'ConclusionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ConclusionDate = dval_
            self.ConclusionDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.ConclusionDate)
        elif nodeName_ == 'Comments':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comments')
            value_ = self.gds_validate_string(value_, node, 'Comments')
            self.Comments = value_
            self.Comments_nsprefix_ = child_.prefix
# end class TicketResultType


class WayBillActType(GeneratedsSuper):
    """Акт разногласий для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillActType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillActType.subclass:
            return WayBillActType.subclass(*args_, **kwargs_)
        else:
            return WayBillActType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillActType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillActType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillActType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillActType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillActType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType55.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType57.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillActType


class PositionType2(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformBRegId=None, RealQuantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformBRegId = InformBRegId
        self.validate_NoEmptyString50(self.InformBRegId)
        self.InformBRegId_nsprefix_ = None
        self.RealQuantity = RealQuantity
        self.validate_NoNegativeDecimalType(self.RealQuantity)
        self.RealQuantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType2.subclass:
            return PositionType2.subclass(*args_, **kwargs_)
        else:
            return PositionType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformBRegId(self):
        return self.InformBRegId
    def set_InformBRegId(self, InformBRegId):
        self.InformBRegId = InformBRegId
    def get_RealQuantity(self):
        return self.RealQuantity
    def set_RealQuantity(self, RealQuantity):
        self.RealQuantity = RealQuantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformBRegId is not None or
            self.RealQuantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformBRegId is not None:
            namespaceprefix_ = self.InformBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformBRegId>%s</%sInformBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformBRegId), input_name='InformBRegId')), namespaceprefix_ , eol_))
        if self.RealQuantity is not None:
            namespaceprefix_ = self.RealQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.RealQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealQuantity>%s</%sRealQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RealQuantity, input_name='RealQuantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformBRegId')
            value_ = self.gds_validate_string(value_, node, 'InformBRegId')
            self.InformBRegId = value_
            self.InformBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformBRegId)
        elif nodeName_ == 'RealQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RealQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'RealQuantity')
            self.RealQuantity = fval_
            self.RealQuantity_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.RealQuantity)
# end class PositionType2


class ConfirmTicketType(GeneratedsSuper):
    """Подтверждение акта разногласий для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfirmTicketType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfirmTicketType.subclass:
            return ConfirmTicketType.subclass(*args_, **kwargs_)
        else:
            return ConfirmTicketType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ConfirmTicketType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfirmTicketType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConfirmTicketType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConfirmTicketType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConfirmTicketType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ConfirmTicketType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ConfirmTicketType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType58.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
# end class ConfirmTicketType


class ActInventoryType(GeneratedsSuper):
    """Акт инвентаризации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActInventoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActInventoryType.subclass:
            return ActInventoryType.subclass(*args_, **kwargs_)
        else:
            return ActInventoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActInventoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActInventoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActInventoryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActInventoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActInventoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActInventoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActInventoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType60.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType62.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActInventoryType


class ActInventoryPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Product=None, Quantity=None, InformA=None, InformB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformA = InformA
        self.InformA_nsprefix_ = None
        self.InformB = InformB
        self.InformB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActInventoryPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActInventoryPositionType.subclass:
            return ActInventoryPositionType.subclass(*args_, **kwargs_)
        else:
            return ActInventoryPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformA(self):
        return self.InformA
    def set_InformA(self, InformA):
        self.InformA = InformA
    def get_InformB(self):
        return self.InformB
    def set_InformB(self, InformB):
        self.InformB = InformB
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.InformA is not None or
            self.InformB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='ActInventoryPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActInventoryPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActInventoryPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActInventoryPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActInventoryPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActInventoryPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='ActInventoryPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformA is not None:
            namespaceprefix_ = self.InformA_nsprefix_ + ':' if (UseCapturedNS_ and self.InformA_nsprefix_) else ''
            self.InformA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformA', pretty_print=pretty_print)
        if self.InformB is not None:
            namespaceprefix_ = self.InformB_nsprefix_ + ':' if (UseCapturedNS_ and self.InformB_nsprefix_) else ''
            self.InformB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformA':
            obj_ = InformARegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformA = obj_
            obj_.original_tagname_ = 'InformA'
        elif nodeName_ == 'InformB':
            obj_ = InformBType63.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformB = obj_
            obj_.original_tagname_ = 'InformB'
# end class ActInventoryPositionType


class InformBTypeRegItem(GeneratedsSuper):
    """Запись в справке Б к ТТН, Информация о отгрузке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, TTNNumber=None, TTNDate=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBTypeRegItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBTypeRegItem.subclass:
            return InformBTypeRegItem.subclass(*args_, **kwargs_)
        else:
            return InformBTypeRegItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBTypeRegItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBTypeRegItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBTypeRegItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBTypeRegItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBTypeRegItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformBTypeRegItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBTypeRegItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
# end class InformBTypeRegItem


class InformARegType(GeneratedsSuper):
    """Справка А к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, BottlingDate=None, TTNNumber=None, TTNDate=None, EGAISFixNumber=None, EGAISFixDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        if isinstance(BottlingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BottlingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BottlingDate
        self.BottlingDate = initvalue_
        self.BottlingDate_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.EGAISFixNumber = EGAISFixNumber
        self.validate_NoEmptyString50(self.EGAISFixNumber)
        self.EGAISFixNumber_nsprefix_ = None
        if isinstance(EGAISFixDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISFixDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISFixDate
        self.EGAISFixDate = initvalue_
        self.EGAISFixDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformARegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformARegType.subclass:
            return InformARegType.subclass(*args_, **kwargs_)
        else:
            return InformARegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_BottlingDate(self):
        return self.BottlingDate
    def set_BottlingDate(self, BottlingDate):
        self.BottlingDate = BottlingDate
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_EGAISFixNumber(self):
        return self.EGAISFixNumber
    def set_EGAISFixNumber(self, EGAISFixNumber):
        self.EGAISFixNumber = EGAISFixNumber
    def get_EGAISFixDate(self):
        return self.EGAISFixDate
    def set_EGAISFixDate(self, EGAISFixDate):
        self.EGAISFixDate = EGAISFixDate
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.BottlingDate is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.EGAISFixNumber is not None or
            self.EGAISFixDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformARegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformARegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformARegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformARegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformARegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformARegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformARegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.BottlingDate is not None:
            namespaceprefix_ = self.BottlingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BottlingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottlingDate>%s</%sBottlingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BottlingDate, input_name='BottlingDate'), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.EGAISFixNumber is not None:
            namespaceprefix_ = self.EGAISFixNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixNumber>%s</%sEGAISFixNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISFixNumber), input_name='EGAISFixNumber')), namespaceprefix_ , eol_))
        if self.EGAISFixDate is not None:
            namespaceprefix_ = self.EGAISFixDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixDate>%s</%sEGAISFixDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISFixDate, input_name='EGAISFixDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'BottlingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BottlingDate = dval_
            self.BottlingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.BottlingDate)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'EGAISFixNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISFixNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISFixNumber')
            self.EGAISFixNumber = value_
            self.EGAISFixNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISFixNumber)
        elif nodeName_ == 'EGAISFixDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISFixDate = dval_
            self.EGAISFixDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISFixDate)
# end class InformARegType


class ActChargeOnType(GeneratedsSuper):
    """Акт постановки на баланс"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnType.subclass:
            return ActChargeOnType.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType64.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType66.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActChargeOnType


class ActChargeOnPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Product=None, Quantity=None, InformAB=None, MarkCodeInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformAB = InformAB
        self.InformAB_nsprefix_ = None
        self.MarkCodeInfo = MarkCodeInfo
        self.MarkCodeInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnPositionType.subclass:
            return ActChargeOnPositionType.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformAB(self):
        return self.InformAB
    def set_InformAB(self, InformAB):
        self.InformAB = InformAB
    def get_MarkCodeInfo(self):
        return self.MarkCodeInfo
    def set_MarkCodeInfo(self, MarkCodeInfo):
        self.MarkCodeInfo = MarkCodeInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.InformAB is not None or
            self.MarkCodeInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActChargeOnPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActChargeOnPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformAB is not None:
            namespaceprefix_ = self.InformAB_nsprefix_ + ':' if (UseCapturedNS_ and self.InformAB_nsprefix_) else ''
            self.InformAB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformAB', pretty_print=pretty_print)
        if self.MarkCodeInfo is not None:
            namespaceprefix_ = self.MarkCodeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCodeInfo_nsprefix_) else ''
            self.MarkCodeInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkCodeInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformAB':
            obj_ = InformABType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformAB = obj_
            obj_.original_tagname_ = 'InformAB'
        elif nodeName_ == 'MarkCodeInfo':
            obj_ = MarkCodeInfoType4.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkCodeInfo = obj_
            obj_.original_tagname_ = 'MarkCodeInfo'
# end class ActChargeOnPositionType


class MarkCodeInfoType4(GeneratedsSuper):
    """Список считанных кодов марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, MarkCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if MarkCode is None:
            self.MarkCode = []
        else:
            self.MarkCode = MarkCode
        self.MarkCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkCodeInfoType4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkCodeInfoType4.subclass:
            return MarkCodeInfoType4.subclass(*args_, **kwargs_)
        else:
            return MarkCodeInfoType4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_MarkCode(self):
        return self.MarkCode
    def set_MarkCode(self, MarkCode):
        self.MarkCode = MarkCode
    def add_MarkCode(self, value):
        self.MarkCode.append(value)
    def insert_MarkCode_at(self, index, value):
        self.MarkCode.insert(index, value)
    def replace_MarkCode_at(self, index, value):
        self.MarkCode[index] = value
    def validate_PDF417String(self, value):
        result = True
        # Validate type PDF417String, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.MarkCode
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkCodeInfoType4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkCodeInfoType4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkCodeInfoType4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkCodeInfoType4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkCodeInfoType4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkCodeInfoType4'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='MarkCodeInfoType4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MarkCode_ in self.MarkCode:
            namespaceprefix_ = self.MarkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMarkCode>%s</%sMarkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(MarkCode_), input_name='MarkCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'MarkCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'MarkCode')
            value_ = self.gds_validate_string(value_, node, 'MarkCode')
            self.MarkCode.append(value_)
            self.MarkCode_nsprefix_ = child_.prefix
            # validate type PDF417String
            self.validate_PDF417String(self.MarkCode[-1])
# end class MarkCodeInfoType4


class InformABKeyType(GeneratedsSuper):
    """Справки А и Б ссылки"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormA=None, LastFormB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FormA = FormA
        self.validate_NoEmptyString50(self.FormA)
        self.FormA_nsprefix_ = None
        self.LastFormB = LastFormB
        self.validate_NoEmptyString50(self.LastFormB)
        self.LastFormB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformABKeyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformABKeyType.subclass:
            return InformABKeyType.subclass(*args_, **kwargs_)
        else:
            return InformABKeyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormA(self):
        return self.FormA
    def set_FormA(self, FormA):
        self.FormA = FormA
    def get_LastFormB(self):
        return self.LastFormB
    def set_LastFormB(self, LastFormB):
        self.LastFormB = LastFormB
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.FormA is not None or
            self.LastFormB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformABKeyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformABKeyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformABKeyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformABKeyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformABKeyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformABKeyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformABKeyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FormA is not None:
            namespaceprefix_ = self.FormA_nsprefix_ + ':' if (UseCapturedNS_ and self.FormA_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormA>%s</%sFormA>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormA), input_name='FormA')), namespaceprefix_ , eol_))
        if self.LastFormB is not None:
            namespaceprefix_ = self.LastFormB_nsprefix_ + ':' if (UseCapturedNS_ and self.LastFormB_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastFormB>%s</%sLastFormB>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LastFormB), input_name='LastFormB')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormA':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormA')
            value_ = self.gds_validate_string(value_, node, 'FormA')
            self.FormA = value_
            self.FormA_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.FormA)
        elif nodeName_ == 'LastFormB':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LastFormB')
            value_ = self.gds_validate_string(value_, node, 'LastFormB')
            self.LastFormB = value_
            self.LastFormB_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.LastFormB)
# end class InformABKeyType


class InformABRegType(GeneratedsSuper):
    """Справки А и Б документы"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformA=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformA = InformA
        self.InformA_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformABRegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformABRegType.subclass:
            return InformABRegType.subclass(*args_, **kwargs_)
        else:
            return InformABRegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformA(self):
        return self.InformA
    def set_InformA(self, InformA):
        self.InformA = InformA
    def hasContent_(self):
        if (
            self.InformA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformABRegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformABRegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformABRegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformABRegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformABRegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformABRegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformABRegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformA is not None:
            namespaceprefix_ = self.InformA_nsprefix_ + ':' if (UseCapturedNS_ and self.InformA_nsprefix_) else ''
            self.InformA.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformA', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformA':
            obj_ = InformARegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformA = obj_
            obj_.original_tagname_ = 'InformA'
# end class InformABRegType


class ActInventoryInformBReg(GeneratedsSuper):
    """Квитанция о регистрации по акту инвентаризации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActInventoryInformBReg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActInventoryInformBReg.subclass:
            return ActInventoryInformBReg.subclass(*args_, **kwargs_)
        else:
            return ActInventoryInformBReg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ActInventoryInformBReg', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActInventoryInformBReg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActInventoryInformBReg':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActInventoryInformBReg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActInventoryInformBReg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActInventoryInformBReg'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ActInventoryInformBReg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType67.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType68.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActInventoryInformBReg


class InformInvPositionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformARegId=None, InformB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformARegId = InformARegId
        self.validate_NoEmptyString50(self.InformARegId)
        self.InformARegId_nsprefix_ = None
        self.InformB = InformB
        self.InformB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformInvPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformInvPositionType.subclass:
            return InformInvPositionType.subclass(*args_, **kwargs_)
        else:
            return InformInvPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformARegId(self):
        return self.InformARegId
    def set_InformARegId(self, InformARegId):
        self.InformARegId = InformARegId
    def get_InformB(self):
        return self.InformB
    def set_InformB(self, InformB):
        self.InformB = InformB
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformARegId is not None or
            self.InformB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformInvPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformInvPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformInvPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformInvPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformInvPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformARegId is not None:
            namespaceprefix_ = self.InformARegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformARegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformARegId>%s</%sInformARegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformARegId), input_name='InformARegId')), namespaceprefix_ , eol_))
        if self.InformB is not None:
            namespaceprefix_ = self.InformB_nsprefix_ + ':' if (UseCapturedNS_ and self.InformB_nsprefix_) else ''
            self.InformB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformARegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformARegId')
            value_ = self.gds_validate_string(value_, node, 'InformARegId')
            self.InformARegId = value_
            self.InformARegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformARegId)
        elif nodeName_ == 'InformB':
            obj_ = InformBType69.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformB = obj_
            obj_.original_tagname_ = 'InformB'
# end class InformInvPositionType


class InformInvBRegItem(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, BRegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.BRegId = BRegId
        self.validate_NoEmptyString50(self.BRegId)
        self.BRegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformInvBRegItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformInvBRegItem.subclass:
            return InformInvBRegItem.subclass(*args_, **kwargs_)
        else:
            return InformInvBRegItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_BRegId(self):
        return self.BRegId
    def set_BRegId(self, BRegId):
        self.BRegId = BRegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.BRegId is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformInvBRegItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformInvBRegItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformInvBRegItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformInvBRegItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformInvBRegItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformInvBRegItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformInvBRegItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.BRegId is not None:
            namespaceprefix_ = self.BRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.BRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBRegId>%s</%sBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.BRegId), input_name='BRegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'BRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'BRegId')
            value_ = self.gds_validate_string(value_, node, 'BRegId')
            self.BRegId = value_
            self.BRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.BRegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformInvBRegItem


class QueryParameters(GeneratedsSuper):
    """Параметры для запроса информации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Parameters=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Parameters is None:
            self.Parameters = []
        else:
            self.Parameters = Parameters
        self.Parameters_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryParameters)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryParameters.subclass:
            return QueryParameters.subclass(*args_, **kwargs_)
        else:
            return QueryParameters(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Parameters(self):
        return self.Parameters
    def set_Parameters(self, Parameters):
        self.Parameters = Parameters
    def add_Parameters(self, value):
        self.Parameters.append(value)
    def insert_Parameters_at(self, index, value):
        self.Parameters.insert(index, value)
    def replace_Parameters_at(self, index, value):
        self.Parameters[index] = value
    def hasContent_(self):
        if (
            self.Parameters
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='QueryParameters', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryParameters')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryParameters':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryParameters')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryParameters', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryParameters'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='QueryParameters', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Parameters_ in self.Parameters:
            namespaceprefix_ = self.Parameters_nsprefix_ + ':' if (UseCapturedNS_ and self.Parameters_nsprefix_) else ''
            Parameters_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Parameters', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Parameters':
            obj_ = ParametersType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Parameters.append(obj_)
            obj_.original_tagname_ = 'Parameters'
# end class QueryParameters


class Parameter(GeneratedsSuper):
    """Параметр"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Name=None, Value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Name = Name
        self.validate_NoEmptyString50(self.Name)
        self.Name_nsprefix_ = None
        self.Value = Value
        self.validate_ValueType(self.Value)
        self.Value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Parameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Parameter.subclass:
            return Parameter.subclass(*args_, **kwargs_)
        else:
            return Parameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Name(self):
        return self.Name
    def set_Name(self, Name):
        self.Name = Name
    def get_Value(self):
        return self.Value
    def set_Value(self, Value):
        self.Value = Value
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_ValueType(self, value):
        result = True
        # Validate type ValueType, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='Parameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Parameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Parameter':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Parameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Parameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='Parameter'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='Parameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            namespaceprefix_ = self.Name_nsprefix_ + ':' if (UseCapturedNS_ and self.Name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), namespaceprefix_ , eol_))
        if self.Value is not None:
            namespaceprefix_ = self.Value_nsprefix_ + ':' if (UseCapturedNS_ and self.Value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValue>%s</%sValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Name')
            value_ = self.gds_validate_string(value_, node, 'Name')
            self.Name = value_
            self.Name_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Name)
        elif nodeName_ == 'Value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Value')
            value_ = self.gds_validate_string(value_, node, 'Value')
            self.Value = value_
            self.Value_nsprefix_ = child_.prefix
            # validate type ValueType
            self.validate_ValueType(self.Value)
# end class Parameter


class QueryFormAB(GeneratedsSuper):
    """Запрос на информацию по Форме А для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FormRegId = FormRegId
        self.validate_NoEmptyString50(self.FormRegId)
        self.FormRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryFormAB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryFormAB.subclass:
            return QueryFormAB.subclass(*args_, **kwargs_)
        else:
            return QueryFormAB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormRegId(self):
        return self.FormRegId
    def set_FormRegId(self, FormRegId):
        self.FormRegId = FormRegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.FormRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryFormAB', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryFormAB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryFormAB':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryFormAB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryFormAB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryFormAB'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryFormAB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FormRegId is not None:
            namespaceprefix_ = self.FormRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormRegId>%s</%sFormRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormRegId), input_name='FormRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormRegId')
            value_ = self.gds_validate_string(value_, node, 'FormRegId')
            self.FormRegId = value_
            self.FormRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.FormRegId)
# end class QueryFormAB


class WayBillInformBRegType(GeneratedsSuper):
    """Квитанция о регистрации справок Б для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillInformBRegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillInformBRegType.subclass:
            return WayBillInformBRegType.subclass(*args_, **kwargs_)
        else:
            return WayBillInformBRegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='WayBillInformBRegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillInformBRegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillInformBRegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillInformBRegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillInformBRegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillInformBRegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='WayBillInformBRegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType70.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType71.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillInformBRegType


class InformBPositionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformBRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformBRegId = InformBRegId
        self.validate_NoEmptyString50(self.InformBRegId)
        self.InformBRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBPositionType.subclass:
            return InformBPositionType.subclass(*args_, **kwargs_)
        else:
            return InformBPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformBRegId(self):
        return self.InformBRegId
    def set_InformBRegId(self, InformBRegId):
        self.InformBRegId = InformBRegId
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformBRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformBPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformBPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformBRegId is not None:
            namespaceprefix_ = self.InformBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformBRegId>%s</%sInformBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformBRegId), input_name='InformBRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformBRegId')
            value_ = self.gds_validate_string(value_, node, 'InformBRegId')
            self.InformBRegId = value_
            self.InformBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformBRegId)
# end class InformBPositionType


class ActWriteOffType(GeneratedsSuper):
    """Акт списания"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffType.subclass:
            return ActWriteOffType.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType72.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType74.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActWriteOffType


class ActWriteOffPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Quantity=None, InformB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformB = InformB
        self.InformB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffPositionType.subclass:
            return ActWriteOffPositionType.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformB(self):
        return self.InformB
    def set_InformB(self, InformB):
        self.InformB = InformB
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Quantity is not None or
            self.InformB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActWriteOffPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActWriteOffPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformB is not None:
            namespaceprefix_ = self.InformB_nsprefix_ + ':' if (UseCapturedNS_ and self.InformB_nsprefix_) else ''
            self.InformB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformB':
            obj_ = InformBTypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformB = obj_
            obj_.original_tagname_ = 'InformB'
# end class ActWriteOffPositionType


class RepProducedType(GeneratedsSuper):
    """Отчет о производстве продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, ContentResource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
        self.ContentResource = ContentResource
        self.ContentResource_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepProducedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepProducedType.subclass:
            return RepProducedType.subclass(*args_, **kwargs_)
        else:
            return RepProducedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def get_ContentResource(self):
        return self.ContentResource
    def set_ContentResource(self, ContentResource):
        self.ContentResource = ContentResource
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None or
            self.ContentResource is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepProducedType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepProducedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepProducedType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepProducedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepProducedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RepProducedType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepProducedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
        if self.ContentResource is not None:
            namespaceprefix_ = self.ContentResource_nsprefix_ + ':' if (UseCapturedNS_ and self.ContentResource_nsprefix_) else ''
            self.ContentResource.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContentResource', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType75.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType77.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
        elif nodeName_ == 'ContentResource':
            obj_ = ContentResourceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContentResource = obj_
            obj_.original_tagname_ = 'ContentResource'
# end class RepProducedType


class PositionType6(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProductCode=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Party=None, Identity=None, Comment1=None, Comment2=None, Comment3=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Comment1 = Comment1
        self.validate_Comment1Type(self.Comment1)
        self.Comment1_nsprefix_ = None
        self.Comment2 = Comment2
        self.validate_Comment2Type(self.Comment2)
        self.Comment2_nsprefix_ = None
        self.Comment3 = Comment3
        self.validate_Comment3Type(self.Comment3)
        self.Comment3_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType6.subclass:
            return PositionType6.subclass(*args_, **kwargs_)
        else:
            return PositionType6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Comment1(self):
        return self.Comment1
    def set_Comment1(self, Comment1):
        self.Comment1 = Comment1
    def get_Comment2(self):
        return self.Comment2
    def set_Comment2(self, Comment2):
        self.Comment2 = Comment2
    def get_Comment3(self):
        return self.Comment3
    def set_Comment3(self, Comment3):
        self.Comment3 = Comment3
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_Comment1Type(self, value):
        result = True
        # Validate type Comment1Type, a restriction on xs:string.
        pass
        return result
    def validate_Comment2Type(self, value):
        result = True
        # Validate type Comment2Type, a restriction on xs:string.
        pass
        return result
    def validate_Comment3Type(self, value):
        result = True
        # Validate type Comment3Type, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ProductCode is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Party is not None or
            self.Identity is not None or
            self.Comment1 is not None or
            self.Comment2 is not None or
            self.Comment3 is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType6':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType6')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType6'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Comment1 is not None:
            namespaceprefix_ = self.Comment1_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment1>%s</%sComment1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment1), input_name='Comment1')), namespaceprefix_ , eol_))
        if self.Comment2 is not None:
            namespaceprefix_ = self.Comment2_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment2>%s</%sComment2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment2), input_name='Comment2')), namespaceprefix_ , eol_))
        if self.Comment3 is not None:
            namespaceprefix_ = self.Comment3_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment3>%s</%sComment3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment3), input_name='Comment3')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Comment1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment1')
            value_ = self.gds_validate_string(value_, node, 'Comment1')
            self.Comment1 = value_
            self.Comment1_nsprefix_ = child_.prefix
            # validate type Comment1Type
            self.validate_Comment1Type(self.Comment1)
        elif nodeName_ == 'Comment2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment2')
            value_ = self.gds_validate_string(value_, node, 'Comment2')
            self.Comment2 = value_
            self.Comment2_nsprefix_ = child_.prefix
            # validate type Comment2Type
            self.validate_Comment2Type(self.Comment2)
        elif nodeName_ == 'Comment3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment3')
            value_ = self.gds_validate_string(value_, node, 'Comment3')
            self.Comment3 = value_
            self.Comment3_nsprefix_ = child_.prefix
            # validate type Comment3Type
            self.validate_Comment3Type(self.Comment3)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class PositionType6


class UsedResourceType(GeneratedsSuper):
    """Сырье использованное для производства продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentityRes=None, Product=None, RegForm2=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IdentityRes = IdentityRes
        self.validate_IdentityType(self.IdentityRes)
        self.IdentityRes_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.RegForm2 = RegForm2
        self.validate_NoEmptyString50(self.RegForm2)
        self.RegForm2_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UsedResourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UsedResourceType.subclass:
            return UsedResourceType.subclass(*args_, **kwargs_)
        else:
            return UsedResourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityRes(self):
        return self.IdentityRes
    def set_IdentityRes(self, IdentityRes):
        self.IdentityRes = IdentityRes
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_RegForm2(self):
        return self.RegForm2
    def set_RegForm2(self, RegForm2):
        self.RegForm2 = RegForm2
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.IdentityRes is not None or
            self.Product is not None or
            self.RegForm2 is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='UsedResourceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UsedResourceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UsedResourceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UsedResourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UsedResourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='UsedResourceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='UsedResourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityRes is not None:
            namespaceprefix_ = self.IdentityRes_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityRes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityRes>%s</%sIdentityRes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityRes), input_name='IdentityRes')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.RegForm2 is not None:
            namespaceprefix_ = self.RegForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.RegForm2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegForm2>%s</%sRegForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegForm2), input_name='RegForm2')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityRes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IdentityRes')
            value_ = self.gds_validate_string(value_, node, 'IdentityRes')
            self.IdentityRes = value_
            self.IdentityRes_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.IdentityRes)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'RegForm2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegForm2')
            value_ = self.gds_validate_string(value_, node, 'RegForm2')
            self.RegForm2 = value_
            self.RegForm2_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegForm2)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
# end class UsedResourceType


class OrganizationsType7(GeneratedsSuper):
    """Организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Organization=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Organization is None:
            self.Organization = []
        else:
            self.Organization = Organization
        self.Organization_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrganizationsType7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrganizationsType7.subclass:
            return OrganizationsType7.subclass(*args_, **kwargs_)
        else:
            return OrganizationsType7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Organization(self):
        return self.Organization
    def set_Organization(self, Organization):
        self.Organization = Organization
    def add_Organization(self, value):
        self.Organization.append(value)
    def insert_Organization_at(self, index, value):
        self.Organization.insert(index, value)
    def replace_Organization_at(self, index, value):
        self.Organization[index] = value
    def hasContent_(self):
        if (
            self.Organization
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrganizationsType7', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrganizationsType7')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrganizationsType7':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrganizationsType7')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrganizationsType7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrganizationsType7'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrganizationsType7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Organization_ in self.Organization:
            namespaceprefix_ = self.Organization_nsprefix_ + ':' if (UseCapturedNS_ and self.Organization_nsprefix_) else ''
            Organization_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Organization', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Organization':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Organization.append(obj_)
            obj_.original_tagname_ = 'Organization'
# end class OrganizationsType7


class OrgInfoEx_v2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, OrgInfoV2=None, addresslist=None, State=None, VersionWB=None, isLicense=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.OrgInfoV2 = OrgInfoV2
        self.OrgInfoV2_nsprefix_ = None
        self.addresslist = addresslist
        self.addresslist_nsprefix_ = None
        self.State = State
        self.State_nsprefix_ = None
        self.VersionWB = VersionWB
        self.validate_NoEmptyString50(self.VersionWB)
        self.VersionWB_nsprefix_ = None
        self.isLicense = isLicense
        self.isLicense_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoEx_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoEx_v2.subclass:
            return OrgInfoEx_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoEx_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_OrgInfoV2(self):
        return self.OrgInfoV2
    def set_OrgInfoV2(self, OrgInfoV2):
        self.OrgInfoV2 = OrgInfoV2
    def get_addresslist(self):
        return self.addresslist
    def set_addresslist(self, addresslist):
        self.addresslist = addresslist
    def get_State(self):
        return self.State
    def set_State(self, State):
        self.State = State
    def get_VersionWB(self):
        return self.VersionWB
    def set_VersionWB(self, VersionWB):
        self.VersionWB = VersionWB
    def get_isLicense(self):
        return self.isLicense
    def set_isLicense(self, isLicense):
        self.isLicense = isLicense
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.OrgInfoV2 is not None or
            self.addresslist is not None or
            self.State is not None or
            self.VersionWB is not None or
            self.isLicense is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfoEx_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoEx_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoEx_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoEx_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoEx_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoEx_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgInfoEx_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.OrgInfoV2 is not None:
            namespaceprefix_ = self.OrgInfoV2_nsprefix_ + ':' if (UseCapturedNS_ and self.OrgInfoV2_nsprefix_) else ''
            self.OrgInfoV2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OrgInfoV2', pretty_print=pretty_print)
        if self.addresslist is not None:
            namespaceprefix_ = self.addresslist_nsprefix_ + ':' if (UseCapturedNS_ and self.addresslist_nsprefix_) else ''
            self.addresslist.export(outfile, level, namespaceprefix_, namespacedef_='', name_='addresslist', pretty_print=pretty_print)
        if self.State is not None:
            namespaceprefix_ = self.State_nsprefix_ + ':' if (UseCapturedNS_ and self.State_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.State), input_name='State')), namespaceprefix_ , eol_))
        if self.VersionWB is not None:
            namespaceprefix_ = self.VersionWB_nsprefix_ + ':' if (UseCapturedNS_ and self.VersionWB_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersionWB>%s</%sVersionWB>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VersionWB), input_name='VersionWB')), namespaceprefix_ , eol_))
        if self.isLicense is not None:
            namespaceprefix_ = self.isLicense_nsprefix_ + ':' if (UseCapturedNS_ and self.isLicense_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sisLicense>%s</%sisLicense>%s' % (namespaceprefix_ , self.gds_format_boolean(self.isLicense, input_name='isLicense'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'OrgInfoV2':
            obj_ = OrgInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OrgInfoV2 = obj_
            obj_.original_tagname_ = 'OrgInfoV2'
        elif nodeName_ == 'addresslist':
            obj_ = addresslistType78.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.addresslist = obj_
            obj_.original_tagname_ = 'addresslist'
        elif nodeName_ == 'State':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'State')
            value_ = self.gds_validate_string(value_, node, 'State')
            self.State = value_
            self.State_nsprefix_ = child_.prefix
        elif nodeName_ == 'VersionWB':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VersionWB')
            value_ = self.gds_validate_string(value_, node, 'VersionWB')
            self.VersionWB = value_
            self.VersionWB_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.VersionWB)
        elif nodeName_ == 'isLicense':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'isLicense')
            ival_ = self.gds_validate_boolean(ival_, node, 'isLicense')
            self.isLicense = ival_
            self.isLicense_nsprefix_ = child_.prefix
# end class OrgInfoEx_v2


class OrgItemType8(GeneratedsSuper):
    """Ссылка на организацию"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ID = ID
        self.validate_NoEmptyString50(self.ID)
        self.ID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgItemType8)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgItemType8.subclass:
            return OrgItemType8.subclass(*args_, **kwargs_)
        else:
            return OrgItemType8(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ID(self):
        return self.ID
    def set_ID(self, ID):
        self.ID = ID
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgItemType8', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgItemType8')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgItemType8':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgItemType8')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgItemType8', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgItemType8'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgItemType8', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ID is not None:
            namespaceprefix_ = self.ID_nsprefix_ + ':' if (UseCapturedNS_ and self.ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sID>%s</%sID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ID), input_name='ID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ID')
            value_ = self.gds_validate_string(value_, node, 'ID')
            self.ID = value_
            self.ID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ID)
# end class OrgItemType8


class OrgAddressType9(GeneratedsSuper):
    """Адрес организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Country=None, Index=None, RegionCode=None, area=None, city=None, place=None, street=None, house=None, building=None, liter=None, description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Country = Country
        self.validate_CountryType79(self.Country)
        self.Country_nsprefix_ = None
        self.Index = Index
        self.validate_NoEmptyString50(self.Index)
        self.Index_nsprefix_ = None
        self.RegionCode = RegionCode
        self.validate_RegionCodeType80(self.RegionCode)
        self.RegionCode_nsprefix_ = None
        self.area = area
        self.validate_NoEmptyString50(self.area)
        self.area_nsprefix_ = None
        self.city = city
        self.validate_NoEmptyString50(self.city)
        self.city_nsprefix_ = None
        self.place = place
        self.validate_NoEmptyString50(self.place)
        self.place_nsprefix_ = None
        self.street = street
        self.validate_NoEmptyString50(self.street)
        self.street_nsprefix_ = None
        self.house = house
        self.validate_NoEmptyString50(self.house)
        self.house_nsprefix_ = None
        self.building = building
        self.validate_NoEmptyString50(self.building)
        self.building_nsprefix_ = None
        self.liter = liter
        self.validate_NoEmptyString50(self.liter)
        self.liter_nsprefix_ = None
        self.description = description
        self.validate_descriptionType81(self.description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgAddressType9)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgAddressType9.subclass:
            return OrgAddressType9.subclass(*args_, **kwargs_)
        else:
            return OrgAddressType9(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_Index(self):
        return self.Index
    def set_Index(self, Index):
        self.Index = Index
    def get_RegionCode(self):
        return self.RegionCode
    def set_RegionCode(self, RegionCode):
        self.RegionCode = RegionCode
    def get_area(self):
        return self.area
    def set_area(self, area):
        self.area = area
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def get_place(self):
        return self.place
    def set_place(self, place):
        self.place = place
    def get_street(self):
        return self.street
    def set_street(self, street):
        self.street = street
    def get_house(self):
        return self.house
    def set_house(self, house):
        self.house = house
    def get_building(self):
        return self.building
    def set_building(self, building):
        self.building = building
    def get_liter(self):
        return self.liter
    def set_liter(self, liter):
        self.liter = liter
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def validate_CountryType79(self, value):
        result = True
        # Validate type CountryType79, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_RegionCodeType80(self, value):
        result = True
        # Validate type RegionCodeType80, a restriction on xs:string.
        pass
        return result
    def validate_descriptionType81(self, value):
        result = True
        # Validate type descriptionType81, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Country is not None or
            self.Index is not None or
            self.RegionCode is not None or
            self.area is not None or
            self.city is not None or
            self.place is not None or
            self.street is not None or
            self.house is not None or
            self.building is not None or
            self.liter is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgAddressType9', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgAddressType9')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgAddressType9':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgAddressType9')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgAddressType9', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgAddressType9'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='OrgAddressType9', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.Index is not None:
            namespaceprefix_ = self.Index_nsprefix_ + ':' if (UseCapturedNS_ and self.Index_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndex>%s</%sIndex>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Index), input_name='Index')), namespaceprefix_ , eol_))
        if self.RegionCode is not None:
            namespaceprefix_ = self.RegionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionCode>%s</%sRegionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionCode), input_name='RegionCode')), namespaceprefix_ , eol_))
        if self.area is not None:
            namespaceprefix_ = self.area_nsprefix_ + ':' if (UseCapturedNS_ and self.area_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sarea>%s</%sarea>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.area), input_name='area')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
        if self.place is not None:
            namespaceprefix_ = self.place_nsprefix_ + ':' if (UseCapturedNS_ and self.place_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splace>%s</%splace>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.place), input_name='place')), namespaceprefix_ , eol_))
        if self.street is not None:
            namespaceprefix_ = self.street_nsprefix_ + ':' if (UseCapturedNS_ and self.street_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstreet>%s</%sstreet>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.street), input_name='street')), namespaceprefix_ , eol_))
        if self.house is not None:
            namespaceprefix_ = self.house_nsprefix_ + ':' if (UseCapturedNS_ and self.house_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shouse>%s</%shouse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.house), input_name='house')), namespaceprefix_ , eol_))
        if self.building is not None:
            namespaceprefix_ = self.building_nsprefix_ + ':' if (UseCapturedNS_ and self.building_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbuilding>%s</%sbuilding>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.building), input_name='building')), namespaceprefix_ , eol_))
        if self.liter is not None:
            namespaceprefix_ = self.liter_nsprefix_ + ':' if (UseCapturedNS_ and self.liter_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sliter>%s</%sliter>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.liter), input_name='liter')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType79
            self.validate_CountryType79(self.Country)
        elif nodeName_ == 'Index':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Index')
            value_ = self.gds_validate_string(value_, node, 'Index')
            self.Index = value_
            self.Index_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Index)
        elif nodeName_ == 'RegionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegionCode')
            value_ = self.gds_validate_string(value_, node, 'RegionCode')
            self.RegionCode = value_
            self.RegionCode_nsprefix_ = child_.prefix
            # validate type RegionCodeType80
            self.validate_RegionCodeType80(self.RegionCode)
        elif nodeName_ == 'area':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'area')
            value_ = self.gds_validate_string(value_, node, 'area')
            self.area = value_
            self.area_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.area)
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.city)
        elif nodeName_ == 'place':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'place')
            value_ = self.gds_validate_string(value_, node, 'place')
            self.place = value_
            self.place_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.place)
        elif nodeName_ == 'street':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'street')
            value_ = self.gds_validate_string(value_, node, 'street')
            self.street = value_
            self.street_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.street)
        elif nodeName_ == 'house':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'house')
            value_ = self.gds_validate_string(value_, node, 'house')
            self.house = value_
            self.house_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.house)
        elif nodeName_ == 'building':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'building')
            value_ = self.gds_validate_string(value_, node, 'building')
            self.building = value_
            self.building_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.building)
        elif nodeName_ == 'liter':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'liter')
            value_ = self.gds_validate_string(value_, node, 'liter')
            self.liter = value_
            self.liter_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.liter)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
            # validate type descriptionType81
            self.validate_descriptionType81(self.description)
# end class OrgAddressType9


class ProductContractType10(GeneratedsSuper):
    """Сведения о контракте на поставку продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, number=None, date=None, Supplier=None, Contragent=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.number = number
        self.validate_NoEmptyString50(self.number)
        self.number_nsprefix_ = None
        if isinstance(date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(date, '%Y-%m-%d').date()
        else:
            initvalue_ = date
        self.date = initvalue_
        self.date_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.Contragent = Contragent
        self.Contragent_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductContractType10)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductContractType10.subclass:
            return ProductContractType10.subclass(*args_, **kwargs_)
        else:
            return ProductContractType10(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_number(self):
        return self.number
    def set_number(self, number):
        self.number = number
    def get_date(self):
        return self.date
    def set_date(self, date):
        self.date = date
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def get_Contragent(self):
        return self.Contragent
    def set_Contragent(self, Contragent):
        self.Contragent = Contragent
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.number is not None or
            self.date is not None or
            self.Supplier is not None or
            self.Contragent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductContractType10', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductContractType10')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductContractType10':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductContractType10')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductContractType10', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductContractType10'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductContractType10', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.number is not None:
            namespaceprefix_ = self.number_nsprefix_ + ':' if (UseCapturedNS_ and self.number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumber>%s</%snumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.number), input_name='number')), namespaceprefix_ , eol_))
        if self.date is not None:
            namespaceprefix_ = self.date_nsprefix_ + ':' if (UseCapturedNS_ and self.date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdate>%s</%sdate>%s' % (namespaceprefix_ , self.gds_format_date(self.date, input_name='date'), namespaceprefix_ , eol_))
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
        if self.Contragent is not None:
            namespaceprefix_ = self.Contragent_nsprefix_ + ':' if (UseCapturedNS_ and self.Contragent_nsprefix_) else ''
            self.Contragent.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contragent', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'number')
            value_ = self.gds_validate_string(value_, node, 'number')
            self.number = value_
            self.number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.number)
        elif nodeName_ == 'date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.date = dval_
            self.date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.date)
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
        elif nodeName_ == 'Contragent':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Contragent = obj_
            obj_.original_tagname_ = 'Contragent'
# end class ProductContractType10


class OrgInfo_v2(GeneratedsSuper):
    """Разделение организаций на UL, FL, FO, TS"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UL=None, FL=None, FO=None, TS=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UL = UL
        self.UL_nsprefix_ = None
        self.FL = FL
        self.FL_nsprefix_ = None
        self.FO = FO
        self.FO_nsprefix_ = None
        self.TS = TS
        self.TS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfo_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfo_v2.subclass:
            return OrgInfo_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfo_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UL(self):
        return self.UL
    def set_UL(self, UL):
        self.UL = UL
    def get_FL(self):
        return self.FL
    def set_FL(self, FL):
        self.FL = FL
    def get_FO(self):
        return self.FO
    def set_FO(self, FO):
        self.FO = FO
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def hasContent_(self):
        if (
            self.UL is not None or
            self.FL is not None or
            self.FO is not None or
            self.TS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfo_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfo_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfo_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfo_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfo_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfo_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfo_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UL is not None:
            namespaceprefix_ = self.UL_nsprefix_ + ':' if (UseCapturedNS_ and self.UL_nsprefix_) else ''
            self.UL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UL', pretty_print=pretty_print)
        if self.FL is not None:
            namespaceprefix_ = self.FL_nsprefix_ + ':' if (UseCapturedNS_ and self.FL_nsprefix_) else ''
            self.FL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FL', pretty_print=pretty_print)
        if self.FO is not None:
            namespaceprefix_ = self.FO_nsprefix_ + ':' if (UseCapturedNS_ and self.FO_nsprefix_) else ''
            self.FO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FO', pretty_print=pretty_print)
        if self.TS is not None:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            self.TS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UL':
            obj_ = ULType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UL = obj_
            obj_.original_tagname_ = 'UL'
        elif nodeName_ == 'FL':
            obj_ = FLType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FL = obj_
            obj_.original_tagname_ = 'FL'
        elif nodeName_ == 'FO':
            obj_ = FOType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FO = obj_
            obj_.original_tagname_ = 'FO'
        elif nodeName_ == 'TS':
            obj_ = TSType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS = obj_
            obj_.original_tagname_ = 'TS'
# end class OrgInfo_v2


class OrgInfoReply_v2(GeneratedsSuper):
    """Разделение организаций на UL, FL, FO, TS"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UL=None, FL=None, FO=None, TS=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UL = UL
        self.UL_nsprefix_ = None
        self.FL = FL
        self.FL_nsprefix_ = None
        self.FO = FO
        self.FO_nsprefix_ = None
        self.TS = TS
        self.TS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoReply_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoReply_v2.subclass:
            return OrgInfoReply_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoReply_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UL(self):
        return self.UL
    def set_UL(self, UL):
        self.UL = UL
    def get_FL(self):
        return self.FL
    def set_FL(self, FL):
        self.FL = FL
    def get_FO(self):
        return self.FO
    def set_FO(self, FO):
        self.FO = FO
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def hasContent_(self):
        if (
            self.UL is not None or
            self.FL is not None or
            self.FO is not None or
            self.TS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoReply_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoReply_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoReply_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoReply_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoReply_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoReply_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoReply_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UL is not None:
            namespaceprefix_ = self.UL_nsprefix_ + ':' if (UseCapturedNS_ and self.UL_nsprefix_) else ''
            self.UL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UL', pretty_print=pretty_print)
        if self.FL is not None:
            namespaceprefix_ = self.FL_nsprefix_ + ':' if (UseCapturedNS_ and self.FL_nsprefix_) else ''
            self.FL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FL', pretty_print=pretty_print)
        if self.FO is not None:
            namespaceprefix_ = self.FO_nsprefix_ + ':' if (UseCapturedNS_ and self.FO_nsprefix_) else ''
            self.FO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FO', pretty_print=pretty_print)
        if self.TS is not None:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            self.TS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UL':
            obj_ = ULReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UL = obj_
            obj_.original_tagname_ = 'UL'
        elif nodeName_ == 'FL':
            obj_ = FLReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FL = obj_
            obj_.original_tagname_ = 'FL'
        elif nodeName_ == 'FO':
            obj_ = FOType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FO = obj_
            obj_.original_tagname_ = 'FO'
        elif nodeName_ == 'TS':
            obj_ = TSReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS = obj_
            obj_.original_tagname_ = 'TS'
# end class OrgInfoReply_v2


class OrgInfoRus_v2(GeneratedsSuper):
    """Российские организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UL=None, FL=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UL = UL
        self.UL_nsprefix_ = None
        self.FL = FL
        self.FL_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoRus_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoRus_v2.subclass:
            return OrgInfoRus_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoRus_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UL(self):
        return self.UL
    def set_UL(self, UL):
        self.UL = UL
    def get_FL(self):
        return self.FL
    def set_FL(self, FL):
        self.FL = FL
    def hasContent_(self):
        if (
            self.UL is not None or
            self.FL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoRus_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoRus_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoRus_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoRus_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoRus_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoRus_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoRus_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UL is not None:
            namespaceprefix_ = self.UL_nsprefix_ + ':' if (UseCapturedNS_ and self.UL_nsprefix_) else ''
            self.UL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UL', pretty_print=pretty_print)
        if self.FL is not None:
            namespaceprefix_ = self.FL_nsprefix_ + ':' if (UseCapturedNS_ and self.FL_nsprefix_) else ''
            self.FL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FL', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UL':
            obj_ = ULType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UL = obj_
            obj_.original_tagname_ = 'UL'
        elif nodeName_ == 'FL':
            obj_ = FLType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FL = obj_
            obj_.original_tagname_ = 'FL'
# end class OrgInfoRus_v2


class OrgInfoRusReply_v2(GeneratedsSuper):
    """Российские организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UL=None, FL=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UL = UL
        self.UL_nsprefix_ = None
        self.FL = FL
        self.FL_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoRusReply_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoRusReply_v2.subclass:
            return OrgInfoRusReply_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoRusReply_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UL(self):
        return self.UL
    def set_UL(self, UL):
        self.UL = UL
    def get_FL(self):
        return self.FL
    def set_FL(self, FL):
        self.FL = FL
    def hasContent_(self):
        if (
            self.UL is not None or
            self.FL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoRusReply_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoRusReply_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoRusReply_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoRusReply_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoRusReply_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoRusReply_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoRusReply_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UL is not None:
            namespaceprefix_ = self.UL_nsprefix_ + ':' if (UseCapturedNS_ and self.UL_nsprefix_) else ''
            self.UL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='UL', pretty_print=pretty_print)
        if self.FL is not None:
            namespaceprefix_ = self.FL_nsprefix_ + ':' if (UseCapturedNS_ and self.FL_nsprefix_) else ''
            self.FL.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FL', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UL':
            obj_ = ULReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.UL = obj_
            obj_.original_tagname_ = 'UL'
        elif nodeName_ == 'FL':
            obj_ = FLReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FL = obj_
            obj_.original_tagname_ = 'FL'
# end class OrgInfoRusReply_v2


class OrgInfoForeign_v2(GeneratedsSuper):
    """Иностранные организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FO=None, TS=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FO = FO
        self.FO_nsprefix_ = None
        self.TS = TS
        self.TS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoForeign_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoForeign_v2.subclass:
            return OrgInfoForeign_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoForeign_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FO(self):
        return self.FO
    def set_FO(self, FO):
        self.FO = FO
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def hasContent_(self):
        if (
            self.FO is not None or
            self.TS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeign_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoForeign_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoForeign_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoForeign_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoForeign_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoForeign_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeign_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FO is not None:
            namespaceprefix_ = self.FO_nsprefix_ + ':' if (UseCapturedNS_ and self.FO_nsprefix_) else ''
            self.FO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FO', pretty_print=pretty_print)
        if self.TS is not None:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            self.TS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FO':
            obj_ = FOType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FO = obj_
            obj_.original_tagname_ = 'FO'
        elif nodeName_ == 'TS':
            obj_ = TSType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS = obj_
            obj_.original_tagname_ = 'TS'
# end class OrgInfoForeign_v2


class OrgInfoForeignReply_v2(GeneratedsSuper):
    """Иностранные организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FO=None, TS=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FO = FO
        self.FO_nsprefix_ = None
        self.TS = TS
        self.TS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoForeignReply_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoForeignReply_v2.subclass:
            return OrgInfoForeignReply_v2.subclass(*args_, **kwargs_)
        else:
            return OrgInfoForeignReply_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FO(self):
        return self.FO
    def set_FO(self, FO):
        self.FO = FO
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def hasContent_(self):
        if (
            self.FO is not None or
            self.TS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeignReply_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoForeignReply_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoForeignReply_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoForeignReply_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoForeignReply_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoForeignReply_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeignReply_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FO is not None:
            namespaceprefix_ = self.FO_nsprefix_ + ':' if (UseCapturedNS_ and self.FO_nsprefix_) else ''
            self.FO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FO', pretty_print=pretty_print)
        if self.TS is not None:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            self.TS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FO':
            obj_ = FOType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FO = obj_
            obj_.original_tagname_ = 'FO'
        elif nodeName_ == 'TS':
            obj_ = TSReplyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS = obj_
            obj_.original_tagname_ = 'TS'
# end class OrgInfoForeignReply_v2


class ULType(GeneratedsSuper):
    """Российские юридические лица"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, INN=None, KPP=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType82(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType83(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INN10Type12(self.INN)
        self.INN_nsprefix_ = None
        self.KPP = KPP
        self.validate_KPPType13(self.KPP)
        self.KPP_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ULType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ULType.subclass:
            return ULType.subclass(*args_, **kwargs_)
        else:
            return ULType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_KPP(self):
        return self.KPP
    def set_KPP(self, KPP):
        self.KPP = KPP
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType82(self, value):
        result = True
        # Validate type FullNameType82, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType83(self, value):
        result = True
        # Validate type ShortNameType83, a restriction on xs:string.
        pass
        return result
    def validate_INN10Type12(self, value):
        result = True
        # Validate type INN10Type12, a restriction on xs:string.
        pass
        return result
    def validate_KPPType13(self, value):
        result = True
        # Validate type KPPType13, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.KPP is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ULType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ULType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ULType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ULType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ULType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ULType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ULType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.KPP is not None:
            namespaceprefix_ = self.KPP_nsprefix_ + ':' if (UseCapturedNS_ and self.KPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKPP>%s</%sKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KPP), input_name='KPP')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType82
            self.validate_FullNameType82(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType83
            self.validate_ShortNameType83(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INN10Type12
            self.validate_INN10Type12(self.INN)
        elif nodeName_ == 'KPP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'KPP')
            value_ = self.gds_validate_string(value_, node, 'KPP')
            self.KPP = value_
            self.KPP_nsprefix_ = child_.prefix
            # validate type KPPType13
            self.validate_KPPType13(self.KPP)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeULFL.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class ULType


class ULReplyType(GeneratedsSuper):
    """Российские юридические лица"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, INN=None, KPP=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType84(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType85(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INN10Type12(self.INN)
        self.INN_nsprefix_ = None
        self.KPP = KPP
        self.validate_KPPType13(self.KPP)
        self.KPP_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ULReplyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ULReplyType.subclass:
            return ULReplyType.subclass(*args_, **kwargs_)
        else:
            return ULReplyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_KPP(self):
        return self.KPP
    def set_KPP(self, KPP):
        self.KPP = KPP
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType84(self, value):
        result = True
        # Validate type FullNameType84, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType85(self, value):
        result = True
        # Validate type ShortNameType85, a restriction on xs:string.
        pass
        return result
    def validate_INN10Type12(self, value):
        result = True
        # Validate type INN10Type12, a restriction on xs:string.
        pass
        return result
    def validate_KPPType13(self, value):
        result = True
        # Validate type KPPType13, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.KPP is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ULReplyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ULReplyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ULReplyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ULReplyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ULReplyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ULReplyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ULReplyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.KPP is not None:
            namespaceprefix_ = self.KPP_nsprefix_ + ':' if (UseCapturedNS_ and self.KPP_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sKPP>%s</%sKPP>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.KPP), input_name='KPP')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType84
            self.validate_FullNameType84(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType85
            self.validate_ShortNameType85(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INN10Type12
            self.validate_INN10Type12(self.INN)
        elif nodeName_ == 'KPP':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'KPP')
            value_ = self.gds_validate_string(value_, node, 'KPP')
            self.KPP = value_
            self.KPP_nsprefix_ = child_.prefix
            # validate type KPPType13
            self.validate_KPPType13(self.KPP)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeULFLReply.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class ULReplyType


class FLType(GeneratedsSuper):
    """Российские индивидуальные предприниматели"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, INN=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType86(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType87(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INN12Type14(self.INN)
        self.INN_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FLType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FLType.subclass:
            return FLType.subclass(*args_, **kwargs_)
        else:
            return FLType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType86(self, value):
        result = True
        # Validate type FullNameType86, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType87(self, value):
        result = True
        # Validate type ShortNameType87, a restriction on xs:string.
        pass
        return result
    def validate_INN12Type14(self, value):
        result = True
        # Validate type INN12Type14, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FLType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FLType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FLType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FLType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FLType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='FLType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FLType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType86
            self.validate_FullNameType86(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType87
            self.validate_ShortNameType87(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INN12Type14
            self.validate_INN12Type14(self.INN)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeULFL.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class FLType


class FLReplyType(GeneratedsSuper):
    """Российские индивидуальные предприниматели"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, INN=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType88(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType89(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.INN = INN
        self.validate_INN12Type14(self.INN)
        self.INN_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FLReplyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FLReplyType.subclass:
            return FLReplyType.subclass(*args_, **kwargs_)
        else:
            return FLReplyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_INN(self):
        return self.INN
    def set_INN(self, INN):
        self.INN = INN
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType88(self, value):
        result = True
        # Validate type FullNameType88, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType89(self, value):
        result = True
        # Validate type ShortNameType89, a restriction on xs:string.
        pass
        return result
    def validate_INN12Type14(self, value):
        result = True
        # Validate type INN12Type14, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.INN is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FLReplyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FLReplyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FLReplyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FLReplyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FLReplyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='FLReplyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FLReplyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.INN is not None:
            namespaceprefix_ = self.INN_nsprefix_ + ':' if (UseCapturedNS_ and self.INN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINN>%s</%sINN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.INN), input_name='INN')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType88
            self.validate_FullNameType88(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType89
            self.validate_ShortNameType89(self.ShortName)
        elif nodeName_ == 'INN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'INN')
            value_ = self.gds_validate_string(value_, node, 'INN')
            self.INN = value_
            self.INN_nsprefix_ = child_.prefix
            # validate type INN12Type14
            self.validate_INN12Type14(self.INN)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeULFLReply.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class FLReplyType


class FOType(GeneratedsSuper):
    """Иностраная организация"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType90(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType91(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FOType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FOType.subclass:
            return FOType.subclass(*args_, **kwargs_)
        else:
            return FOType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType90(self, value):
        result = True
        # Validate type FullNameType90, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType91(self, value):
        result = True
        # Validate type ShortNameType91, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FOType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FOType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'FOType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='FOType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='FOType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='FOType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='FOType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType90
            self.validate_FullNameType90(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType91
            self.validate_ShortNameType91(self.ShortName)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeFOTS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class FOType


class TSType(GeneratedsSuper):
    """Организация из таможенного союза"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, TSNUM=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType92(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType93(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.TSNUM = TSNUM
        self.validate_NoEmptyString50(self.TSNUM)
        self.TSNUM_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TSType.subclass:
            return TSType.subclass(*args_, **kwargs_)
        else:
            return TSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_TSNUM(self):
        return self.TSNUM
    def set_TSNUM(self, TSNUM):
        self.TSNUM = TSNUM
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType92(self, value):
        result = True
        # Validate type FullNameType92, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType93(self, value):
        result = True
        # Validate type ShortNameType93, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.TSNUM is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TSType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.TSNUM is not None:
            namespaceprefix_ = self.TSNUM_nsprefix_ + ':' if (UseCapturedNS_ and self.TSNUM_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTSNUM>%s</%sTSNUM>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TSNUM), input_name='TSNUM')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType92
            self.validate_FullNameType92(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType93
            self.validate_ShortNameType93(self.ShortName)
        elif nodeName_ == 'TSNUM':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TSNUM')
            value_ = self.gds_validate_string(value_, node, 'TSNUM')
            self.TSNUM = value_
            self.TSNUM_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TSNUM)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeFOTS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class TSType


class TSReplyType(GeneratedsSuper):
    """Организация из таможенного союза"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientRegId=None, FullName=None, ShortName=None, TSNUM=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientRegId = ClientRegId
        self.validate_NoEmptyString50(self.ClientRegId)
        self.ClientRegId_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType94(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType95(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.TSNUM = TSNUM
        self.validate_NoEmptyString50(self.TSNUM)
        self.TSNUM_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TSReplyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TSReplyType.subclass:
            return TSReplyType.subclass(*args_, **kwargs_)
        else:
            return TSReplyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientRegId(self):
        return self.ClientRegId
    def set_ClientRegId(self, ClientRegId):
        self.ClientRegId = ClientRegId
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_TSNUM(self):
        return self.TSNUM
    def set_TSNUM(self, TSNUM):
        self.TSNUM = TSNUM
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType94(self, value):
        result = True
        # Validate type FullNameType94, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType95(self, value):
        result = True
        # Validate type ShortNameType95, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientRegId is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.TSNUM is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TSReplyType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TSReplyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TSReplyType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TSReplyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TSReplyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TSReplyType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TSReplyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientRegId is not None:
            namespaceprefix_ = self.ClientRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientRegId>%s</%sClientRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientRegId), input_name='ClientRegId')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.TSNUM is not None:
            namespaceprefix_ = self.TSNUM_nsprefix_ + ':' if (UseCapturedNS_ and self.TSNUM_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTSNUM>%s</%sTSNUM>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TSNUM), input_name='TSNUM')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientRegId')
            value_ = self.gds_validate_string(value_, node, 'ClientRegId')
            self.ClientRegId = value_
            self.ClientRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientRegId)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType94
            self.validate_FullNameType94(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType95
            self.validate_ShortNameType95(self.ShortName)
        elif nodeName_ == 'TSNUM':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TSNUM')
            value_ = self.gds_validate_string(value_, node, 'TSNUM')
            self.TSNUM = value_
            self.TSNUM_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TSNUM)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeFOTS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class TSReplyType


class OrgAddressTypeULFL(GeneratedsSuper):
    """Адрес организации (для российских)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Country=None, RegionCode=None, description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Country = Country
        self.validate_CountryType96(self.Country)
        self.Country_nsprefix_ = None
        self.RegionCode = RegionCode
        self.validate_RegionCodeType97(self.RegionCode)
        self.RegionCode_nsprefix_ = None
        self.description = description
        self.validate_descriptionType98(self.description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgAddressTypeULFL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgAddressTypeULFL.subclass:
            return OrgAddressTypeULFL.subclass(*args_, **kwargs_)
        else:
            return OrgAddressTypeULFL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_RegionCode(self):
        return self.RegionCode
    def set_RegionCode(self, RegionCode):
        self.RegionCode = RegionCode
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def validate_CountryType96(self, value):
        result = True
        # Validate type CountryType96, a restriction on xs:string.
        pass
        return result
    def validate_RegionCodeType97(self, value):
        result = True
        # Validate type RegionCodeType97, a restriction on xs:string.
        pass
        return result
    def validate_descriptionType98(self, value):
        result = True
        # Validate type descriptionType98, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Country is not None or
            self.RegionCode is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeULFL', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgAddressTypeULFL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgAddressTypeULFL':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgAddressTypeULFL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgAddressTypeULFL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgAddressTypeULFL'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeULFL', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.RegionCode is not None:
            namespaceprefix_ = self.RegionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionCode>%s</%sRegionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionCode), input_name='RegionCode')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType96
            self.validate_CountryType96(self.Country)
        elif nodeName_ == 'RegionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegionCode')
            value_ = self.gds_validate_string(value_, node, 'RegionCode')
            self.RegionCode = value_
            self.RegionCode_nsprefix_ = child_.prefix
            # validate type RegionCodeType97
            self.validate_RegionCodeType97(self.RegionCode)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
            # validate type descriptionType98
            self.validate_descriptionType98(self.description)
# end class OrgAddressTypeULFL


class OrgAddressTypeULFLReply(GeneratedsSuper):
    """Адрес организации (для российских)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Country=None, RegionCode=None, description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Country = Country
        self.validate_CountryType99(self.Country)
        self.Country_nsprefix_ = None
        self.RegionCode = RegionCode
        self.validate_RegionCodeType100(self.RegionCode)
        self.RegionCode_nsprefix_ = None
        self.description = description
        self.validate_descriptionType101(self.description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgAddressTypeULFLReply)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgAddressTypeULFLReply.subclass:
            return OrgAddressTypeULFLReply.subclass(*args_, **kwargs_)
        else:
            return OrgAddressTypeULFLReply(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_RegionCode(self):
        return self.RegionCode
    def set_RegionCode(self, RegionCode):
        self.RegionCode = RegionCode
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def validate_CountryType99(self, value):
        result = True
        # Validate type CountryType99, a restriction on xs:string.
        pass
        return result
    def validate_RegionCodeType100(self, value):
        result = True
        # Validate type RegionCodeType100, a restriction on xs:string.
        pass
        return result
    def validate_descriptionType101(self, value):
        result = True
        # Validate type descriptionType101, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Country is not None or
            self.RegionCode is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeULFLReply', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgAddressTypeULFLReply')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgAddressTypeULFLReply':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgAddressTypeULFLReply')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgAddressTypeULFLReply', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgAddressTypeULFLReply'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeULFLReply', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.RegionCode is not None:
            namespaceprefix_ = self.RegionCode_nsprefix_ + ':' if (UseCapturedNS_ and self.RegionCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegionCode>%s</%sRegionCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegionCode), input_name='RegionCode')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType99
            self.validate_CountryType99(self.Country)
        elif nodeName_ == 'RegionCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegionCode')
            value_ = self.gds_validate_string(value_, node, 'RegionCode')
            self.RegionCode = value_
            self.RegionCode_nsprefix_ = child_.prefix
            # validate type RegionCodeType100
            self.validate_RegionCodeType100(self.RegionCode)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
            # validate type descriptionType101
            self.validate_descriptionType101(self.description)
# end class OrgAddressTypeULFLReply


class OrgAddressTypeFOTS(GeneratedsSuper):
    """Адрес организации (для иностранных и таможенного союза)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Country=None, description=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Country = Country
        self.validate_CountryType102(self.Country)
        self.Country_nsprefix_ = None
        self.description = description
        self.validate_descriptionType103(self.description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgAddressTypeFOTS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgAddressTypeFOTS.subclass:
            return OrgAddressTypeFOTS.subclass(*args_, **kwargs_)
        else:
            return OrgAddressTypeFOTS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def validate_CountryType102(self, value):
        result = True
        # Validate type CountryType102, a restriction on xs:string.
        pass
        return result
    def validate_descriptionType103(self, value):
        result = True
        # Validate type descriptionType103, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Country is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeFOTS', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgAddressTypeFOTS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgAddressTypeFOTS':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgAddressTypeFOTS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgAddressTypeFOTS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgAddressTypeFOTS'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgAddressTypeFOTS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType102
            self.validate_CountryType102(self.Country)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
            # validate type descriptionType103
            self.validate_descriptionType103(self.description)
# end class OrgAddressTypeFOTS


class ProductsType_v2(GeneratedsSuper):
    """Продукция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType_v2.subclass:
            return ProductsType_v2.subclass(*args_, **kwargs_)
        else:
            return ProductsType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductsType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType_v2


class MarkInfoType15(GeneratedsSuper):
    """Информация о марках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type=None, Ranges=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_TypeEnum(self.Type)
        self.Type_nsprefix_ = None
        self.Ranges = Ranges
        self.Ranges_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkInfoType15)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkInfoType15.subclass:
            return MarkInfoType15.subclass(*args_, **kwargs_)
        else:
            return MarkInfoType15(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Ranges(self):
        return self.Ranges
    def set_Ranges(self, Ranges):
        self.Ranges = Ranges
    def validate_TypeEnum(self, value):
        result = True
        # Validate type TypeEnum, a restriction on ns:Digits3.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type is not None or
            self.Ranges is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='MarkInfoType15', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkInfoType15')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkInfoType15':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkInfoType15')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkInfoType15', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkInfoType15'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='MarkInfoType15', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Ranges is not None:
            namespaceprefix_ = self.Ranges_nsprefix_ + ':' if (UseCapturedNS_ and self.Ranges_nsprefix_) else ''
            self.Ranges.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Ranges', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TypeEnum
            self.validate_TypeEnum(self.Type)
        elif nodeName_ == 'Ranges':
            obj_ = RangesType104.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Ranges = obj_
            obj_.original_tagname_ = 'Ranges'
# end class MarkInfoType15


class ProductInfoTest_v2(GeneratedsSuper):
    """Продукция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Domestic=None, Foreign=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Domestic = Domestic
        self.Domestic_nsprefix_ = None
        self.Foreign = Foreign
        self.Foreign_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfoTest_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfoTest_v2.subclass:
            return ProductInfoTest_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfoTest_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Domestic(self):
        return self.Domestic
    def set_Domestic(self, Domestic):
        self.Domestic = Domestic
    def get_Foreign(self):
        return self.Foreign
    def set_Foreign(self, Foreign):
        self.Foreign = Foreign
    def hasContent_(self):
        if (
            self.Domestic is not None or
            self.Foreign is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductInfoTest_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfoTest_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfoTest_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfoTest_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfoTest_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfoTest_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductInfoTest_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Domestic is not None:
            namespaceprefix_ = self.Domestic_nsprefix_ + ':' if (UseCapturedNS_ and self.Domestic_nsprefix_) else ''
            self.Domestic.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Domestic', pretty_print=pretty_print)
        if self.Foreign is not None:
            namespaceprefix_ = self.Foreign_nsprefix_ + ':' if (UseCapturedNS_ and self.Foreign_nsprefix_) else ''
            self.Foreign.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Foreign', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Domestic':
            obj_ = ProductInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Domestic = obj_
            obj_.original_tagname_ = 'Domestic'
        elif nodeName_ == 'Foreign':
            obj_ = ProductInfoForeign_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Foreign = obj_
            obj_.original_tagname_ = 'Foreign'
# end class ProductInfoTest_v2


class ProductInfo_v2(GeneratedsSuper):
    """Продукция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitType=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, Producer=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType16(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType106(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType107(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType108(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType109(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType110(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfo_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfo_v2.subclass:
            return ProductInfo_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfo_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_WbUnitType16(self, value):
        result = True
        # Validate type WbUnitType16, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType106(self, value):
        result = True
        # Validate type FullNameType106, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType107(self, value):
        result = True
        # Validate type ShortNameType107, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType108(self, value):
        result = True
        # Validate type AlcCodeType108, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType109(self, value):
        result = True
        # Validate type AlcVolumeType109, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType110(self, value):
        result = True
        # Validate type ProductVCodeType110, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.UnitType is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.Producer is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfo_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfo_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfo_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfo_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfo_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfo_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfo_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType16
            self.validate_WbUnitType16(self.UnitType)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType106
            self.validate_FullNameType106(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType107
            self.validate_ShortNameType107(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType108
            self.validate_AlcCodeType108(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType109
            self.validate_AlcVolumeType109(self.AlcVolume)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType110
            self.validate_ProductVCodeType110(self.ProductVCode)
# end class ProductInfo_v2


class ProductInfoReply_v2(GeneratedsSuper):
    """Продукция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitType=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, Producer=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType16(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType111(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType112(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType113(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType114(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType115(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfoReply_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfoReply_v2.subclass:
            return ProductInfoReply_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfoReply_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_WbUnitType16(self, value):
        result = True
        # Validate type WbUnitType16, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType111(self, value):
        result = True
        # Validate type FullNameType111, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType112(self, value):
        result = True
        # Validate type ShortNameType112, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType113(self, value):
        result = True
        # Validate type AlcCodeType113, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType114(self, value):
        result = True
        # Validate type AlcVolumeType114, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType115(self, value):
        result = True
        # Validate type ProductVCodeType115, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.UnitType is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.Producer is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoReply_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfoReply_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfoReply_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfoReply_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfoReply_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfoReply_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoReply_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType16
            self.validate_WbUnitType16(self.UnitType)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType111
            self.validate_FullNameType111(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType112
            self.validate_ShortNameType112(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType113
            self.validate_AlcCodeType113(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType114
            self.validate_AlcVolumeType114(self.AlcVolume)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType115
            self.validate_ProductVCodeType115(self.ProductVCode)
# end class ProductInfoReply_v2


class ProductInfoRus_v2(GeneratedsSuper):
    """Продукция российского происхождения"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitType=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, Producer=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType16(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType116(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType117(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType118(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType119(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType120(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfoRus_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfoRus_v2.subclass:
            return ProductInfoRus_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfoRus_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_WbUnitType16(self, value):
        result = True
        # Validate type WbUnitType16, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType116(self, value):
        result = True
        # Validate type FullNameType116, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType117(self, value):
        result = True
        # Validate type ShortNameType117, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType118(self, value):
        result = True
        # Validate type AlcCodeType118, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType119(self, value):
        result = True
        # Validate type AlcVolumeType119, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType120(self, value):
        result = True
        # Validate type ProductVCodeType120, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.UnitType is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.Producer is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoRus_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfoRus_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfoRus_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfoRus_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfoRus_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfoRus_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoRus_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType16
            self.validate_WbUnitType16(self.UnitType)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType116
            self.validate_FullNameType116(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType117
            self.validate_ShortNameType117(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType118
            self.validate_AlcCodeType118(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType119
            self.validate_AlcVolumeType119(self.AlcVolume)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType120
            self.validate_ProductVCodeType120(self.ProductVCode)
# end class ProductInfoRus_v2


class ProductInfoForeign_v2(GeneratedsSuper):
    """Продукция иностранного происхождения"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitType=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, Producer=None, Importer=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType16(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType121(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType122(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType123(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType124(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Importer = Importer
        self.Importer_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType125(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfoForeign_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfoForeign_v2.subclass:
            return ProductInfoForeign_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfoForeign_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Importer(self):
        return self.Importer
    def set_Importer(self, Importer):
        self.Importer = Importer
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_WbUnitType16(self, value):
        result = True
        # Validate type WbUnitType16, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType121(self, value):
        result = True
        # Validate type FullNameType121, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType122(self, value):
        result = True
        # Validate type ShortNameType122, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType123(self, value):
        result = True
        # Validate type AlcCodeType123, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType124(self, value):
        result = True
        # Validate type AlcVolumeType124, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType125(self, value):
        result = True
        # Validate type ProductVCodeType125, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.UnitType is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.Producer is not None or
            self.Importer is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoForeign_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfoForeign_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfoForeign_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfoForeign_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfoForeign_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfoForeign_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ProductInfoForeign_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Importer is not None:
            namespaceprefix_ = self.Importer_nsprefix_ + ':' if (UseCapturedNS_ and self.Importer_nsprefix_) else ''
            self.Importer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Importer', pretty_print=pretty_print)
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType16
            self.validate_WbUnitType16(self.UnitType)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType121
            self.validate_FullNameType121(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType122
            self.validate_ShortNameType122(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType123
            self.validate_AlcCodeType123(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType124
            self.validate_AlcVolumeType124(self.AlcVolume)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoForeign_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Importer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Importer = obj_
            obj_.original_tagname_ = 'Importer'
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType125
            self.validate_ProductVCodeType125(self.ProductVCode)
# end class ProductInfoForeign_v2


class ProductInfoAsiiu_v2(GeneratedsSuper):
    """Продукция российского происхождения"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, UnitType=None, Type=None, FullName=None, ShortName=None, AlcCode=None, Capacity=None, AlcVolume=None, ProductVCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType16(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType126(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType127(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType128(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.AlcVolume = AlcVolume
        self.validate_AlcVolumeType129(self.AlcVolume)
        self.AlcVolume_nsprefix_ = None
        self.ProductVCode = ProductVCode
        self.validate_ProductVCodeType130(self.ProductVCode)
        self.ProductVCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductInfoAsiiu_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductInfoAsiiu_v2.subclass:
            return ProductInfoAsiiu_v2.subclass(*args_, **kwargs_)
        else:
            return ProductInfoAsiiu_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_AlcVolume(self):
        return self.AlcVolume
    def set_AlcVolume(self, AlcVolume):
        self.AlcVolume = AlcVolume
    def get_ProductVCode(self):
        return self.ProductVCode
    def set_ProductVCode(self, ProductVCode):
        self.ProductVCode = ProductVCode
    def validate_WbUnitType16(self, value):
        result = True
        # Validate type WbUnitType16, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType126(self, value):
        result = True
        # Validate type FullNameType126, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType127(self, value):
        result = True
        # Validate type ShortNameType127, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType128(self, value):
        result = True
        # Validate type AlcCodeType128, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcVolumeType129(self, value):
        result = True
        # Validate type AlcVolumeType129, a restriction on xs:decimal.
        pass
        return result
    def validate_ProductVCodeType130(self, value):
        result = True
        # Validate type ProductVCodeType130, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.UnitType is not None or
            self.Type is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.AlcCode is not None or
            self.Capacity is not None or
            self.AlcVolume is not None or
            self.ProductVCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductInfoAsiiu_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductInfoAsiiu_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductInfoAsiiu_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductInfoAsiiu_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductInfoAsiiu_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ProductInfoAsiiu_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ProductInfoAsiiu_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.AlcVolume is not None:
            namespaceprefix_ = self.AlcVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcVolume>%s</%sAlcVolume>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcVolume, input_name='AlcVolume'), namespaceprefix_ , eol_))
        if self.ProductVCode is not None:
            namespaceprefix_ = self.ProductVCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductVCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductVCode>%s</%sProductVCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductVCode), input_name='ProductVCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType16
            self.validate_WbUnitType16(self.UnitType)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType126
            self.validate_FullNameType126(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType127
            self.validate_ShortNameType127(self.ShortName)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType128
            self.validate_AlcCodeType128(self.AlcCode)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'AlcVolume' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcVolume')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcVolume')
            self.AlcVolume = fval_
            self.AlcVolume_nsprefix_ = child_.prefix
            # validate type AlcVolumeType129
            self.validate_AlcVolumeType129(self.AlcVolume)
        elif nodeName_ == 'ProductVCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductVCode')
            value_ = self.gds_validate_string(value_, node, 'ProductVCode')
            self.ProductVCode = value_
            self.ProductVCode_nsprefix_ = child_.prefix
            # validate type ProductVCodeType130
            self.validate_ProductVCodeType130(self.ProductVCode)
# end class ProductInfoAsiiu_v2


class InformF1Type(GeneratedsSuper):
    """Справка 1 к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegId = RegId
        self.validate_NoEmptyString50(self.RegId)
        self.RegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1Type.subclass:
            return InformF1Type.subclass(*args_, **kwargs_)
        else:
            return InformF1Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegId(self):
        return self.RegId
    def set_RegId(self, RegId):
        self.RegId = RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.RegId is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegId is not None:
            namespaceprefix_ = self.RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegId>%s</%sRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegId), input_name='RegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegId')
            value_ = self.gds_validate_string(value_, node, 'RegId')
            self.RegId = value_
            self.RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformF1Type


class InformF2Type(GeneratedsSuper):
    """Справка 2 к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2Item=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2Item = InformF2Item
        self.InformF2Item_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2Type.subclass:
            return InformF2Type.subclass(*args_, **kwargs_)
        else:
            return InformF2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2Item(self):
        return self.InformF2Item
    def set_InformF2Item(self, InformF2Item):
        self.InformF2Item = InformF2Item
    def hasContent_(self):
        if (
            self.InformF2Item is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF2Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2Item is not None:
            namespaceprefix_ = self.InformF2Item_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2Item_nsprefix_) else ''
            self.InformF2Item.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2Item', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2Item':
            obj_ = InformF2TypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2Item = obj_
            obj_.original_tagname_ = 'InformF2Item'
# end class InformF2Type


class InformF2TypeItem(GeneratedsSuper):
    """Запись в справке 2 к ТТН, Информация о предыдущих отгрузках"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, F2RegId='FIRSTSHIPMENT', MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.F2RegId = F2RegId
        self.validate_NoEmptyString50(self.F2RegId)
        self.F2RegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2TypeItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2TypeItem.subclass:
            return InformF2TypeItem.subclass(*args_, **kwargs_)
        else:
            return InformF2TypeItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_F2RegId(self):
        return self.F2RegId
    def set_F2RegId(self, F2RegId):
        self.F2RegId = F2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.F2RegId != "FIRSTSHIPMENT" or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2TypeItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2TypeItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2TypeItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2TypeItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF2TypeItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.F2RegId is not None:
            namespaceprefix_ = self.F2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.F2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sF2RegId>%s</%sF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.F2RegId), input_name='F2RegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'F2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'F2RegId')
            value_ = self.gds_validate_string(value_, node, 'F2RegId')
            self.F2RegId = value_
            self.F2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.F2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformF2TypeItem


class RepImportedType(GeneratedsSuper):
    """Отчет об импорте продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepImportedType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepImportedType.subclass:
            return RepImportedType.subclass(*args_, **kwargs_)
        else:
            return RepImportedType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepImportedType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepImportedType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepImportedType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepImportedType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepImportedType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RepImportedType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepImportedType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType131.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType134.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class RepImportedType


class PositionType20(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProductCode=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Party=None, Identity=None, Comment1=None, Comment2=None, Comment3=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Comment1 = Comment1
        self.validate_Comment1Type135(self.Comment1)
        self.Comment1_nsprefix_ = None
        self.Comment2 = Comment2
        self.validate_Comment2Type136(self.Comment2)
        self.Comment2_nsprefix_ = None
        self.Comment3 = Comment3
        self.validate_Comment3Type137(self.Comment3)
        self.Comment3_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType20)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType20.subclass:
            return PositionType20.subclass(*args_, **kwargs_)
        else:
            return PositionType20(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Comment1(self):
        return self.Comment1
    def set_Comment1(self, Comment1):
        self.Comment1 = Comment1
    def get_Comment2(self):
        return self.Comment2
    def set_Comment2(self, Comment2):
        self.Comment2 = Comment2
    def get_Comment3(self):
        return self.Comment3
    def set_Comment3(self, Comment3):
        self.Comment3 = Comment3
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_Comment1Type135(self, value):
        result = True
        # Validate type Comment1Type135, a restriction on xs:string.
        pass
        return result
    def validate_Comment2Type136(self, value):
        result = True
        # Validate type Comment2Type136, a restriction on xs:string.
        pass
        return result
    def validate_Comment3Type137(self, value):
        result = True
        # Validate type Comment3Type137, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ProductCode is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Party is not None or
            self.Identity is not None or
            self.Comment1 is not None or
            self.Comment2 is not None or
            self.Comment3 is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType20', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType20')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType20':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType20')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType20', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType20'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType20', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Comment1 is not None:
            namespaceprefix_ = self.Comment1_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment1>%s</%sComment1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment1), input_name='Comment1')), namespaceprefix_ , eol_))
        if self.Comment2 is not None:
            namespaceprefix_ = self.Comment2_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment2>%s</%sComment2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment2), input_name='Comment2')), namespaceprefix_ , eol_))
        if self.Comment3 is not None:
            namespaceprefix_ = self.Comment3_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment3>%s</%sComment3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment3), input_name='Comment3')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Comment1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment1')
            value_ = self.gds_validate_string(value_, node, 'Comment1')
            self.Comment1 = value_
            self.Comment1_nsprefix_ = child_.prefix
            # validate type Comment1Type135
            self.validate_Comment1Type135(self.Comment1)
        elif nodeName_ == 'Comment2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment2')
            value_ = self.gds_validate_string(value_, node, 'Comment2')
            self.Comment2 = value_
            self.Comment2_nsprefix_ = child_.prefix
            # validate type Comment2Type136
            self.validate_Comment2Type136(self.Comment2)
        elif nodeName_ == 'Comment3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment3')
            value_ = self.gds_validate_string(value_, node, 'Comment3')
            self.Comment3 = value_
            self.Comment3_nsprefix_ = child_.prefix
            # validate type Comment3Type137
            self.validate_Comment3Type137(self.Comment3)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class PositionType20


class ReplySSP(GeneratedsSuper):
    """Ответ на запрос о спиртосодержащей продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplySSP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplySSP.subclass:
            return ReplySSP.subclass(*args_, **kwargs_)
        else:
            return ReplySSP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySSP', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplySSP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplySSP':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplySSP')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplySSP', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplySSP'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySSP', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType138.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplySSP


class ReplySpirit(GeneratedsSuper):
    """Ответ на запрос о спиртах"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplySpirit)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplySpirit.subclass:
            return ReplySpirit.subclass(*args_, **kwargs_)
        else:
            return ReplySpirit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySpirit', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplySpirit')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplySpirit':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplySpirit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplySpirit', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplySpirit'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySpirit', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType139.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplySpirit


class ReplyClient(GeneratedsSuper):
    """Ответ на запрос о клиентах"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Clients=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Clients = Clients
        self.Clients_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyClient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyClient.subclass:
            return ReplyClient.subclass(*args_, **kwargs_)
        else:
            return ReplyClient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Clients(self):
        return self.Clients
    def set_Clients(self, Clients):
        self.Clients = Clients
    def hasContent_(self):
        if (
            self.Clients is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyClient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyClient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyClient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyClient')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyClient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyClient'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyClient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Clients is not None:
            namespaceprefix_ = self.Clients_nsprefix_ + ':' if (UseCapturedNS_ and self.Clients_nsprefix_) else ''
            self.Clients.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Clients', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Clients':
            obj_ = ClientsType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Clients = obj_
            obj_.original_tagname_ = 'Clients'
# end class ReplyClient


class ReplyAP(GeneratedsSuper):
    """Ответ на запрос об алкогольной продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyAP)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyAP.subclass:
            return ReplyAP.subclass(*args_, **kwargs_)
        else:
            return ReplyAP(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyAP', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyAP')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyAP':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyAP')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyAP', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyAP'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyAP', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType140.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyAP


class ReplyRests(GeneratedsSuper):
    """Ответ на запрос об остатках по складу"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRests)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRests.subclass:
            return ReplyRests.subclass(*args_, **kwargs_)
        else:
            return ReplyRests(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRests')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRests':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRests')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRests', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRests'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Products':
            obj_ = ProductsType141.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyRests


class StockPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Quantity=None, InformARegId=None, InformBRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.InformARegId = InformARegId
        self.validate_NoEmptyString50(self.InformARegId)
        self.InformARegId_nsprefix_ = None
        self.InformBRegId = InformBRegId
        self.validate_NoEmptyString50(self.InformBRegId)
        self.InformBRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StockPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockPositionType.subclass:
            return StockPositionType.subclass(*args_, **kwargs_)
        else:
            return StockPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformARegId(self):
        return self.InformARegId
    def set_InformARegId(self, InformARegId):
        self.InformARegId = InformARegId
    def get_InformBRegId(self):
        return self.InformBRegId
    def set_InformBRegId(self, InformBRegId):
        self.InformBRegId = InformBRegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Quantity is not None or
            self.InformARegId is not None or
            self.InformBRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StockPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StockPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StockPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StockPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='StockPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformARegId is not None:
            namespaceprefix_ = self.InformARegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformARegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformARegId>%s</%sInformARegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformARegId), input_name='InformARegId')), namespaceprefix_ , eol_))
        if self.InformBRegId is not None:
            namespaceprefix_ = self.InformBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformBRegId>%s</%sInformBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformBRegId), input_name='InformBRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'InformARegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformARegId')
            value_ = self.gds_validate_string(value_, node, 'InformARegId')
            self.InformARegId = value_
            self.InformARegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformARegId)
        elif nodeName_ == 'InformBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformBRegId')
            value_ = self.gds_validate_string(value_, node, 'InformBRegId')
            self.InformBRegId = value_
            self.InformBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformBRegId)
# end class StockPositionType


class ReplyFormA(GeneratedsSuper):
    """Ответ на запрос о форме А"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformARegId=None, TTNNumber=None, TTNDate=None, Shipper=None, Consignee=None, ShippingDate=None, Product=None, BottlingDate=None, Quantity=None, EGAISNumber=None, EGAISDate=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformARegId = InformARegId
        self.validate_NoEmptyString50(self.InformARegId)
        self.InformARegId_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        if isinstance(BottlingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BottlingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BottlingDate
        self.BottlingDate = initvalue_
        self.BottlingDate_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.EGAISNumber = EGAISNumber
        self.validate_NoEmptyString50(self.EGAISNumber)
        self.EGAISNumber_nsprefix_ = None
        if isinstance(EGAISDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISDate
        self.EGAISDate = initvalue_
        self.EGAISDate_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyFormA)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyFormA.subclass:
            return ReplyFormA.subclass(*args_, **kwargs_)
        else:
            return ReplyFormA(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformARegId(self):
        return self.InformARegId
    def set_InformARegId(self, InformARegId):
        self.InformARegId = InformARegId
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_BottlingDate(self):
        return self.BottlingDate
    def set_BottlingDate(self, BottlingDate):
        self.BottlingDate = BottlingDate
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_EGAISNumber(self):
        return self.EGAISNumber
    def set_EGAISNumber(self, EGAISNumber):
        self.EGAISNumber = EGAISNumber
    def get_EGAISDate(self):
        return self.EGAISDate
    def set_EGAISDate(self, EGAISDate):
        self.EGAISDate = EGAISDate
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformARegId is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.ShippingDate is not None or
            self.Product is not None or
            self.BottlingDate is not None or
            self.Quantity is not None or
            self.EGAISNumber is not None or
            self.EGAISDate is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyFormA', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyFormA')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyFormA':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyFormA')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyFormA', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyFormA'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyFormA', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformARegId is not None:
            namespaceprefix_ = self.InformARegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformARegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformARegId>%s</%sInformARegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformARegId), input_name='InformARegId')), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.BottlingDate is not None:
            namespaceprefix_ = self.BottlingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BottlingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottlingDate>%s</%sBottlingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BottlingDate, input_name='BottlingDate'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.EGAISNumber is not None:
            namespaceprefix_ = self.EGAISNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISNumber>%s</%sEGAISNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISNumber), input_name='EGAISNumber')), namespaceprefix_ , eol_))
        if self.EGAISDate is not None:
            namespaceprefix_ = self.EGAISDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISDate>%s</%sEGAISDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISDate, input_name='EGAISDate'), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformARegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformARegId')
            value_ = self.gds_validate_string(value_, node, 'InformARegId')
            self.InformARegId = value_
            self.InformARegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformARegId)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'BottlingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BottlingDate = dval_
            self.BottlingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.BottlingDate)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'EGAISNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISNumber')
            self.EGAISNumber = value_
            self.EGAISNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISNumber)
        elif nodeName_ == 'EGAISDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISDate = dval_
            self.EGAISDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISDate)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class ReplyFormA


class ReplyFormB(GeneratedsSuper):
    """Ответ на запрос о форме Б"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformBRegId=None, TTNNumber=None, TTNDate=None, Shipper=None, Consignee=None, ShippingDate=None, Product=None, Quantity=None, ExciseRate=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformBRegId = InformBRegId
        self.validate_NoEmptyString50(self.InformBRegId)
        self.InformBRegId_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.ExciseRate = ExciseRate
        self.validate_NoNegativeDecimalType(self.ExciseRate)
        self.ExciseRate_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyFormB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyFormB.subclass:
            return ReplyFormB.subclass(*args_, **kwargs_)
        else:
            return ReplyFormB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformBRegId(self):
        return self.InformBRegId
    def set_InformBRegId(self, InformBRegId):
        self.InformBRegId = InformBRegId
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_ExciseRate(self):
        return self.ExciseRate
    def set_ExciseRate(self, ExciseRate):
        self.ExciseRate = ExciseRate
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformBRegId is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.ShippingDate is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.ExciseRate is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyFormB', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyFormB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyFormB':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyFormB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyFormB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyFormB'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyFormB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformBRegId is not None:
            namespaceprefix_ = self.InformBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformBRegId>%s</%sInformBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformBRegId), input_name='InformBRegId')), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.ExciseRate is not None:
            namespaceprefix_ = self.ExciseRate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseRate>%s</%sExciseRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ExciseRate, input_name='ExciseRate'), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformBRegId')
            value_ = self.gds_validate_string(value_, node, 'InformBRegId')
            self.InformBRegId = value_
            self.InformBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformBRegId)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'ExciseRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ExciseRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'ExciseRate')
            self.ExciseRate = fval_
            self.ExciseRate_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.ExciseRate)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class ReplyFormB


class ReplyHistFormB(GeneratedsSuper):
    """Ответ на запрос о движении по форме Б"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformBRegId=None, HistFormBDate=None, HistoryB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformBRegId = InformBRegId
        self.validate_NoEmptyString50(self.InformBRegId)
        self.InformBRegId_nsprefix_ = None
        if isinstance(HistFormBDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(HistFormBDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = HistFormBDate
        self.HistFormBDate = initvalue_
        self.HistFormBDate_nsprefix_ = None
        self.HistoryB = HistoryB
        self.HistoryB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyHistFormB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyHistFormB.subclass:
            return ReplyHistFormB.subclass(*args_, **kwargs_)
        else:
            return ReplyHistFormB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformBRegId(self):
        return self.InformBRegId
    def set_InformBRegId(self, InformBRegId):
        self.InformBRegId = InformBRegId
    def get_HistFormBDate(self):
        return self.HistFormBDate
    def set_HistFormBDate(self, HistFormBDate):
        self.HistFormBDate = HistFormBDate
    def get_HistoryB(self):
        return self.HistoryB
    def set_HistoryB(self, HistoryB):
        self.HistoryB = HistoryB
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformBRegId is not None or
            self.HistFormBDate is not None or
            self.HistoryB is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistFormB', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyHistFormB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyHistFormB':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyHistFormB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyHistFormB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyHistFormB'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistFormB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformBRegId is not None:
            namespaceprefix_ = self.InformBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformBRegId>%s</%sInformBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformBRegId), input_name='InformBRegId')), namespaceprefix_ , eol_))
        if self.HistFormBDate is not None:
            namespaceprefix_ = self.HistFormBDate_nsprefix_ + ':' if (UseCapturedNS_ and self.HistFormBDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistFormBDate>%s</%sHistFormBDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.HistFormBDate, input_name='HistFormBDate'), namespaceprefix_ , eol_))
        if self.HistoryB is not None:
            namespaceprefix_ = self.HistoryB_nsprefix_ + ':' if (UseCapturedNS_ and self.HistoryB_nsprefix_) else ''
            self.HistoryB.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HistoryB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformBRegId')
            value_ = self.gds_validate_string(value_, node, 'InformBRegId')
            self.InformBRegId = value_
            self.InformBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformBRegId)
        elif nodeName_ == 'HistFormBDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.HistFormBDate = dval_
            self.HistFormBDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.HistFormBDate)
        elif nodeName_ == 'HistoryB':
            obj_ = HistoryBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HistoryB = obj_
            obj_.original_tagname_ = 'HistoryB'
# end class ReplyHistFormB


class OperationBType(GeneratedsSuper):
    """Движение товара"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocType=None, DocId=None, Operation=None, Quantity=None, OperDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocType = DocType
        self.DocType_nsprefix_ = None
        self.DocId = DocId
        self.DocId_nsprefix_ = None
        self.Operation = Operation
        self.Operation_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        if isinstance(OperDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OperDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OperDate
        self.OperDate = initvalue_
        self.OperDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OperationBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OperationBType.subclass:
            return OperationBType.subclass(*args_, **kwargs_)
        else:
            return OperationBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocType(self):
        return self.DocType
    def set_DocType(self, DocType):
        self.DocType = DocType
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_Operation(self):
        return self.Operation
    def set_Operation(self, Operation):
        self.Operation = Operation
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_OperDate(self):
        return self.OperDate
    def set_OperDate(self, OperDate):
        self.OperDate = OperDate
    def hasContent_(self):
        if (
            self.DocType is not None or
            self.DocId is not None or
            self.Operation is not None or
            self.Quantity is not None or
            self.OperDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OperationBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OperationBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OperationBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OperationBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OperationBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OperationBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OperationBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocType is not None:
            namespaceprefix_ = self.DocType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocType>%s</%sDocType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocType), input_name='DocType')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.Operation is not None:
            namespaceprefix_ = self.Operation_nsprefix_ + ':' if (UseCapturedNS_ and self.Operation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperation>%s</%sOperation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Operation), input_name='Operation')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.OperDate is not None:
            namespaceprefix_ = self.OperDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OperDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperDate>%s</%sOperDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OperDate, input_name='OperDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocType')
            value_ = self.gds_validate_string(value_, node, 'DocType')
            self.DocType = value_
            self.DocType_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Operation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Operation')
            value_ = self.gds_validate_string(value_, node, 'Operation')
            self.Operation = value_
            self.Operation_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OperDate = dval_
            self.OperDate_nsprefix_ = child_.prefix
# end class OperationBType


class ReplyClientVersion(GeneratedsSuper):
    """Ответ на запрос о клиентах"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, VersionDate=None, Client=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(VersionDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(VersionDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = VersionDate
        self.VersionDate = initvalue_
        self.VersionDate_nsprefix_ = None
        self.Client = Client
        self.Client_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyClientVersion)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyClientVersion.subclass:
            return ReplyClientVersion.subclass(*args_, **kwargs_)
        else:
            return ReplyClientVersion(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_VersionDate(self):
        return self.VersionDate
    def set_VersionDate(self, VersionDate):
        self.VersionDate = VersionDate
    def get_Client(self):
        return self.Client
    def set_Client(self, Client):
        self.Client = Client
    def hasContent_(self):
        if (
            self.VersionDate is not None or
            self.Client is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ReplyClientVersion', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyClientVersion')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyClientVersion':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyClientVersion')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyClientVersion', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyClientVersion'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ReplyClientVersion', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.VersionDate is not None:
            namespaceprefix_ = self.VersionDate_nsprefix_ + ':' if (UseCapturedNS_ and self.VersionDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVersionDate>%s</%sVersionDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.VersionDate, input_name='VersionDate'), namespaceprefix_ , eol_))
        if self.Client is not None:
            namespaceprefix_ = self.Client_nsprefix_ + ':' if (UseCapturedNS_ and self.Client_nsprefix_) else ''
            self.Client.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Client', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'VersionDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.VersionDate = dval_
            self.VersionDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Client':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Client = obj_
            obj_.original_tagname_ = 'Client'
# end class ReplyClientVersion


class QueryRejectRepProduced(GeneratedsSuper):
    """Запрос на распроводку отчета о производстве"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegId = RegId
        self.validate_NoEmptyString50(self.RegId)
        self.RegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryRejectRepProduced)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryRejectRepProduced.subclass:
            return QueryRejectRepProduced.subclass(*args_, **kwargs_)
        else:
            return QueryRejectRepProduced(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegId(self):
        return self.RegId
    def set_RegId(self, RegId):
        self.RegId = RegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.RegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryRejectRepProduced', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryRejectRepProduced')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryRejectRepProduced':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryRejectRepProduced')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryRejectRepProduced', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryRejectRepProduced'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryRejectRepProduced', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegId is not None:
            namespaceprefix_ = self.RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegId>%s</%sRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegId), input_name='RegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegId')
            value_ = self.gds_validate_string(value_, node, 'RegId')
            self.RegId = value_
            self.RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegId)
# end class QueryRejectRepProduced


class QueryRejectRepImported(GeneratedsSuper):
    """Запрос на распроводку отчета о импорте"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.RegId = RegId
        self.validate_NoEmptyString50(self.RegId)
        self.RegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryRejectRepImported)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryRejectRepImported.subclass:
            return QueryRejectRepImported.subclass(*args_, **kwargs_)
        else:
            return QueryRejectRepImported(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RegId(self):
        return self.RegId
    def set_RegId(self, RegId):
        self.RegId = RegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.RegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryRejectRepImported', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryRejectRepImported')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryRejectRepImported':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryRejectRepImported')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryRejectRepImported', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryRejectRepImported'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryRejectRepImported', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RegId is not None:
            namespaceprefix_ = self.RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegId>%s</%sRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegId), input_name='RegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegId')
            value_ = self.gds_validate_string(value_, node, 'RegId')
            self.RegId = value_
            self.RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegId)
# end class QueryRejectRepImported


class ReplySSP_v2(GeneratedsSuper):
    """Ответ на запрос о спиртосодержащей продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplySSP_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplySSP_v2.subclass:
            return ReplySSP_v2.subclass(*args_, **kwargs_)
        else:
            return ReplySSP_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySSP_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplySSP_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplySSP_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplySSP_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplySSP_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplySSP_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySSP_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType142.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplySSP_v2


class ReplySpirit_v2(GeneratedsSuper):
    """Ответ на запрос о спиртах"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplySpirit_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplySpirit_v2.subclass:
            return ReplySpirit_v2.subclass(*args_, **kwargs_)
        else:
            return ReplySpirit_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySpirit_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplySpirit_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplySpirit_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplySpirit_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplySpirit_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplySpirit_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplySpirit_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType143.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplySpirit_v2


class ReplyClient_v2(GeneratedsSuper):
    """Ответ на запрос о клиентах"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Clients=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Clients = Clients
        self.Clients_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyClient_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyClient_v2.subclass:
            return ReplyClient_v2.subclass(*args_, **kwargs_)
        else:
            return ReplyClient_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Clients(self):
        return self.Clients
    def set_Clients(self, Clients):
        self.Clients = Clients
    def hasContent_(self):
        if (
            self.Clients is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyClient_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyClient_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyClient_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyClient_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyClient_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyClient_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyClient_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Clients is not None:
            namespaceprefix_ = self.Clients_nsprefix_ + ':' if (UseCapturedNS_ and self.Clients_nsprefix_) else ''
            self.Clients.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Clients', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Clients':
            obj_ = ClientsType144.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Clients = obj_
            obj_.original_tagname_ = 'Clients'
# end class ReplyClient_v2


class ReplyAP_v2(GeneratedsSuper):
    """Ответ на запрос об алкогольной продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyAP_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyAP_v2.subclass:
            return ReplyAP_v2.subclass(*args_, **kwargs_)
        else:
            return ReplyAP_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def hasContent_(self):
        if (
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyAP_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyAP_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyAP_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyAP_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyAP_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyAP_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ReplyAP_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Products':
            obj_ = ProductsType145.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyAP_v2


class ReplyRests_v2(GeneratedsSuper):
    """Ответ на запрос об остатках по складу"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRests_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRests_v2.subclass:
            return ReplyRests_v2.subclass(*args_, **kwargs_)
        else:
            return ReplyRests_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRests_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRests_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRests_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRests_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRests_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Products':
            obj_ = ProductsType146.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyRests_v2


class StockPositionType21(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Quantity=None, InformF1RegId=None, InformF2RegId=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.InformF1RegId = InformF1RegId
        self.validate_NoEmptyString50(self.InformF1RegId)
        self.InformF1RegId_nsprefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StockPositionType21)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockPositionType21.subclass:
            return StockPositionType21.subclass(*args_, **kwargs_)
        else:
            return StockPositionType21(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformF1RegId(self):
        return self.InformF1RegId
    def set_InformF1RegId(self, InformF1RegId):
        self.InformF1RegId = InformF1RegId
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Quantity is not None or
            self.InformF1RegId is not None or
            self.InformF2RegId is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType21', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StockPositionType21')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StockPositionType21':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StockPositionType21')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StockPositionType21', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='StockPositionType21'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType21', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformF1RegId is not None:
            namespaceprefix_ = self.InformF1RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF1RegId>%s</%sInformF1RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF1RegId), input_name='InformF1RegId')), namespaceprefix_ , eol_))
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'InformF1RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF1RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF1RegId')
            self.InformF1RegId = value_
            self.InformF1RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF1RegId)
        elif nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
# end class StockPositionType21


class ReplyForm1(GeneratedsSuper):
    """Ответ на запрос о форме 1"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF1RegId=None, OriginalClient=None, OriginalDocNumber=None, OriginalDocDate=None, Product=None, BottlingDate=None, Quantity=None, EGAISNumber=None, EGAISDate=None, GTDNUMBER=None, GTDDate=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF1RegId = InformF1RegId
        self.validate_NoEmptyString50(self.InformF1RegId)
        self.InformF1RegId_nsprefix_ = None
        self.OriginalClient = OriginalClient
        self.OriginalClient_nsprefix_ = None
        self.OriginalDocNumber = OriginalDocNumber
        self.validate_NoEmptyString50(self.OriginalDocNumber)
        self.OriginalDocNumber_nsprefix_ = None
        if isinstance(OriginalDocDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OriginalDocDate, '%Y-%m-%d').date()
        else:
            initvalue_ = OriginalDocDate
        self.OriginalDocDate = initvalue_
        self.OriginalDocDate_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        if isinstance(BottlingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BottlingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BottlingDate
        self.BottlingDate = initvalue_
        self.BottlingDate_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.EGAISNumber = EGAISNumber
        self.validate_NoEmptyString50(self.EGAISNumber)
        self.EGAISNumber_nsprefix_ = None
        if isinstance(EGAISDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISDate
        self.EGAISDate = initvalue_
        self.EGAISDate_nsprefix_ = None
        self.GTDNUMBER = GTDNUMBER
        self.validate_NoEmptyString50(self.GTDNUMBER)
        self.GTDNUMBER_nsprefix_ = None
        if isinstance(GTDDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GTDDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GTDDate
        self.GTDDate = initvalue_
        self.GTDDate_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyForm1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyForm1.subclass:
            return ReplyForm1.subclass(*args_, **kwargs_)
        else:
            return ReplyForm1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF1RegId(self):
        return self.InformF1RegId
    def set_InformF1RegId(self, InformF1RegId):
        self.InformF1RegId = InformF1RegId
    def get_OriginalClient(self):
        return self.OriginalClient
    def set_OriginalClient(self, OriginalClient):
        self.OriginalClient = OriginalClient
    def get_OriginalDocNumber(self):
        return self.OriginalDocNumber
    def set_OriginalDocNumber(self, OriginalDocNumber):
        self.OriginalDocNumber = OriginalDocNumber
    def get_OriginalDocDate(self):
        return self.OriginalDocDate
    def set_OriginalDocDate(self, OriginalDocDate):
        self.OriginalDocDate = OriginalDocDate
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_BottlingDate(self):
        return self.BottlingDate
    def set_BottlingDate(self, BottlingDate):
        self.BottlingDate = BottlingDate
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_EGAISNumber(self):
        return self.EGAISNumber
    def set_EGAISNumber(self, EGAISNumber):
        self.EGAISNumber = EGAISNumber
    def get_EGAISDate(self):
        return self.EGAISDate
    def set_EGAISDate(self, EGAISDate):
        self.EGAISDate = EGAISDate
    def get_GTDNUMBER(self):
        return self.GTDNUMBER
    def set_GTDNUMBER(self, GTDNUMBER):
        self.GTDNUMBER = GTDNUMBER
    def get_GTDDate(self):
        return self.GTDDate
    def set_GTDDate(self, GTDDate):
        self.GTDDate = GTDDate
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformF1RegId is not None or
            self.OriginalClient is not None or
            self.OriginalDocNumber is not None or
            self.OriginalDocDate is not None or
            self.Product is not None or
            self.BottlingDate is not None or
            self.Quantity is not None or
            self.EGAISNumber is not None or
            self.EGAISDate is not None or
            self.GTDNUMBER is not None or
            self.GTDDate is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyForm1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyForm1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyForm1':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyForm1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyForm1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyForm1'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyForm1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF1RegId is not None:
            namespaceprefix_ = self.InformF1RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF1RegId>%s</%sInformF1RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF1RegId), input_name='InformF1RegId')), namespaceprefix_ , eol_))
        if self.OriginalClient is not None:
            namespaceprefix_ = self.OriginalClient_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginalClient_nsprefix_) else ''
            self.OriginalClient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OriginalClient', pretty_print=pretty_print)
        if self.OriginalDocNumber is not None:
            namespaceprefix_ = self.OriginalDocNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginalDocNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginalDocNumber>%s</%sOriginalDocNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OriginalDocNumber), input_name='OriginalDocNumber')), namespaceprefix_ , eol_))
        if self.OriginalDocDate is not None:
            namespaceprefix_ = self.OriginalDocDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OriginalDocDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOriginalDocDate>%s</%sOriginalDocDate>%s' % (namespaceprefix_ , self.gds_format_date(self.OriginalDocDate, input_name='OriginalDocDate'), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.BottlingDate is not None:
            namespaceprefix_ = self.BottlingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BottlingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottlingDate>%s</%sBottlingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BottlingDate, input_name='BottlingDate'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.EGAISNumber is not None:
            namespaceprefix_ = self.EGAISNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISNumber>%s</%sEGAISNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISNumber), input_name='EGAISNumber')), namespaceprefix_ , eol_))
        if self.EGAISDate is not None:
            namespaceprefix_ = self.EGAISDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISDate>%s</%sEGAISDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISDate, input_name='EGAISDate'), namespaceprefix_ , eol_))
        if self.GTDNUMBER is not None:
            namespaceprefix_ = self.GTDNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDNUMBER>%s</%sGTDNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GTDNUMBER), input_name='GTDNUMBER')), namespaceprefix_ , eol_))
        if self.GTDDate is not None:
            namespaceprefix_ = self.GTDDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDDate>%s</%sGTDDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GTDDate, input_name='GTDDate'), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF1RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF1RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF1RegId')
            self.InformF1RegId = value_
            self.InformF1RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF1RegId)
        elif nodeName_ == 'OriginalClient':
            obj_ = OrgInfoRusReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OriginalClient = obj_
            obj_.original_tagname_ = 'OriginalClient'
        elif nodeName_ == 'OriginalDocNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OriginalDocNumber')
            value_ = self.gds_validate_string(value_, node, 'OriginalDocNumber')
            self.OriginalDocNumber = value_
            self.OriginalDocNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.OriginalDocNumber)
        elif nodeName_ == 'OriginalDocDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.OriginalDocDate = dval_
            self.OriginalDocDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.OriginalDocDate)
        elif nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'BottlingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BottlingDate = dval_
            self.BottlingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.BottlingDate)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'EGAISNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISNumber')
            self.EGAISNumber = value_
            self.EGAISNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISNumber)
        elif nodeName_ == 'EGAISDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISDate = dval_
            self.EGAISDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISDate)
        elif nodeName_ == 'GTDNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GTDNUMBER')
            value_ = self.gds_validate_string(value_, node, 'GTDNUMBER')
            self.GTDNUMBER = value_
            self.GTDNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.GTDNUMBER)
        elif nodeName_ == 'GTDDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GTDDate = dval_
            self.GTDDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.GTDDate)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class ReplyForm1


class ReplyForm2(GeneratedsSuper):
    """Ответ на запрос о форме 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2RegId=None, TTNNumber=None, TTNDate=None, Shipper=None, Consignee=None, ShippingDate=None, Product=None, Quantity=None, ExciseRate=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.ExciseRate = ExciseRate
        self.validate_NoNegativeDecimalType(self.ExciseRate)
        self.ExciseRate_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyForm2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyForm2.subclass:
            return ReplyForm2.subclass(*args_, **kwargs_)
        else:
            return ReplyForm2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_ExciseRate(self):
        return self.ExciseRate
    def set_ExciseRate(self, ExciseRate):
        self.ExciseRate = ExciseRate
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformF2RegId is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.ShippingDate is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.ExciseRate is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyForm2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyForm2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyForm2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyForm2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyForm2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyForm2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ReplyForm2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.ExciseRate is not None:
            namespaceprefix_ = self.ExciseRate_nsprefix_ + ':' if (UseCapturedNS_ and self.ExciseRate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExciseRate>%s</%sExciseRate>%s' % (namespaceprefix_ , self.gds_format_decimal(self.ExciseRate, input_name='ExciseRate'), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfoRusReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'ExciseRate' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'ExciseRate')
            fval_ = self.gds_validate_decimal(fval_, node, 'ExciseRate')
            self.ExciseRate = fval_
            self.ExciseRate_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.ExciseRate)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class ReplyForm2


class ReplyHistForm2(GeneratedsSuper):
    """Ответ на запрос о движении по форме Б"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2RegId=None, HistForm2Date=None, HistoryF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        if isinstance(HistForm2Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(HistForm2Date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = HistForm2Date
        self.HistForm2Date = initvalue_
        self.HistForm2Date_nsprefix_ = None
        self.HistoryF2 = HistoryF2
        self.HistoryF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyHistForm2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyHistForm2.subclass:
            return ReplyHistForm2.subclass(*args_, **kwargs_)
        else:
            return ReplyHistForm2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_HistForm2Date(self):
        return self.HistForm2Date
    def set_HistForm2Date(self, HistForm2Date):
        self.HistForm2Date = HistForm2Date
    def get_HistoryF2(self):
        return self.HistoryF2
    def set_HistoryF2(self, HistoryF2):
        self.HistoryF2 = HistoryF2
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformF2RegId is not None or
            self.HistForm2Date is not None or
            self.HistoryF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistForm2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyHistForm2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyHistForm2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyHistForm2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyHistForm2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyHistForm2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistForm2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.HistForm2Date is not None:
            namespaceprefix_ = self.HistForm2Date_nsprefix_ + ':' if (UseCapturedNS_ and self.HistForm2Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistForm2Date>%s</%sHistForm2Date>%s' % (namespaceprefix_ , self.gds_format_datetime(self.HistForm2Date, input_name='HistForm2Date'), namespaceprefix_ , eol_))
        if self.HistoryF2 is not None:
            namespaceprefix_ = self.HistoryF2_nsprefix_ + ':' if (UseCapturedNS_ and self.HistoryF2_nsprefix_) else ''
            self.HistoryF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HistoryF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'HistForm2Date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.HistForm2Date = dval_
            self.HistForm2Date_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.HistForm2Date)
        elif nodeName_ == 'HistoryF2':
            obj_ = HistoryF2Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HistoryF2 = obj_
            obj_.original_tagname_ = 'HistoryF2'
# end class ReplyHistForm2


class OperationBType22(GeneratedsSuper):
    """Движение товара"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocType=None, DocId=None, Operation=None, Quantity=None, OperDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocType = DocType
        self.DocType_nsprefix_ = None
        self.DocId = DocId
        self.DocId_nsprefix_ = None
        self.Operation = Operation
        self.Operation_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        if isinstance(OperDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OperDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OperDate
        self.OperDate = initvalue_
        self.OperDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OperationBType22)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OperationBType22.subclass:
            return OperationBType22.subclass(*args_, **kwargs_)
        else:
            return OperationBType22(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocType(self):
        return self.DocType
    def set_DocType(self, DocType):
        self.DocType = DocType
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_Operation(self):
        return self.Operation
    def set_Operation(self, Operation):
        self.Operation = Operation
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_OperDate(self):
        return self.OperDate
    def set_OperDate(self, OperDate):
        self.OperDate = OperDate
    def hasContent_(self):
        if (
            self.DocType is not None or
            self.DocId is not None or
            self.Operation is not None or
            self.Quantity is not None or
            self.OperDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OperationBType22', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OperationBType22')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OperationBType22':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OperationBType22')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OperationBType22', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OperationBType22'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OperationBType22', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocType is not None:
            namespaceprefix_ = self.DocType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocType>%s</%sDocType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocType), input_name='DocType')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.Operation is not None:
            namespaceprefix_ = self.Operation_nsprefix_ + ':' if (UseCapturedNS_ and self.Operation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperation>%s</%sOperation>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Operation), input_name='Operation')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.OperDate is not None:
            namespaceprefix_ = self.OperDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OperDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperDate>%s</%sOperDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OperDate, input_name='OperDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocType')
            value_ = self.gds_validate_string(value_, node, 'DocType')
            self.DocType = value_
            self.DocType_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
        elif nodeName_ == 'Operation':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Operation')
            value_ = self.gds_validate_string(value_, node, 'Operation')
            self.Operation = value_
            self.Operation_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OperDate = dval_
            self.OperDate_nsprefix_ = child_.prefix
# end class OperationBType22


class WayBillType_v2(GeneratedsSuper):
    """Товарно-Транспортная Накладная"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillType_v2.subclass:
            return WayBillType_v2.subclass(*args_, **kwargs_)
        else:
            return WayBillType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType147.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType150.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillType_v2


class PositionType23(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Pack_ID=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Price=None, Party=None, Identity=None, InformF1=None, InformF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Pack_ID = Pack_ID
        self.validate_NoEmptyString50(self.Pack_ID)
        self.Pack_ID_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Price = Price
        self.validate_NoNegativeDecimalType(self.Price)
        self.Price_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF1 = InformF1
        self.InformF1_nsprefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType23)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType23.subclass:
            return PositionType23.subclass(*args_, **kwargs_)
        else:
            return PositionType23(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Pack_ID(self):
        return self.Pack_ID
    def set_Pack_ID(self, Pack_ID):
        self.Pack_ID = Pack_ID
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF1(self):
        return self.InformF1
    def set_InformF1(self, InformF1):
        self.InformF1 = InformF1
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Pack_ID is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Price is not None or
            self.Party is not None or
            self.Identity is not None or
            self.InformF1 is not None or
            self.InformF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType23', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType23')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType23':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType23')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType23', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType23'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType23', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Pack_ID is not None:
            namespaceprefix_ = self.Pack_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.Pack_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPack_ID>%s</%sPack_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Pack_ID), input_name='Pack_ID')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Price is not None:
            namespaceprefix_ = self.Price_nsprefix_ + ':' if (UseCapturedNS_ and self.Price_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF1 is not None:
            namespaceprefix_ = self.InformF1_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1_nsprefix_) else ''
            self.InformF1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1', pretty_print=pretty_print)
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Pack_ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Pack_ID')
            value_ = self.gds_validate_string(value_, node, 'Pack_ID')
            self.Pack_ID = value_
            self.Pack_ID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Pack_ID)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Price')
            fval_ = self.gds_validate_decimal(fval_, node, 'Price')
            self.Price = fval_
            self.Price_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.Price)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF1':
            obj_ = InformF1Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1 = obj_
            obj_.original_tagname_ = 'InformF1'
        elif nodeName_ == 'InformF2':
            obj_ = InformF2Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
# end class PositionType23


class TransportType24(GeneratedsSuper):
    """Транспортный раздел"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TRAN_TYPE=None, TRAN_COMPANY=None, TRAN_CAR=None, TRAN_TRAILER=None, TRAN_CUSTOMER=None, TRAN_DRIVER=None, TRAN_LOADPOINT=None, TRAN_UNLOADPOINT=None, TRAN_REDIRECT=None, TRAN_FORWARDER=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TRAN_TYPE = TRAN_TYPE
        self.validate_TRAN_TYPEType151(self.TRAN_TYPE)
        self.TRAN_TYPE_nsprefix_ = None
        self.TRAN_COMPANY = TRAN_COMPANY
        self.validate_TRAN_COMPANYType152(self.TRAN_COMPANY)
        self.TRAN_COMPANY_nsprefix_ = None
        self.TRAN_CAR = TRAN_CAR
        self.validate_TRAN_CARType153(self.TRAN_CAR)
        self.TRAN_CAR_nsprefix_ = None
        self.TRAN_TRAILER = TRAN_TRAILER
        self.validate_TRAN_TRAILERType154(self.TRAN_TRAILER)
        self.TRAN_TRAILER_nsprefix_ = None
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
        self.validate_TRAN_CUSTOMERType155(self.TRAN_CUSTOMER)
        self.TRAN_CUSTOMER_nsprefix_ = None
        self.TRAN_DRIVER = TRAN_DRIVER
        self.validate_TRAN_DRIVERType156(self.TRAN_DRIVER)
        self.TRAN_DRIVER_nsprefix_ = None
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
        self.validate_TRAN_LOADPOINTType157(self.TRAN_LOADPOINT)
        self.TRAN_LOADPOINT_nsprefix_ = None
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
        self.validate_TRAN_UNLOADPOINTType158(self.TRAN_UNLOADPOINT)
        self.TRAN_UNLOADPOINT_nsprefix_ = None
        self.TRAN_REDIRECT = TRAN_REDIRECT
        self.validate_TRAN_REDIRECTType159(self.TRAN_REDIRECT)
        self.TRAN_REDIRECT_nsprefix_ = None
        self.TRAN_FORWARDER = TRAN_FORWARDER
        self.validate_TRAN_FORWARDERType160(self.TRAN_FORWARDER)
        self.TRAN_FORWARDER_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportType24)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportType24.subclass:
            return TransportType24.subclass(*args_, **kwargs_)
        else:
            return TransportType24(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TRAN_TYPE(self):
        return self.TRAN_TYPE
    def set_TRAN_TYPE(self, TRAN_TYPE):
        self.TRAN_TYPE = TRAN_TYPE
    def get_TRAN_COMPANY(self):
        return self.TRAN_COMPANY
    def set_TRAN_COMPANY(self, TRAN_COMPANY):
        self.TRAN_COMPANY = TRAN_COMPANY
    def get_TRAN_CAR(self):
        return self.TRAN_CAR
    def set_TRAN_CAR(self, TRAN_CAR):
        self.TRAN_CAR = TRAN_CAR
    def get_TRAN_TRAILER(self):
        return self.TRAN_TRAILER
    def set_TRAN_TRAILER(self, TRAN_TRAILER):
        self.TRAN_TRAILER = TRAN_TRAILER
    def get_TRAN_CUSTOMER(self):
        return self.TRAN_CUSTOMER
    def set_TRAN_CUSTOMER(self, TRAN_CUSTOMER):
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
    def get_TRAN_DRIVER(self):
        return self.TRAN_DRIVER
    def set_TRAN_DRIVER(self, TRAN_DRIVER):
        self.TRAN_DRIVER = TRAN_DRIVER
    def get_TRAN_LOADPOINT(self):
        return self.TRAN_LOADPOINT
    def set_TRAN_LOADPOINT(self, TRAN_LOADPOINT):
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
    def get_TRAN_UNLOADPOINT(self):
        return self.TRAN_UNLOADPOINT
    def set_TRAN_UNLOADPOINT(self, TRAN_UNLOADPOINT):
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
    def get_TRAN_REDIRECT(self):
        return self.TRAN_REDIRECT
    def set_TRAN_REDIRECT(self, TRAN_REDIRECT):
        self.TRAN_REDIRECT = TRAN_REDIRECT
    def get_TRAN_FORWARDER(self):
        return self.TRAN_FORWARDER
    def set_TRAN_FORWARDER(self, TRAN_FORWARDER):
        self.TRAN_FORWARDER = TRAN_FORWARDER
    def validate_TRAN_TYPEType151(self, value):
        result = True
        # Validate type TRAN_TYPEType151, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_COMPANYType152(self, value):
        result = True
        # Validate type TRAN_COMPANYType152, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CARType153(self, value):
        result = True
        # Validate type TRAN_CARType153, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_TRAILERType154(self, value):
        result = True
        # Validate type TRAN_TRAILERType154, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CUSTOMERType155(self, value):
        result = True
        # Validate type TRAN_CUSTOMERType155, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_DRIVERType156(self, value):
        result = True
        # Validate type TRAN_DRIVERType156, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_LOADPOINTType157(self, value):
        result = True
        # Validate type TRAN_LOADPOINTType157, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_UNLOADPOINTType158(self, value):
        result = True
        # Validate type TRAN_UNLOADPOINTType158, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_REDIRECTType159(self, value):
        result = True
        # Validate type TRAN_REDIRECTType159, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_FORWARDERType160(self, value):
        result = True
        # Validate type TRAN_FORWARDERType160, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.TRAN_TYPE is not None or
            self.TRAN_COMPANY is not None or
            self.TRAN_CAR is not None or
            self.TRAN_TRAILER is not None or
            self.TRAN_CUSTOMER is not None or
            self.TRAN_DRIVER is not None or
            self.TRAN_LOADPOINT is not None or
            self.TRAN_UNLOADPOINT is not None or
            self.TRAN_REDIRECT is not None or
            self.TRAN_FORWARDER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType24', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportType24')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportType24':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportType24')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportType24', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransportType24'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType24', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TRAN_TYPE is not None:
            namespaceprefix_ = self.TRAN_TYPE_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TYPE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TYPE>%s</%sTRAN_TYPE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TYPE), input_name='TRAN_TYPE')), namespaceprefix_ , eol_))
        if self.TRAN_COMPANY is not None:
            namespaceprefix_ = self.TRAN_COMPANY_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_COMPANY_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_COMPANY>%s</%sTRAN_COMPANY>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_COMPANY), input_name='TRAN_COMPANY')), namespaceprefix_ , eol_))
        if self.TRAN_CAR is not None:
            namespaceprefix_ = self.TRAN_CAR_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CAR_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CAR>%s</%sTRAN_CAR>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CAR), input_name='TRAN_CAR')), namespaceprefix_ , eol_))
        if self.TRAN_TRAILER is not None:
            namespaceprefix_ = self.TRAN_TRAILER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TRAILER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TRAILER>%s</%sTRAN_TRAILER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TRAILER), input_name='TRAN_TRAILER')), namespaceprefix_ , eol_))
        if self.TRAN_CUSTOMER is not None:
            namespaceprefix_ = self.TRAN_CUSTOMER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CUSTOMER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CUSTOMER>%s</%sTRAN_CUSTOMER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CUSTOMER), input_name='TRAN_CUSTOMER')), namespaceprefix_ , eol_))
        if self.TRAN_DRIVER is not None:
            namespaceprefix_ = self.TRAN_DRIVER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_DRIVER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_DRIVER>%s</%sTRAN_DRIVER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_DRIVER), input_name='TRAN_DRIVER')), namespaceprefix_ , eol_))
        if self.TRAN_LOADPOINT is not None:
            namespaceprefix_ = self.TRAN_LOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_LOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_LOADPOINT>%s</%sTRAN_LOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_LOADPOINT), input_name='TRAN_LOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_UNLOADPOINT is not None:
            namespaceprefix_ = self.TRAN_UNLOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_UNLOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_UNLOADPOINT>%s</%sTRAN_UNLOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_UNLOADPOINT), input_name='TRAN_UNLOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_REDIRECT is not None:
            namespaceprefix_ = self.TRAN_REDIRECT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_REDIRECT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_REDIRECT>%s</%sTRAN_REDIRECT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_REDIRECT), input_name='TRAN_REDIRECT')), namespaceprefix_ , eol_))
        if self.TRAN_FORWARDER is not None:
            namespaceprefix_ = self.TRAN_FORWARDER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_FORWARDER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_FORWARDER>%s</%sTRAN_FORWARDER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_FORWARDER), input_name='TRAN_FORWARDER')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TRAN_TYPE':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TYPE')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TYPE')
            self.TRAN_TYPE = value_
            self.TRAN_TYPE_nsprefix_ = child_.prefix
            # validate type TRAN_TYPEType151
            self.validate_TRAN_TYPEType151(self.TRAN_TYPE)
        elif nodeName_ == 'TRAN_COMPANY':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_COMPANY')
            value_ = self.gds_validate_string(value_, node, 'TRAN_COMPANY')
            self.TRAN_COMPANY = value_
            self.TRAN_COMPANY_nsprefix_ = child_.prefix
            # validate type TRAN_COMPANYType152
            self.validate_TRAN_COMPANYType152(self.TRAN_COMPANY)
        elif nodeName_ == 'TRAN_CAR':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CAR')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CAR')
            self.TRAN_CAR = value_
            self.TRAN_CAR_nsprefix_ = child_.prefix
            # validate type TRAN_CARType153
            self.validate_TRAN_CARType153(self.TRAN_CAR)
        elif nodeName_ == 'TRAN_TRAILER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TRAILER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TRAILER')
            self.TRAN_TRAILER = value_
            self.TRAN_TRAILER_nsprefix_ = child_.prefix
            # validate type TRAN_TRAILERType154
            self.validate_TRAN_TRAILERType154(self.TRAN_TRAILER)
        elif nodeName_ == 'TRAN_CUSTOMER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CUSTOMER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CUSTOMER')
            self.TRAN_CUSTOMER = value_
            self.TRAN_CUSTOMER_nsprefix_ = child_.prefix
            # validate type TRAN_CUSTOMERType155
            self.validate_TRAN_CUSTOMERType155(self.TRAN_CUSTOMER)
        elif nodeName_ == 'TRAN_DRIVER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_DRIVER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_DRIVER')
            self.TRAN_DRIVER = value_
            self.TRAN_DRIVER_nsprefix_ = child_.prefix
            # validate type TRAN_DRIVERType156
            self.validate_TRAN_DRIVERType156(self.TRAN_DRIVER)
        elif nodeName_ == 'TRAN_LOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_LOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_LOADPOINT')
            self.TRAN_LOADPOINT = value_
            self.TRAN_LOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_LOADPOINTType157
            self.validate_TRAN_LOADPOINTType157(self.TRAN_LOADPOINT)
        elif nodeName_ == 'TRAN_UNLOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_UNLOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_UNLOADPOINT')
            self.TRAN_UNLOADPOINT = value_
            self.TRAN_UNLOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_UNLOADPOINTType158
            self.validate_TRAN_UNLOADPOINTType158(self.TRAN_UNLOADPOINT)
        elif nodeName_ == 'TRAN_REDIRECT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_REDIRECT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_REDIRECT')
            self.TRAN_REDIRECT = value_
            self.TRAN_REDIRECT_nsprefix_ = child_.prefix
            # validate type TRAN_REDIRECTType159
            self.validate_TRAN_REDIRECTType159(self.TRAN_REDIRECT)
        elif nodeName_ == 'TRAN_FORWARDER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_FORWARDER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_FORWARDER')
            self.TRAN_FORWARDER = value_
            self.TRAN_FORWARDER_nsprefix_ = child_.prefix
            # validate type TRAN_FORWARDERType160
            self.validate_TRAN_FORWARDERType160(self.TRAN_FORWARDER)
# end class TransportType24


class WayBillActType_v2(GeneratedsSuper):
    """Акт разногласий для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillActType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillActType_v2.subclass:
            return WayBillActType_v2.subclass(*args_, **kwargs_)
        else:
            return WayBillActType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillActType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillActType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillActType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillActType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillActType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType161.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType163.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillActType_v2


class PositionType27(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformF2RegId=None, RealQuantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        self.RealQuantity = RealQuantity
        self.validate_NoNegativeDecimalType(self.RealQuantity)
        self.RealQuantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType27)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType27.subclass:
            return PositionType27.subclass(*args_, **kwargs_)
        else:
            return PositionType27(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_RealQuantity(self):
        return self.RealQuantity
    def set_RealQuantity(self, RealQuantity):
        self.RealQuantity = RealQuantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformF2RegId is not None or
            self.RealQuantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType27', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType27')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType27':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType27')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType27', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType27'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType27', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.RealQuantity is not None:
            namespaceprefix_ = self.RealQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.RealQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealQuantity>%s</%sRealQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RealQuantity, input_name='RealQuantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'RealQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RealQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'RealQuantity')
            self.RealQuantity = fval_
            self.RealQuantity_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.RealQuantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
# end class PositionType27


class ActChargeOnType_v2(GeneratedsSuper):
    """Акт постановки на баланс"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnType_v2.subclass:
            return ActChargeOnType_v2.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType164.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType166.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActChargeOnType_v2


class ActChargeOnPositionType29(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Product=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, InformF1F2=None, MarkCodeInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.InformF1F2 = InformF1F2
        self.InformF1F2_nsprefix_ = None
        self.MarkCodeInfo = MarkCodeInfo
        self.MarkCodeInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnPositionType29)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnPositionType29.subclass:
            return ActChargeOnPositionType29.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnPositionType29(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_InformF1F2(self):
        return self.InformF1F2
    def set_InformF1F2(self, InformF1F2):
        self.InformF1F2 = InformF1F2
    def get_MarkCodeInfo(self):
        return self.MarkCodeInfo
    def set_MarkCodeInfo(self, MarkCodeInfo):
        self.MarkCodeInfo = MarkCodeInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.InformF1F2 is not None or
            self.MarkCodeInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActChargeOnPositionType29', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnPositionType29')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnPositionType29':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnPositionType29')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnPositionType29', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnPositionType29'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActChargeOnPositionType29', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.InformF1F2 is not None:
            namespaceprefix_ = self.InformF1F2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1F2_nsprefix_) else ''
            self.InformF1F2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1F2', pretty_print=pretty_print)
        if self.MarkCodeInfo is not None:
            namespaceprefix_ = self.MarkCodeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCodeInfo_nsprefix_) else ''
            self.MarkCodeInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkCodeInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'InformF1F2':
            obj_ = InformF1F2Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1F2 = obj_
            obj_.original_tagname_ = 'InformF1F2'
        elif nodeName_ == 'MarkCodeInfo':
            obj_ = MarkCodeInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkCodeInfo = obj_
            obj_.original_tagname_ = 'MarkCodeInfo'
# end class ActChargeOnPositionType29


class InformF1F2RegType(GeneratedsSuper):
    """Справки 1 и 2 документы"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF1=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF1 = InformF1
        self.InformF1_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1F2RegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1F2RegType.subclass:
            return InformF1F2RegType.subclass(*args_, **kwargs_)
        else:
            return InformF1F2RegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF1(self):
        return self.InformF1
    def set_InformF1(self, InformF1):
        self.InformF1 = InformF1
    def hasContent_(self):
        if (
            self.InformF1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformF1F2RegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1F2RegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1F2RegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1F2RegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1F2RegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1F2RegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformF1F2RegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF1 is not None:
            namespaceprefix_ = self.InformF1_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1_nsprefix_) else ''
            self.InformF1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF1':
            obj_ = InformF1RegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1 = obj_
            obj_.original_tagname_ = 'InformF1'
# end class InformF1F2RegType


class InformF2TypeRegItem(GeneratedsSuper):
    """Запись в справке 2 к ТТН, Информация о отгрузке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, TTNNumber=None, TTNDate=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2TypeRegItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2TypeRegItem.subclass:
            return InformF2TypeRegItem.subclass(*args_, **kwargs_)
        else:
            return InformF2TypeRegItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeRegItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2TypeRegItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2TypeRegItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2TypeRegItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2TypeRegItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF2TypeRegItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2TypeRegItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
# end class InformF2TypeRegItem


class InformF1RegType(GeneratedsSuper):
    """Справка А к ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Quantity=None, BottlingDate=None, TTNNumber=None, TTNDate=None, EGAISFixNumber=None, EGAISFixDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        if isinstance(BottlingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BottlingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BottlingDate
        self.BottlingDate = initvalue_
        self.BottlingDate_nsprefix_ = None
        self.TTNNumber = TTNNumber
        self.validate_NoEmptyString50(self.TTNNumber)
        self.TTNNumber_nsprefix_ = None
        if isinstance(TTNDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TTNDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TTNDate
        self.TTNDate = initvalue_
        self.TTNDate_nsprefix_ = None
        self.EGAISFixNumber = EGAISFixNumber
        self.validate_NoEmptyString50(self.EGAISFixNumber)
        self.EGAISFixNumber_nsprefix_ = None
        if isinstance(EGAISFixDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISFixDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISFixDate
        self.EGAISFixDate = initvalue_
        self.EGAISFixDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1RegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1RegType.subclass:
            return InformF1RegType.subclass(*args_, **kwargs_)
        else:
            return InformF1RegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_BottlingDate(self):
        return self.BottlingDate
    def set_BottlingDate(self, BottlingDate):
        self.BottlingDate = BottlingDate
    def get_TTNNumber(self):
        return self.TTNNumber
    def set_TTNNumber(self, TTNNumber):
        self.TTNNumber = TTNNumber
    def get_TTNDate(self):
        return self.TTNDate
    def set_TTNDate(self, TTNDate):
        self.TTNDate = TTNDate
    def get_EGAISFixNumber(self):
        return self.EGAISFixNumber
    def set_EGAISFixNumber(self, EGAISFixNumber):
        self.EGAISFixNumber = EGAISFixNumber
    def get_EGAISFixDate(self):
        return self.EGAISFixDate
    def set_EGAISFixDate(self, EGAISFixDate):
        self.EGAISFixDate = EGAISFixDate
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Quantity is not None or
            self.BottlingDate is not None or
            self.TTNNumber is not None or
            self.TTNDate is not None or
            self.EGAISFixNumber is not None or
            self.EGAISFixDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1RegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1RegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1RegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1RegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1RegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1RegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1RegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.BottlingDate is not None:
            namespaceprefix_ = self.BottlingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BottlingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottlingDate>%s</%sBottlingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BottlingDate, input_name='BottlingDate'), namespaceprefix_ , eol_))
        if self.TTNNumber is not None:
            namespaceprefix_ = self.TTNNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNNumber>%s</%sTTNNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TTNNumber), input_name='TTNNumber')), namespaceprefix_ , eol_))
        if self.TTNDate is not None:
            namespaceprefix_ = self.TTNDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TTNDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTTNDate>%s</%sTTNDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TTNDate, input_name='TTNDate'), namespaceprefix_ , eol_))
        if self.EGAISFixNumber is not None:
            namespaceprefix_ = self.EGAISFixNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixNumber>%s</%sEGAISFixNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISFixNumber), input_name='EGAISFixNumber')), namespaceprefix_ , eol_))
        if self.EGAISFixDate is not None:
            namespaceprefix_ = self.EGAISFixDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixDate>%s</%sEGAISFixDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISFixDate, input_name='EGAISFixDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'BottlingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BottlingDate = dval_
            self.BottlingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.BottlingDate)
        elif nodeName_ == 'TTNNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TTNNumber')
            value_ = self.gds_validate_string(value_, node, 'TTNNumber')
            self.TTNNumber = value_
            self.TTNNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TTNNumber)
        elif nodeName_ == 'TTNDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TTNDate = dval_
            self.TTNDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TTNDate)
        elif nodeName_ == 'EGAISFixNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISFixNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISFixNumber')
            self.EGAISFixNumber = value_
            self.EGAISFixNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISFixNumber)
        elif nodeName_ == 'EGAISFixDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISFixDate = dval_
            self.EGAISFixDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISFixDate)
# end class InformF1RegType


class ActInventoryInformF2Reg(GeneratedsSuper):
    """Квитанция о регистрации по акту инвентаризации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActInventoryInformF2Reg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActInventoryInformF2Reg.subclass:
            return ActInventoryInformF2Reg.subclass(*args_, **kwargs_)
        else:
            return ActInventoryInformF2Reg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ActInventoryInformF2Reg', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActInventoryInformF2Reg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActInventoryInformF2Reg':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActInventoryInformF2Reg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActInventoryInformF2Reg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActInventoryInformF2Reg'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ActInventoryInformF2Reg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType167.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType168.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActInventoryInformF2Reg


class InformInvPositionType30(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformF1RegId=None, InformF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF1RegId = InformF1RegId
        self.validate_NoEmptyString50(self.InformF1RegId)
        self.InformF1RegId_nsprefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformInvPositionType30)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformInvPositionType30.subclass:
            return InformInvPositionType30.subclass(*args_, **kwargs_)
        else:
            return InformInvPositionType30(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF1RegId(self):
        return self.InformF1RegId
    def set_InformF1RegId(self, InformF1RegId):
        self.InformF1RegId = InformF1RegId
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformF1RegId is not None or
            self.InformF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvPositionType30', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformInvPositionType30')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformInvPositionType30':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformInvPositionType30')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformInvPositionType30', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformInvPositionType30'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvPositionType30', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF1RegId is not None:
            namespaceprefix_ = self.InformF1RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF1RegId>%s</%sInformF1RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF1RegId), input_name='InformF1RegId')), namespaceprefix_ , eol_))
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF1RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF1RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF1RegId')
            self.InformF1RegId = value_
            self.InformF1RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF1RegId)
        elif nodeName_ == 'InformF2':
            obj_ = InformF2Type169.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
# end class InformInvPositionType30


class InformInvF2RegItem(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, F2RegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.F2RegId = F2RegId
        self.validate_NoEmptyString50(self.F2RegId)
        self.F2RegId_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformInvF2RegItem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformInvF2RegItem.subclass:
            return InformInvF2RegItem.subclass(*args_, **kwargs_)
        else:
            return InformInvF2RegItem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_F2RegId(self):
        return self.F2RegId
    def set_F2RegId(self, F2RegId):
        self.F2RegId = F2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.F2RegId is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvF2RegItem', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformInvF2RegItem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformInvF2RegItem':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformInvF2RegItem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformInvF2RegItem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformInvF2RegItem'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformInvF2RegItem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.F2RegId is not None:
            namespaceprefix_ = self.F2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.F2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sF2RegId>%s</%sF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.F2RegId), input_name='F2RegId')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'F2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'F2RegId')
            value_ = self.gds_validate_string(value_, node, 'F2RegId')
            self.F2RegId = value_
            self.F2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.F2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = MarkInfoType15.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class InformInvF2RegItem


class QueryFormF1F2(GeneratedsSuper):
    """Запрос на информацию по Форме 1, 2 для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FormRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FormRegId = FormRegId
        self.validate_NoEmptyString50(self.FormRegId)
        self.FormRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryFormF1F2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryFormF1F2.subclass:
            return QueryFormF1F2.subclass(*args_, **kwargs_)
        else:
            return QueryFormF1F2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FormRegId(self):
        return self.FormRegId
    def set_FormRegId(self, FormRegId):
        self.FormRegId = FormRegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.FormRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryFormF1F2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryFormF1F2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryFormF1F2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryFormF1F2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryFormF1F2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryFormF1F2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryFormF1F2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FormRegId is not None:
            namespaceprefix_ = self.FormRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.FormRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFormRegId>%s</%sFormRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FormRegId), input_name='FormRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FormRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FormRegId')
            value_ = self.gds_validate_string(value_, node, 'FormRegId')
            self.FormRegId = value_
            self.FormRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.FormRegId)
# end class QueryFormF1F2


class WayBillInformF2RegType(GeneratedsSuper):
    """Квитанция о регистрации справок 2 для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillInformF2RegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillInformF2RegType.subclass:
            return WayBillInformF2RegType.subclass(*args_, **kwargs_)
        else:
            return WayBillInformF2RegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='WayBillInformF2RegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillInformF2RegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillInformF2RegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillInformF2RegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillInformF2RegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillInformF2RegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='WayBillInformF2RegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType170.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType171.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillInformF2RegType


class InformF2PositionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformF2RegId=None, BottlingDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        if isinstance(BottlingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(BottlingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = BottlingDate
        self.BottlingDate = initvalue_
        self.BottlingDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2PositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2PositionType.subclass:
            return InformF2PositionType.subclass(*args_, **kwargs_)
        else:
            return InformF2PositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_BottlingDate(self):
        return self.BottlingDate
    def set_BottlingDate(self, BottlingDate):
        self.BottlingDate = BottlingDate
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformF2RegId is not None or
            self.BottlingDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2PositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2PositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2PositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2PositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2PositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF2PositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF2PositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.BottlingDate is not None:
            namespaceprefix_ = self.BottlingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.BottlingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottlingDate>%s</%sBottlingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.BottlingDate, input_name='BottlingDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'BottlingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.BottlingDate = dval_
            self.BottlingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.BottlingDate)
# end class InformF2PositionType


class ActWriteOffType_v2(GeneratedsSuper):
    """Акт списания"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffType_v2.subclass:
            return ActWriteOffType_v2.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType172.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType174.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActWriteOffType_v2


class ActWriteOffPositionType31(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Quantity=None, InformF1F2=None, MarkCodeInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformF1F2 = InformF1F2
        self.InformF1F2_nsprefix_ = None
        self.MarkCodeInfo = MarkCodeInfo
        self.MarkCodeInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffPositionType31)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffPositionType31.subclass:
            return ActWriteOffPositionType31.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffPositionType31(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformF1F2(self):
        return self.InformF1F2
    def set_InformF1F2(self, InformF1F2):
        self.InformF1F2 = InformF1F2
    def get_MarkCodeInfo(self):
        return self.MarkCodeInfo
    def set_MarkCodeInfo(self, MarkCodeInfo):
        self.MarkCodeInfo = MarkCodeInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Quantity is not None or
            self.InformF1F2 is not None or
            self.MarkCodeInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActWriteOffPositionType31', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffPositionType31')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffPositionType31':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffPositionType31')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffPositionType31', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffPositionType31'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActWriteOffPositionType31', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformF1F2 is not None:
            namespaceprefix_ = self.InformF1F2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1F2_nsprefix_) else ''
            self.InformF1F2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1F2', pretty_print=pretty_print)
        if self.MarkCodeInfo is not None:
            namespaceprefix_ = self.MarkCodeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCodeInfo_nsprefix_) else ''
            self.MarkCodeInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkCodeInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformF1F2':
            obj_ = InformF1F2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1F2 = obj_
            obj_.original_tagname_ = 'InformF1F2'
        elif nodeName_ == 'MarkCodeInfo':
            obj_ = MarkCodeInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkCodeInfo = obj_
            obj_.original_tagname_ = 'MarkCodeInfo'
# end class ActWriteOffPositionType31


class InformF1F2(GeneratedsSuper):
    """Должна быть указанана или форма 1 или форма 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2=None, InformF1=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
        self.InformF1 = InformF1
        self.InformF1_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1F2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1F2.subclass:
            return InformF1F2.subclass(*args_, **kwargs_)
        else:
            return InformF1F2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def get_InformF1(self):
        return self.InformF1
    def set_InformF1(self, InformF1):
        self.InformF1 = InformF1
    def hasContent_(self):
        if (
            self.InformF2 is not None or
            self.InformF1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformF1F2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1F2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1F2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1F2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1F2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1F2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformF1F2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
        if self.InformF1 is not None:
            namespaceprefix_ = self.InformF1_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1_nsprefix_) else ''
            self.InformF1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2':
            obj_ = InformF2TypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
        elif nodeName_ == 'InformF1':
            obj_ = InformF1Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1 = obj_
            obj_.original_tagname_ = 'InformF1'
# end class InformF1F2


class TransferFromShopType(GeneratedsSuper):
    """Передача продукции из торгового зала на склад"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransferFromShopType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransferFromShopType.subclass:
            return TransferFromShopType.subclass(*args_, **kwargs_)
        else:
            return TransferFromShopType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TransferFromShopType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransferFromShopType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransferFromShopType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransferFromShopType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransferFromShopType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransferFromShopType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TransferFromShopType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType175.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType177.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class TransferFromShopType


class TransferFromShopPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ProductCode=None, Quantity=None, InformF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransferFromShopPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransferFromShopPositionType.subclass:
            return TransferFromShopPositionType.subclass(*args_, **kwargs_)
        else:
            return TransferFromShopPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ProductCode is not None or
            self.Quantity is not None or
            self.InformF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='TransferFromShopPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransferFromShopPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransferFromShopPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransferFromShopPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransferFromShopPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransferFromShopPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='TransferFromShopPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformF2':
            obj_ = InformF2TypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
# end class TransferFromShopPositionType


class TransferToShopType(GeneratedsSuper):
    """Передача продукции в торговый зал"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransferToShopType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransferToShopType.subclass:
            return TransferToShopType.subclass(*args_, **kwargs_)
        else:
            return TransferToShopType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TransferToShopType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransferToShopType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransferToShopType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransferToShopType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransferToShopType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransferToShopType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='TransferToShopType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType178.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType180.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class TransferToShopType


class TransferToShopPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ProductCode=None, Quantity=None, InformF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransferToShopPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransferToShopPositionType.subclass:
            return TransferToShopPositionType.subclass(*args_, **kwargs_)
        else:
            return TransferToShopPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ProductCode is not None or
            self.Quantity is not None or
            self.InformF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='TransferToShopPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransferToShopPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransferToShopPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransferToShopPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransferToShopPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransferToShopPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='TransferToShopPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'InformF2':
            obj_ = InformF2TypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
# end class TransferToShopPositionType


class RepPIInformF1RegType(GeneratedsSuper):
    """Квитанция о регистрации справок 1 для Отчета о производстве/импорте
    продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepPIInformF1RegType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepPIInformF1RegType.subclass:
            return RepPIInformF1RegType.subclass(*args_, **kwargs_)
        else:
            return RepPIInformF1RegType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RepPIInformF1RegType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepPIInformF1RegType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepPIInformF1RegType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepPIInformF1RegType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepPIInformF1RegType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RepPIInformF1RegType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RepPIInformF1RegType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType181.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType182.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class RepPIInformF1RegType


class InformF1PositionType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformF1RegId=None, InformF2RegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF1RegId = InformF1RegId
        self.validate_NoEmptyString50(self.InformF1RegId)
        self.InformF1RegId_nsprefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1PositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1PositionType.subclass:
            return InformF1PositionType.subclass(*args_, **kwargs_)
        else:
            return InformF1PositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF1RegId(self):
        return self.InformF1RegId
    def set_InformF1RegId(self, InformF1RegId):
        self.InformF1RegId = InformF1RegId
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformF1RegId is not None or
            self.InformF2RegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1PositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1PositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1PositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1PositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1PositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1PositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformF1PositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF1RegId is not None:
            namespaceprefix_ = self.InformF1RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF1RegId>%s</%sInformF1RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF1RegId), input_name='InformF1RegId')), namespaceprefix_ , eol_))
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF1RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF1RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF1RegId')
            self.InformF1RegId = value_
            self.InformF1RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF1RegId)
        elif nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
# end class InformF1PositionType


class NoAnswerTTN(GeneratedsSuper):
    """Список неподтвержденных накладных"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Consignee=None, ReplyDate=None, ttnlist=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Consignee = Consignee
        self.validate_NoEmptyString50(self.Consignee)
        self.Consignee_nsprefix_ = None
        if isinstance(ReplyDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReplyDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReplyDate
        self.ReplyDate = initvalue_
        self.ReplyDate_nsprefix_ = None
        self.ttnlist = ttnlist
        self.ttnlist_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NoAnswerTTN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NoAnswerTTN.subclass:
            return NoAnswerTTN.subclass(*args_, **kwargs_)
        else:
            return NoAnswerTTN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_ReplyDate(self):
        return self.ReplyDate
    def set_ReplyDate(self, ReplyDate):
        self.ReplyDate = ReplyDate
    def get_ttnlist(self):
        return self.ttnlist
    def set_ttnlist(self, ttnlist):
        self.ttnlist = ttnlist
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.Consignee is not None or
            self.ReplyDate is not None or
            self.ttnlist is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='NoAnswerTTN', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NoAnswerTTN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NoAnswerTTN':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NoAnswerTTN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NoAnswerTTN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='NoAnswerTTN'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='NoAnswerTTN', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignee>%s</%sConsignee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Consignee), input_name='Consignee')), namespaceprefix_ , eol_))
        if self.ReplyDate is not None:
            namespaceprefix_ = self.ReplyDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReplyDate>%s</%sReplyDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReplyDate, input_name='ReplyDate'), namespaceprefix_ , eol_))
        if self.ttnlist is not None:
            namespaceprefix_ = self.ttnlist_nsprefix_ + ':' if (UseCapturedNS_ and self.ttnlist_nsprefix_) else ''
            self.ttnlist.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ttnlist', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Consignee':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Consignee')
            value_ = self.gds_validate_string(value_, node, 'Consignee')
            self.Consignee = value_
            self.Consignee_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Consignee)
        elif nodeName_ == 'ReplyDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReplyDate = dval_
            self.ReplyDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.ReplyDate)
        elif nodeName_ == 'ttnlist':
            obj_ = ttnlistType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ttnlist = obj_
            obj_.original_tagname_ = 'ttnlist'
# end class NoAnswerTTN


class NoAnswerType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WbRegID=None, ttnNumber=None, ttnDate=None, Shipper=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WbRegID = WbRegID
        self.validate_NoEmptyString50(self.WbRegID)
        self.WbRegID_nsprefix_ = None
        self.ttnNumber = ttnNumber
        self.validate_NoEmptyString50(self.ttnNumber)
        self.ttnNumber_nsprefix_ = None
        if isinstance(ttnDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ttnDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ttnDate
        self.ttnDate = initvalue_
        self.ttnDate_nsprefix_ = None
        self.Shipper = Shipper
        self.validate_NoEmptyString50(self.Shipper)
        self.Shipper_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NoAnswerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NoAnswerType.subclass:
            return NoAnswerType.subclass(*args_, **kwargs_)
        else:
            return NoAnswerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WbRegID(self):
        return self.WbRegID
    def set_WbRegID(self, WbRegID):
        self.WbRegID = WbRegID
    def get_ttnNumber(self):
        return self.ttnNumber
    def set_ttnNumber(self, ttnNumber):
        self.ttnNumber = ttnNumber
    def get_ttnDate(self):
        return self.ttnDate
    def set_ttnDate(self, ttnDate):
        self.ttnDate = ttnDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.WbRegID is not None or
            self.ttnNumber is not None or
            self.ttnDate is not None or
            self.Shipper is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='NoAnswerType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NoAnswerType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'NoAnswerType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='NoAnswerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='NoAnswerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='NoAnswerType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='NoAnswerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WbRegID is not None:
            namespaceprefix_ = self.WbRegID_nsprefix_ + ':' if (UseCapturedNS_ and self.WbRegID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWbRegID>%s</%sWbRegID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WbRegID), input_name='WbRegID')), namespaceprefix_ , eol_))
        if self.ttnNumber is not None:
            namespaceprefix_ = self.ttnNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ttnNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sttnNumber>%s</%sttnNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ttnNumber), input_name='ttnNumber')), namespaceprefix_ , eol_))
        if self.ttnDate is not None:
            namespaceprefix_ = self.ttnDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ttnDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sttnDate>%s</%sttnDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ttnDate, input_name='ttnDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipper>%s</%sShipper>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Shipper), input_name='Shipper')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WbRegID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WbRegID')
            value_ = self.gds_validate_string(value_, node, 'WbRegID')
            self.WbRegID = value_
            self.WbRegID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WbRegID)
        elif nodeName_ == 'ttnNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ttnNumber')
            value_ = self.gds_validate_string(value_, node, 'ttnNumber')
            self.ttnNumber = value_
            self.ttnNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ttnNumber)
        elif nodeName_ == 'ttnDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ttnDate = dval_
            self.ttnDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ttnDate)
        elif nodeName_ == 'Shipper':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Shipper')
            value_ = self.gds_validate_string(value_, node, 'Shipper')
            self.Shipper = value_
            self.Shipper_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Shipper)
# end class NoAnswerType


class ReplyRestsShop_v2(GeneratedsSuper):
    """Ответ на запрос об остатках по торговому залу"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRestsShop_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRestsShop_v2.subclass:
            return ReplyRestsShop_v2.subclass(*args_, **kwargs_)
        else:
            return ReplyRestsShop_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRestsShop_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRestsShop_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRestsShop_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRestsShop_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRestsShop_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRestsShop_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRestsShop_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Products':
            obj_ = ProductsType183.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyRestsShop_v2


class ShopPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShopPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShopPositionType.subclass:
            return ShopPositionType.subclass(*args_, **kwargs_)
        else:
            return ShopPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ShopPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShopPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShopPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShopPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShopPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ShopPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ShopPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
# end class ShopPositionType


class Asiiu(GeneratedsSuper):
    """Сведения с автоматических средств измерения и учета (АСИиУ) концентрации
    объёма безводного спирта в готовой продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Sensor=None, Producer=None, Data=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Sensor = Sensor
        self.Sensor_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Data = Data
        self.Data_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Asiiu)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Asiiu.subclass:
            return Asiiu.subclass(*args_, **kwargs_)
        else:
            return Asiiu(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Sensor(self):
        return self.Sensor
    def set_Sensor(self, Sensor):
        self.Sensor = Sensor
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Data(self):
        return self.Data
    def set_Data(self, Data):
        self.Data = Data
    def hasContent_(self):
        if (
            self.Sensor is not None or
            self.Producer is not None or
            self.Data is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:as="http://fsrar.ru/WEGAIS/Asiiu"', name_='Asiiu', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Asiiu')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'Asiiu':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Asiiu')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Asiiu', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='Asiiu'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:as="http://fsrar.ru/WEGAIS/Asiiu"', name_='Asiiu', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Sensor is not None:
            namespaceprefix_ = self.Sensor_nsprefix_ + ':' if (UseCapturedNS_ and self.Sensor_nsprefix_) else ''
            self.Sensor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Sensor', pretty_print=pretty_print)
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Data is not None:
            namespaceprefix_ = self.Data_nsprefix_ + ':' if (UseCapturedNS_ and self.Data_nsprefix_) else ''
            self.Data.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Data', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Sensor':
            obj_ = SensorType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Sensor = obj_
            obj_.original_tagname_ = 'Sensor'
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Data':
            obj_ = DataType184.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Data = obj_
            obj_.original_tagname_ = 'Data'
# end class Asiiu


class DataType(GeneratedsSuper):
    """Строка данных измерений"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, StartDate=None, EndDate=None, VbsStart=None, VbsEnd=None, AStart=None, AEnd=None, PercentAlc=None, BottleCountStart=None, BottleCountEnd=None, Temperature=None, Mode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        if isinstance(StartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(StartDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = StartDate
        self.StartDate = initvalue_
        self.StartDate_nsprefix_ = None
        if isinstance(EndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EndDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EndDate
        self.EndDate = initvalue_
        self.EndDate_nsprefix_ = None
        self.VbsStart = VbsStart
        self.VbsStart_nsprefix_ = None
        self.VbsEnd = VbsEnd
        self.VbsEnd_nsprefix_ = None
        self.AStart = AStart
        self.AStart_nsprefix_ = None
        self.AEnd = AEnd
        self.AEnd_nsprefix_ = None
        self.PercentAlc = PercentAlc
        self.PercentAlc_nsprefix_ = None
        self.BottleCountStart = BottleCountStart
        self.BottleCountStart_nsprefix_ = None
        self.BottleCountEnd = BottleCountEnd
        self.BottleCountEnd_nsprefix_ = None
        self.Temperature = Temperature
        self.Temperature_nsprefix_ = None
        self.Mode = Mode
        self.validate_ModeEnum(self.Mode)
        self.Mode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataType.subclass:
            return DataType.subclass(*args_, **kwargs_)
        else:
            return DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_StartDate(self):
        return self.StartDate
    def set_StartDate(self, StartDate):
        self.StartDate = StartDate
    def get_EndDate(self):
        return self.EndDate
    def set_EndDate(self, EndDate):
        self.EndDate = EndDate
    def get_VbsStart(self):
        return self.VbsStart
    def set_VbsStart(self, VbsStart):
        self.VbsStart = VbsStart
    def get_VbsEnd(self):
        return self.VbsEnd
    def set_VbsEnd(self, VbsEnd):
        self.VbsEnd = VbsEnd
    def get_AStart(self):
        return self.AStart
    def set_AStart(self, AStart):
        self.AStart = AStart
    def get_AEnd(self):
        return self.AEnd
    def set_AEnd(self, AEnd):
        self.AEnd = AEnd
    def get_PercentAlc(self):
        return self.PercentAlc
    def set_PercentAlc(self, PercentAlc):
        self.PercentAlc = PercentAlc
    def get_BottleCountStart(self):
        return self.BottleCountStart
    def set_BottleCountStart(self, BottleCountStart):
        self.BottleCountStart = BottleCountStart
    def get_BottleCountEnd(self):
        return self.BottleCountEnd
    def set_BottleCountEnd(self, BottleCountEnd):
        self.BottleCountEnd = BottleCountEnd
    def get_Temperature(self):
        return self.Temperature
    def set_Temperature(self, Temperature):
        self.Temperature = Temperature
    def get_Mode(self):
        return self.Mode
    def set_Mode(self, Mode):
        self.Mode = Mode
    def validate_ModeEnum(self, value):
        result = True
        # Validate type ModeEnum, a restriction on ns:Digits3.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.StartDate is not None or
            self.EndDate is not None or
            self.VbsStart is not None or
            self.VbsEnd is not None or
            self.AStart is not None or
            self.AEnd is not None or
            self.PercentAlc is not None or
            self.BottleCountStart is not None or
            self.BottleCountEnd is not None or
            self.Temperature is not None or
            self.Mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:prod="http://fsrar.ru/WEGAIS/ProductRef_v2"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum"  xmlns:as="http://fsrar.ru/WEGAIS/Asiiu"', name_='DataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='DataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:prod="http://fsrar.ru/WEGAIS/ProductRef_v2"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum"  xmlns:as="http://fsrar.ru/WEGAIS/Asiiu"', name_='DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.StartDate is not None:
            namespaceprefix_ = self.StartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.StartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStartDate>%s</%sStartDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.StartDate, input_name='StartDate'), namespaceprefix_ , eol_))
        if self.EndDate is not None:
            namespaceprefix_ = self.EndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndDate>%s</%sEndDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EndDate, input_name='EndDate'), namespaceprefix_ , eol_))
        if self.VbsStart is not None:
            namespaceprefix_ = self.VbsStart_nsprefix_ + ':' if (UseCapturedNS_ and self.VbsStart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVbsStart>%s</%sVbsStart>%s' % (namespaceprefix_ , self.gds_format_decimal(self.VbsStart, input_name='VbsStart'), namespaceprefix_ , eol_))
        if self.VbsEnd is not None:
            namespaceprefix_ = self.VbsEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.VbsEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVbsEnd>%s</%sVbsEnd>%s' % (namespaceprefix_ , self.gds_format_decimal(self.VbsEnd, input_name='VbsEnd'), namespaceprefix_ , eol_))
        if self.AStart is not None:
            namespaceprefix_ = self.AStart_nsprefix_ + ':' if (UseCapturedNS_ and self.AStart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAStart>%s</%sAStart>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AStart, input_name='AStart'), namespaceprefix_ , eol_))
        if self.AEnd is not None:
            namespaceprefix_ = self.AEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.AEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAEnd>%s</%sAEnd>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AEnd, input_name='AEnd'), namespaceprefix_ , eol_))
        if self.PercentAlc is not None:
            namespaceprefix_ = self.PercentAlc_nsprefix_ + ':' if (UseCapturedNS_ and self.PercentAlc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentAlc>%s</%sPercentAlc>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PercentAlc, input_name='PercentAlc'), namespaceprefix_ , eol_))
        if self.BottleCountStart is not None:
            namespaceprefix_ = self.BottleCountStart_nsprefix_ + ':' if (UseCapturedNS_ and self.BottleCountStart_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottleCountStart>%s</%sBottleCountStart>%s' % (namespaceprefix_ , self.gds_format_decimal(self.BottleCountStart, input_name='BottleCountStart'), namespaceprefix_ , eol_))
        if self.BottleCountEnd is not None:
            namespaceprefix_ = self.BottleCountEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.BottleCountEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottleCountEnd>%s</%sBottleCountEnd>%s' % (namespaceprefix_ , self.gds_format_decimal(self.BottleCountEnd, input_name='BottleCountEnd'), namespaceprefix_ , eol_))
        if self.Temperature is not None:
            namespaceprefix_ = self.Temperature_nsprefix_ + ':' if (UseCapturedNS_ and self.Temperature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemperature>%s</%sTemperature>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Temperature, input_name='Temperature'), namespaceprefix_ , eol_))
        if self.Mode is not None:
            namespaceprefix_ = self.Mode_nsprefix_ + ':' if (UseCapturedNS_ and self.Mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMode>%s</%sMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mode), input_name='Mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoAsiiu_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'StartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.StartDate = dval_
            self.StartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'EndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EndDate = dval_
            self.EndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'VbsStart' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'VbsStart')
            fval_ = self.gds_validate_decimal(fval_, node, 'VbsStart')
            self.VbsStart = fval_
            self.VbsStart_nsprefix_ = child_.prefix
        elif nodeName_ == 'VbsEnd' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'VbsEnd')
            fval_ = self.gds_validate_decimal(fval_, node, 'VbsEnd')
            self.VbsEnd = fval_
            self.VbsEnd_nsprefix_ = child_.prefix
        elif nodeName_ == 'AStart' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AStart')
            fval_ = self.gds_validate_decimal(fval_, node, 'AStart')
            self.AStart = fval_
            self.AStart_nsprefix_ = child_.prefix
        elif nodeName_ == 'AEnd' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AEnd')
            fval_ = self.gds_validate_decimal(fval_, node, 'AEnd')
            self.AEnd = fval_
            self.AEnd_nsprefix_ = child_.prefix
        elif nodeName_ == 'PercentAlc' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PercentAlc')
            fval_ = self.gds_validate_decimal(fval_, node, 'PercentAlc')
            self.PercentAlc = fval_
            self.PercentAlc_nsprefix_ = child_.prefix
        elif nodeName_ == 'BottleCountStart' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'BottleCountStart')
            fval_ = self.gds_validate_decimal(fval_, node, 'BottleCountStart')
            self.BottleCountStart = fval_
            self.BottleCountStart_nsprefix_ = child_.prefix
        elif nodeName_ == 'BottleCountEnd' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'BottleCountEnd')
            fval_ = self.gds_validate_decimal(fval_, node, 'BottleCountEnd')
            self.BottleCountEnd = fval_
            self.BottleCountEnd_nsprefix_ = child_.prefix
        elif nodeName_ == 'Temperature' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Temperature')
            fval_ = self.gds_validate_decimal(fval_, node, 'Temperature')
            self.Temperature = fval_
            self.Temperature_nsprefix_ = child_.prefix
        elif nodeName_ == 'Mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Mode')
            value_ = self.gds_validate_string(value_, node, 'Mode')
            self.Mode = value_
            self.Mode_nsprefix_ = child_.prefix
            # validate type ModeEnum
            self.validate_ModeEnum(self.Mode)
# end class DataType


class AsiiuTime(GeneratedsSuper):
    """Сведения с автоматических средств измерения и учета (АСИиУ) концентрации
    объёма безводного спирта в готовой продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Sensor=None, Producer=None, Data=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Sensor = Sensor
        self.Sensor_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Data = Data
        self.Data_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AsiiuTime)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AsiiuTime.subclass:
            return AsiiuTime.subclass(*args_, **kwargs_)
        else:
            return AsiiuTime(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Sensor(self):
        return self.Sensor
    def set_Sensor(self, Sensor):
        self.Sensor = Sensor
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Data(self):
        return self.Data
    def set_Data(self, Data):
        self.Data = Data
    def hasContent_(self):
        if (
            self.Sensor is not None or
            self.Producer is not None or
            self.Data is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:as="http://fsrar.ru/WEGAIS/AsiiuTime"', name_='AsiiuTime', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AsiiuTime')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AsiiuTime':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AsiiuTime')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AsiiuTime', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='AsiiuTime'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef"  xmlns:as="http://fsrar.ru/WEGAIS/AsiiuTime"', name_='AsiiuTime', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Sensor is not None:
            namespaceprefix_ = self.Sensor_nsprefix_ + ':' if (UseCapturedNS_ and self.Sensor_nsprefix_) else ''
            self.Sensor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Sensor', pretty_print=pretty_print)
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Data is not None:
            namespaceprefix_ = self.Data_nsprefix_ + ':' if (UseCapturedNS_ and self.Data_nsprefix_) else ''
            self.Data.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Data', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Sensor':
            obj_ = SensorType185.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Sensor = obj_
            obj_.original_tagname_ = 'Sensor'
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Data':
            obj_ = DataType186.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Data = obj_
            obj_.original_tagname_ = 'Data'
# end class AsiiuTime


class DataType32(GeneratedsSuper):
    """Строка данных измерений"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, ControlDate=None, VbsControl=None, AControl=None, PercentAlc=None, BottleCountControl=None, Temperature=None, Mode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        if isinstance(ControlDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ControlDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ControlDate
        self.ControlDate = initvalue_
        self.ControlDate_nsprefix_ = None
        self.VbsControl = VbsControl
        self.VbsControl_nsprefix_ = None
        self.AControl = AControl
        self.AControl_nsprefix_ = None
        self.PercentAlc = PercentAlc
        self.PercentAlc_nsprefix_ = None
        self.BottleCountControl = BottleCountControl
        self.BottleCountControl_nsprefix_ = None
        self.Temperature = Temperature
        self.Temperature_nsprefix_ = None
        self.Mode = Mode
        self.validate_ModeEnum(self.Mode)
        self.Mode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataType32)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataType32.subclass:
            return DataType32.subclass(*args_, **kwargs_)
        else:
            return DataType32(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_ControlDate(self):
        return self.ControlDate
    def set_ControlDate(self, ControlDate):
        self.ControlDate = ControlDate
    def get_VbsControl(self):
        return self.VbsControl
    def set_VbsControl(self, VbsControl):
        self.VbsControl = VbsControl
    def get_AControl(self):
        return self.AControl
    def set_AControl(self, AControl):
        self.AControl = AControl
    def get_PercentAlc(self):
        return self.PercentAlc
    def set_PercentAlc(self, PercentAlc):
        self.PercentAlc = PercentAlc
    def get_BottleCountControl(self):
        return self.BottleCountControl
    def set_BottleCountControl(self, BottleCountControl):
        self.BottleCountControl = BottleCountControl
    def get_Temperature(self):
        return self.Temperature
    def set_Temperature(self, Temperature):
        self.Temperature = Temperature
    def get_Mode(self):
        return self.Mode
    def set_Mode(self, Mode):
        self.Mode = Mode
    def validate_ModeEnum(self, value):
        result = True
        # Validate type ModeEnum, a restriction on ns:Digits3.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.ControlDate is not None or
            self.VbsControl is not None or
            self.AControl is not None or
            self.PercentAlc is not None or
            self.BottleCountControl is not None or
            self.Temperature is not None or
            self.Mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:prod="http://fsrar.ru/WEGAIS/ProductRef_v2"  xmlns:ass="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='DataType32', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataType32')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataType32':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataType32')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataType32', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='DataType32'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:prod="http://fsrar.ru/WEGAIS/ProductRef_v2"  xmlns:ass="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='DataType32', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.ControlDate is not None:
            namespaceprefix_ = self.ControlDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ControlDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sControlDate>%s</%sControlDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ControlDate, input_name='ControlDate'), namespaceprefix_ , eol_))
        if self.VbsControl is not None:
            namespaceprefix_ = self.VbsControl_nsprefix_ + ':' if (UseCapturedNS_ and self.VbsControl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVbsControl>%s</%sVbsControl>%s' % (namespaceprefix_ , self.gds_format_decimal(self.VbsControl, input_name='VbsControl'), namespaceprefix_ , eol_))
        if self.AControl is not None:
            namespaceprefix_ = self.AControl_nsprefix_ + ':' if (UseCapturedNS_ and self.AControl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAControl>%s</%sAControl>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AControl, input_name='AControl'), namespaceprefix_ , eol_))
        if self.PercentAlc is not None:
            namespaceprefix_ = self.PercentAlc_nsprefix_ + ':' if (UseCapturedNS_ and self.PercentAlc_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPercentAlc>%s</%sPercentAlc>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PercentAlc, input_name='PercentAlc'), namespaceprefix_ , eol_))
        if self.BottleCountControl is not None:
            namespaceprefix_ = self.BottleCountControl_nsprefix_ + ':' if (UseCapturedNS_ and self.BottleCountControl_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBottleCountControl>%s</%sBottleCountControl>%s' % (namespaceprefix_ , self.gds_format_decimal(self.BottleCountControl, input_name='BottleCountControl'), namespaceprefix_ , eol_))
        if self.Temperature is not None:
            namespaceprefix_ = self.Temperature_nsprefix_ + ':' if (UseCapturedNS_ and self.Temperature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemperature>%s</%sTemperature>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Temperature, input_name='Temperature'), namespaceprefix_ , eol_))
        if self.Mode is not None:
            namespaceprefix_ = self.Mode_nsprefix_ + ':' if (UseCapturedNS_ and self.Mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMode>%s</%sMode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mode), input_name='Mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoAsiiu_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'ControlDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ControlDate = dval_
            self.ControlDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'VbsControl' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'VbsControl')
            fval_ = self.gds_validate_decimal(fval_, node, 'VbsControl')
            self.VbsControl = fval_
            self.VbsControl_nsprefix_ = child_.prefix
        elif nodeName_ == 'AControl' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AControl')
            fval_ = self.gds_validate_decimal(fval_, node, 'AControl')
            self.AControl = fval_
            self.AControl_nsprefix_ = child_.prefix
        elif nodeName_ == 'PercentAlc' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PercentAlc')
            fval_ = self.gds_validate_decimal(fval_, node, 'PercentAlc')
            self.PercentAlc = fval_
            self.PercentAlc_nsprefix_ = child_.prefix
        elif nodeName_ == 'BottleCountControl' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'BottleCountControl')
            fval_ = self.gds_validate_decimal(fval_, node, 'BottleCountControl')
            self.BottleCountControl = fval_
            self.BottleCountControl_nsprefix_ = child_.prefix
        elif nodeName_ == 'Temperature' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Temperature')
            fval_ = self.gds_validate_decimal(fval_, node, 'Temperature')
            self.Temperature = fval_
            self.Temperature_nsprefix_ = child_.prefix
        elif nodeName_ == 'Mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Mode')
            value_ = self.gds_validate_string(value_, node, 'Mode')
            self.Mode = value_
            self.Mode_nsprefix_ = child_.prefix
            # validate type ModeEnum
            self.validate_ModeEnum(self.Mode)
# end class DataType32


class ActChargeOnShopType_v2(GeneratedsSuper):
    """Акт постановки на баланс"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnShopType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnShopType_v2.subclass:
            return ActChargeOnShopType_v2.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnShopType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnShopType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnShopType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnShopType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnShopType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnShopType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnShopType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActChargeOnShopType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType187.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType189.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActChargeOnShopType_v2


class ActChargeOnShopPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Product=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActChargeOnShopPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActChargeOnShopPositionType.subclass:
            return ActChargeOnShopPositionType.subclass(*args_, **kwargs_)
        else:
            return ActChargeOnShopPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Product is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActChargeOnShopPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActChargeOnShopPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActChargeOnShopPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActChargeOnShopPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActChargeOnShopPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActChargeOnShopPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ActChargeOnShopPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
# end class ActChargeOnShopPositionType


class ActWriteOffShopType_v2(GeneratedsSuper):
    """Акт списания"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffShopType_v2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffShopType_v2.subclass:
            return ActWriteOffShopType_v2.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffShopType_v2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffShopType_v2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffShopType_v2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffShopType_v2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffShopType_v2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffShopType_v2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffShopType_v2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffShopType_v2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType190.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType192.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActWriteOffShopType_v2


class ActWriteOffShopPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Product=None, Quantity=None, SumSale=None, MarkCodeInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.SumSale = SumSale
        self.validate_NoNegativeDecimalType(self.SumSale)
        self.SumSale_nsprefix_ = None
        self.MarkCodeInfo = MarkCodeInfo
        self.MarkCodeInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffShopPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffShopPositionType.subclass:
            return ActWriteOffShopPositionType.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffShopPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_SumSale(self):
        return self.SumSale
    def set_SumSale(self, SumSale):
        self.SumSale = SumSale
    def get_MarkCodeInfo(self):
        return self.MarkCodeInfo
    def set_MarkCodeInfo(self, MarkCodeInfo):
        self.MarkCodeInfo = MarkCodeInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Product is not None or
            self.Quantity is not None or
            self.SumSale is not None or
            self.MarkCodeInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActWriteOffShopPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffShopPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffShopPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffShopPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffShopPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffShopPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ActWriteOffShopPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.SumSale is not None:
            namespaceprefix_ = self.SumSale_nsprefix_ + ':' if (UseCapturedNS_ and self.SumSale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSumSale>%s</%sSumSale>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SumSale, input_name='SumSale'), namespaceprefix_ , eol_))
        if self.MarkCodeInfo is not None:
            namespaceprefix_ = self.MarkCodeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCodeInfo_nsprefix_) else ''
            self.MarkCodeInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkCodeInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'SumSale' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SumSale')
            fval_ = self.gds_validate_decimal(fval_, node, 'SumSale')
            self.SumSale = fval_
            self.SumSale_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.SumSale)
        elif nodeName_ == 'MarkCodeInfo':
            obj_ = MarkCodeInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkCodeInfo = obj_
            obj_.original_tagname_ = 'MarkCodeInfo'
# end class ActWriteOffShopPositionType


class InfoVersionTTN(GeneratedsSuper):
    """Информация о используемой версии формата ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, WBTypeUsed=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.WBTypeUsed = WBTypeUsed
        self.validate_FormatType(self.WBTypeUsed)
        self.WBTypeUsed_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InfoVersionTTN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InfoVersionTTN.subclass:
            return InfoVersionTTN.subclass(*args_, **kwargs_)
        else:
            return InfoVersionTTN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_WBTypeUsed(self):
        return self.WBTypeUsed
    def set_WBTypeUsed(self, WBTypeUsed):
        self.WBTypeUsed = WBTypeUsed
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FormatType(self, value):
        result = True
        # Validate type FormatType, a restriction on c:NoEmptyString50.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.WBTypeUsed is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InfoVersionTTN', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InfoVersionTTN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InfoVersionTTN':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InfoVersionTTN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InfoVersionTTN', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InfoVersionTTN'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InfoVersionTTN', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.WBTypeUsed is not None:
            namespaceprefix_ = self.WBTypeUsed_nsprefix_ + ':' if (UseCapturedNS_ and self.WBTypeUsed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBTypeUsed>%s</%sWBTypeUsed>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBTypeUsed), input_name='WBTypeUsed')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'WBTypeUsed':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBTypeUsed')
            value_ = self.gds_validate_string(value_, node, 'WBTypeUsed')
            self.WBTypeUsed = value_
            self.WBTypeUsed_nsprefix_ = child_.prefix
            # validate type FormatType
            self.validate_FormatType(self.WBTypeUsed)
# end class InfoVersionTTN


class QueryBarcode(GeneratedsSuper):
    """Запрос по типу/серии/номеру ФСМ/АМ штрихового кода PDF-417, нанесенного
    на эту ФСМ/АМ"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QueryNumber=None, Date=None, Marks=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.QueryNumber = QueryNumber
        self.validate_NoEmptyString(self.QueryNumber)
        self.QueryNumber_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.Marks = Marks
        self.Marks_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, QueryBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if QueryBarcode.subclass:
            return QueryBarcode.subclass(*args_, **kwargs_)
        else:
            return QueryBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QueryNumber(self):
        return self.QueryNumber
    def set_QueryNumber(self, QueryNumber):
        self.QueryNumber = QueryNumber
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Marks(self):
        return self.Marks
    def set_Marks(self, Marks):
        self.Marks = Marks
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.QueryNumber is not None or
            self.Date is not None or
            self.Marks is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryBarcode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('QueryBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'QueryBarcode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='QueryBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='QueryBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='QueryBarcode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='QueryBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QueryNumber is not None:
            namespaceprefix_ = self.QueryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQueryNumber>%s</%sQueryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QueryNumber), input_name='QueryNumber')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Marks is not None:
            namespaceprefix_ = self.Marks_nsprefix_ + ':' if (UseCapturedNS_ and self.Marks_nsprefix_) else ''
            self.Marks.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Marks', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QueryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QueryNumber')
            value_ = self.gds_validate_string(value_, node, 'QueryNumber')
            self.QueryNumber = value_
            self.QueryNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.QueryNumber)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'Marks':
            obj_ = MarksType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Marks = obj_
            obj_.original_tagname_ = 'Marks'
# end class QueryBarcode


class MarkType(GeneratedsSuper):
    """Отдельная марка списка марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Type=None, Rank=None, Number=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_Digits9(self.Identity)
        self.Identity_nsprefix_ = None
        self.Type = Type
        self.validate_TypeEnum(self.Type)
        self.Type_nsprefix_ = None
        self.Rank = Rank
        self.validate_Digits3(self.Rank)
        self.Rank_nsprefix_ = None
        self.Number = Number
        self.validate_Digits9(self.Number)
        self.Number_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarkType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarkType.subclass:
            return MarkType.subclass(*args_, **kwargs_)
        else:
            return MarkType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Rank(self):
        return self.Rank
    def set_Rank(self, Rank):
        self.Rank = Rank
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def validate_Digits9(self, value):
        result = True
        # Validate type Digits9, a restriction on xs:string.
        pass
        return result
    def validate_TypeEnum(self, value):
        result = True
        # Validate type TypeEnum, a restriction on ns:Digits3.
        pass
        return result
    def validate_Digits3(self, value):
        result = True
        # Validate type Digits3, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Type is not None or
            self.Rank is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='MarkType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarkType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarkType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarkType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarkType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='MarkType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='MarkType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Rank is not None:
            namespaceprefix_ = self.Rank_nsprefix_ + ':' if (UseCapturedNS_ and self.Rank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRank>%s</%sRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rank), input_name='Rank')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type Digits9
            self.validate_Digits9(self.Identity)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TypeEnum
            self.validate_TypeEnum(self.Type)
        elif nodeName_ == 'Rank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rank')
            value_ = self.gds_validate_string(value_, node, 'Rank')
            self.Rank = value_
            self.Rank_nsprefix_ = child_.prefix
            # validate type Digits3
            self.validate_Digits3(self.Rank)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type Digits9
            self.validate_Digits9(self.Number)
# end class MarkType


class ReplyBarcode(GeneratedsSuper):
    """Ответ на запрос по типу/серии/номеру ФСМ/АМ штрихового кода PDF-417,
    нанесенного на эту ФСМ/АМ"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, QueryNumber=None, Date=None, Marks=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.QueryNumber = QueryNumber
        self.validate_NoEmptyString(self.QueryNumber)
        self.QueryNumber_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        self.Marks = Marks
        self.Marks_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyBarcode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyBarcode.subclass:
            return ReplyBarcode.subclass(*args_, **kwargs_)
        else:
            return ReplyBarcode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_QueryNumber(self):
        return self.QueryNumber
    def set_QueryNumber(self, QueryNumber):
        self.QueryNumber = QueryNumber
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_Marks(self):
        return self.Marks
    def set_Marks(self, Marks):
        self.Marks = Marks
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.QueryNumber is not None or
            self.Date is not None or
            self.Marks is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyBarcode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyBarcode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyBarcode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyBarcode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyBarcode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyBarcode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyBarcode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.QueryNumber is not None:
            namespaceprefix_ = self.QueryNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.QueryNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQueryNumber>%s</%sQueryNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.QueryNumber), input_name='QueryNumber')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.Marks is not None:
            namespaceprefix_ = self.Marks_nsprefix_ + ':' if (UseCapturedNS_ and self.Marks_nsprefix_) else ''
            self.Marks.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Marks', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'QueryNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'QueryNumber')
            value_ = self.gds_validate_string(value_, node, 'QueryNumber')
            self.QueryNumber = value_
            self.QueryNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.QueryNumber)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
        elif nodeName_ == 'Marks':
            obj_ = MarksType193.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Marks = obj_
            obj_.original_tagname_ = 'Marks'
# end class ReplyBarcode


class BarcodeType(GeneratedsSuper):
    """Отдельная марка списка марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Type=None, Rank=None, Number=None, Barcode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_Digits9(self.Identity)
        self.Identity_nsprefix_ = None
        self.Type = Type
        self.validate_TypeEnum(self.Type)
        self.Type_nsprefix_ = None
        self.Rank = Rank
        self.validate_Digits3(self.Rank)
        self.Rank_nsprefix_ = None
        self.Number = Number
        self.validate_Digits9(self.Number)
        self.Number_nsprefix_ = None
        self.Barcode = Barcode
        self.validate_PDF417String33(self.Barcode)
        self.Barcode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BarcodeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BarcodeType.subclass:
            return BarcodeType.subclass(*args_, **kwargs_)
        else:
            return BarcodeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_Rank(self):
        return self.Rank
    def set_Rank(self, Rank):
        self.Rank = Rank
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Barcode(self):
        return self.Barcode
    def set_Barcode(self, Barcode):
        self.Barcode = Barcode
    def validate_Digits9(self, value):
        result = True
        # Validate type Digits9, a restriction on xs:string.
        pass
        return result
    def validate_TypeEnum(self, value):
        result = True
        # Validate type TypeEnum, a restriction on ns:Digits3.
        pass
        return result
    def validate_Digits3(self, value):
        result = True
        # Validate type Digits3, a restriction on xs:string.
        pass
        return result
    def validate_PDF417String33(self, value):
        result = True
        # Validate type PDF417String33, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Type is not None or
            self.Rank is not None or
            self.Number is not None or
            self.Barcode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:qb="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='BarcodeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BarcodeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'BarcodeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='BarcodeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='BarcodeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='BarcodeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:qb="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='BarcodeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.Rank is not None:
            namespaceprefix_ = self.Rank_nsprefix_ + ':' if (UseCapturedNS_ and self.Rank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRank>%s</%sRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rank), input_name='Rank')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.Barcode is not None:
            namespaceprefix_ = self.Barcode_nsprefix_ + ':' if (UseCapturedNS_ and self.Barcode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarcode>%s</%sBarcode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Barcode), input_name='Barcode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type Digits9
            self.validate_Digits9(self.Identity)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type TypeEnum
            self.validate_TypeEnum(self.Type)
        elif nodeName_ == 'Rank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rank')
            value_ = self.gds_validate_string(value_, node, 'Rank')
            self.Rank = value_
            self.Rank_nsprefix_ = child_.prefix
            # validate type Digits3
            self.validate_Digits3(self.Rank)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type Digits9
            self.validate_Digits9(self.Number)
        elif nodeName_ == 'Barcode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Barcode')
            value_ = self.gds_validate_string(value_, node, 'Barcode')
            self.Barcode = value_
            self.Barcode_nsprefix_ = child_.prefix
            # validate type PDF417String33
            self.validate_PDF417String33(self.Barcode)
# end class BarcodeType


class RequestRepealWB(GeneratedsSuper):
    """Запрос от грузополучателя на отмену проведения ТТН"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, RequestNumber=None, RequestDate=None, WBRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.RequestNumber = RequestNumber
        self.validate_NoEmptyString50(self.RequestNumber)
        self.RequestNumber_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestRepealWB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestRepealWB.subclass:
            return RequestRepealWB.subclass(*args_, **kwargs_)
        else:
            return RequestRepealWB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_RequestNumber(self):
        return self.RequestNumber
    def set_RequestNumber(self, RequestNumber):
        self.RequestNumber = RequestNumber
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.RequestNumber is not None or
            self.RequestDate is not None or
            self.WBRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealWB', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestRepealWB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestRepealWB':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestRepealWB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestRepealWB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestRepealWB'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealWB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.RequestNumber is not None:
            namespaceprefix_ = self.RequestNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestNumber>%s</%sRequestNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestNumber), input_name='RequestNumber')), namespaceprefix_ , eol_))
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'RequestNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestNumber')
            value_ = self.gds_validate_string(value_, node, 'RequestNumber')
            self.RequestNumber = value_
            self.RequestNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RequestNumber)
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
# end class RequestRepealWB


class ConfirmRepealWB(GeneratedsSuper):
    """Подтверждение акта грузоотправителем отмены проведения Товарно-
    Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConfirmRepealWB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConfirmRepealWB.subclass:
            return ConfirmRepealWB.subclass(*args_, **kwargs_)
        else:
            return ConfirmRepealWB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ConfirmRepealWB', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConfirmRepealWB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ConfirmRepealWB':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConfirmRepealWB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConfirmRepealWB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ConfirmRepealWB'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ConfirmRepealWB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType194.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
# end class ConfirmRepealWB


class RequestRepealACO(GeneratedsSuper):
    """Запрос на отмену проведения акта постановки на баланс"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, RequestNumber=None, RequestDate=None, ACORegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.RequestNumber = RequestNumber
        self.validate_NoEmptyString50(self.RequestNumber)
        self.RequestNumber_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
        self.ACORegId = ACORegId
        self.validate_NoEmptyString50(self.ACORegId)
        self.ACORegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestRepealACO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestRepealACO.subclass:
            return RequestRepealACO.subclass(*args_, **kwargs_)
        else:
            return RequestRepealACO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_RequestNumber(self):
        return self.RequestNumber
    def set_RequestNumber(self, RequestNumber):
        self.RequestNumber = RequestNumber
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def get_ACORegId(self):
        return self.ACORegId
    def set_ACORegId(self, ACORegId):
        self.ACORegId = ACORegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.RequestNumber is not None or
            self.RequestDate is not None or
            self.ACORegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealACO', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestRepealACO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestRepealACO':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestRepealACO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestRepealACO', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestRepealACO'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealACO', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.RequestNumber is not None:
            namespaceprefix_ = self.RequestNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestNumber>%s</%sRequestNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestNumber), input_name='RequestNumber')), namespaceprefix_ , eol_))
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
        if self.ACORegId is not None:
            namespaceprefix_ = self.ACORegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ACORegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACORegId>%s</%sACORegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACORegId), input_name='ACORegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'RequestNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestNumber')
            value_ = self.gds_validate_string(value_, node, 'RequestNumber')
            self.RequestNumber = value_
            self.RequestNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RequestNumber)
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'ACORegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACORegId')
            value_ = self.gds_validate_string(value_, node, 'ACORegId')
            self.ACORegId = value_
            self.ACORegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ACORegId)
# end class RequestRepealACO


class RequestRepealAWO(GeneratedsSuper):
    """Запрос на отмену проведения акта списания"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, RequestNumber=None, RequestDate=None, AWORegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.RequestNumber = RequestNumber
        self.validate_NoEmptyString50(self.RequestNumber)
        self.RequestNumber_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
        self.AWORegId = AWORegId
        self.validate_NoEmptyString50(self.AWORegId)
        self.AWORegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestRepealAWO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestRepealAWO.subclass:
            return RequestRepealAWO.subclass(*args_, **kwargs_)
        else:
            return RequestRepealAWO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_RequestNumber(self):
        return self.RequestNumber
    def set_RequestNumber(self, RequestNumber):
        self.RequestNumber = RequestNumber
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def get_AWORegId(self):
        return self.AWORegId
    def set_AWORegId(self, AWORegId):
        self.AWORegId = AWORegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.RequestNumber is not None or
            self.RequestDate is not None or
            self.AWORegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealAWO', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestRepealAWO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestRepealAWO':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestRepealAWO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestRepealAWO', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestRepealAWO'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestRepealAWO', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.RequestNumber is not None:
            namespaceprefix_ = self.RequestNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestNumber>%s</%sRequestNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestNumber), input_name='RequestNumber')), namespaceprefix_ , eol_))
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
        if self.AWORegId is not None:
            namespaceprefix_ = self.AWORegId_nsprefix_ + ':' if (UseCapturedNS_ and self.AWORegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAWORegId>%s</%sAWORegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AWORegId), input_name='AWORegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'RequestNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestNumber')
            value_ = self.gds_validate_string(value_, node, 'RequestNumber')
            self.RequestNumber = value_
            self.RequestNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RequestNumber)
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'AWORegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AWORegId')
            value_ = self.gds_validate_string(value_, node, 'AWORegId')
            self.AWORegId = value_
            self.AWORegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.AWORegId)
# end class RequestRepealAWO


class ReplyRests_Mini(GeneratedsSuper):
    """Ответ на запрос об остатках по складу (сокращенный)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRests_Mini)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRests_Mini.subclass:
            return ReplyRests_Mini.subclass(*args_, **kwargs_)
        else:
            return ReplyRests_Mini(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests_Mini', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRests_Mini')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRests_Mini':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRests_Mini')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRests_Mini', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRests_Mini'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRests_Mini', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Products':
            obj_ = ProductsType196.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyRests_Mini


class StockPositionType35(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AlcCode=None, Quantity=None, Inform1RegId=None, Inform2RegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AlcCode = AlcCode
        self.validate_NoEmptyString50(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.Inform1RegId = Inform1RegId
        self.validate_NoEmptyString50(self.Inform1RegId)
        self.Inform1RegId_nsprefix_ = None
        self.Inform2RegId = Inform2RegId
        self.validate_NoEmptyString50(self.Inform2RegId)
        self.Inform2RegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StockPositionType35)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StockPositionType35.subclass:
            return StockPositionType35.subclass(*args_, **kwargs_)
        else:
            return StockPositionType35(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_Inform1RegId(self):
        return self.Inform1RegId
    def set_Inform1RegId(self, Inform1RegId):
        self.Inform1RegId = Inform1RegId
    def get_Inform2RegId(self):
        return self.Inform2RegId
    def set_Inform2RegId(self, Inform2RegId):
        self.Inform2RegId = Inform2RegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.AlcCode is not None or
            self.Quantity is not None or
            self.Inform1RegId is not None or
            self.Inform2RegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType35', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StockPositionType35')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'StockPositionType35':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StockPositionType35')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StockPositionType35', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='StockPositionType35'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='StockPositionType35', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.Inform1RegId is not None:
            namespaceprefix_ = self.Inform1RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.Inform1RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInform1RegId>%s</%sInform1RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Inform1RegId), input_name='Inform1RegId')), namespaceprefix_ , eol_))
        if self.Inform2RegId is not None:
            namespaceprefix_ = self.Inform2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.Inform2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInform2RegId>%s</%sInform2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Inform2RegId), input_name='Inform2RegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.AlcCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Inform1RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inform1RegId')
            value_ = self.gds_validate_string(value_, node, 'Inform1RegId')
            self.Inform1RegId = value_
            self.Inform1RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Inform1RegId)
        elif nodeName_ == 'Inform2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inform2RegId')
            value_ = self.gds_validate_string(value_, node, 'Inform2RegId')
            self.Inform2RegId = value_
            self.Inform2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Inform2RegId)
# end class StockPositionType35


class ReplyRestsShop_Mini(GeneratedsSuper):
    """Ответ на запрос об остатках по торговому залу (сокращенный)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Products=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Products = Products
        self.Products_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRestsShop_Mini)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRestsShop_Mini.subclass:
            return ReplyRestsShop_Mini.subclass(*args_, **kwargs_)
        else:
            return ReplyRestsShop_Mini(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Products(self):
        return self.Products
    def set_Products(self, Products):
        self.Products = Products
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Products is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRestsShop_Mini', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRestsShop_Mini')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRestsShop_Mini':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRestsShop_Mini')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRestsShop_Mini', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRestsShop_Mini'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyRestsShop_Mini', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Products is not None:
            namespaceprefix_ = self.Products_nsprefix_ + ':' if (UseCapturedNS_ and self.Products_nsprefix_) else ''
            self.Products.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Products', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Products':
            obj_ = ProductsType197.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Products = obj_
            obj_.original_tagname_ = 'Products'
# end class ReplyRestsShop_Mini


class ShopPositionType36(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, AlcCode=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.AlcCode = AlcCode
        self.validate_NoEmptyString50(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ShopPositionType36)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ShopPositionType36.subclass:
            return ShopPositionType36.subclass(*args_, **kwargs_)
        else:
            return ShopPositionType36(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.AlcCode is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ShopPositionType36', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ShopPositionType36')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ShopPositionType36':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ShopPositionType36')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ShopPositionType36', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ShopPositionType36'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ShopPositionType36', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.AlcCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
# end class ShopPositionType36


class RequestAddProducts(GeneratedsSuper):
    """Запрос на добавление в справочник продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, RequestNumber=None, RequestDate=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.RequestNumber = RequestNumber
        self.validate_NoEmptyString50(self.RequestNumber)
        self.RequestNumber_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestAddProducts)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestAddProducts.subclass:
            return RequestAddProducts.subclass(*args_, **kwargs_)
        else:
            return RequestAddProducts(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_RequestNumber(self):
        return self.RequestNumber
    def set_RequestNumber(self, RequestNumber):
        self.RequestNumber = RequestNumber
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.RequestNumber is not None or
            self.RequestDate is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestAddProducts', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestAddProducts')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestAddProducts':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestAddProducts')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestAddProducts', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestAddProducts'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestAddProducts', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.RequestNumber is not None:
            namespaceprefix_ = self.RequestNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestNumber>%s</%sRequestNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestNumber), input_name='RequestNumber')), namespaceprefix_ , eol_))
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'RequestNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestNumber')
            value_ = self.gds_validate_string(value_, node, 'RequestNumber')
            self.RequestNumber = value_
            self.RequestNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RequestNumber)
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Content':
            obj_ = RequestAddSSPPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class RequestAddProducts


class RequestAddSSPPositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Producer=None, Type=None, VidCode=None, CountryCode=None, FullName=None, ShortName=None, Unpacked_Flag=None, Capacity=None, PERCENT_ALC=None, PERCENT_ALC_min=None, PERCENT_ALC_max=None, FRAPID=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Producer = Producer
        self.validate_NoEmptyString50(self.Producer)
        self.Producer_nsprefix_ = None
        self.Type = Type
        self.validate_ProductType17(self.Type)
        self.Type_nsprefix_ = None
        self.VidCode = VidCode
        self.validate_Digits3(self.VidCode)
        self.VidCode_nsprefix_ = None
        self.CountryCode = CountryCode
        self.validate_Digits3(self.CountryCode)
        self.CountryCode_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType198(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType199(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.Unpacked_Flag = Unpacked_Flag
        self.validate_UnpackedType(self.Unpacked_Flag)
        self.Unpacked_Flag_nsprefix_ = None
        self.Capacity = Capacity
        self.validate_PositiveDecimalType(self.Capacity)
        self.Capacity_nsprefix_ = None
        self.PERCENT_ALC = PERCENT_ALC
        self.validate_PositiveDecimalType(self.PERCENT_ALC)
        self.PERCENT_ALC_nsprefix_ = None
        self.PERCENT_ALC_min = PERCENT_ALC_min
        self.validate_PositiveDecimalType(self.PERCENT_ALC_min)
        self.PERCENT_ALC_min_nsprefix_ = None
        self.PERCENT_ALC_max = PERCENT_ALC_max
        self.validate_PositiveDecimalType(self.PERCENT_ALC_max)
        self.PERCENT_ALC_max_nsprefix_ = None
        self.FRAPID = FRAPID
        self.validate_NoEmptyString20(self.FRAPID)
        self.FRAPID_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestAddSSPPositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestAddSSPPositionType.subclass:
            return RequestAddSSPPositionType.subclass(*args_, **kwargs_)
        else:
            return RequestAddSSPPositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_VidCode(self):
        return self.VidCode
    def set_VidCode(self, VidCode):
        self.VidCode = VidCode
    def get_CountryCode(self):
        return self.CountryCode
    def set_CountryCode(self, CountryCode):
        self.CountryCode = CountryCode
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_Unpacked_Flag(self):
        return self.Unpacked_Flag
    def set_Unpacked_Flag(self, Unpacked_Flag):
        self.Unpacked_Flag = Unpacked_Flag
    def get_Capacity(self):
        return self.Capacity
    def set_Capacity(self, Capacity):
        self.Capacity = Capacity
    def get_PERCENT_ALC(self):
        return self.PERCENT_ALC
    def set_PERCENT_ALC(self, PERCENT_ALC):
        self.PERCENT_ALC = PERCENT_ALC
    def get_PERCENT_ALC_min(self):
        return self.PERCENT_ALC_min
    def set_PERCENT_ALC_min(self, PERCENT_ALC_min):
        self.PERCENT_ALC_min = PERCENT_ALC_min
    def get_PERCENT_ALC_max(self):
        return self.PERCENT_ALC_max
    def set_PERCENT_ALC_max(self, PERCENT_ALC_max):
        self.PERCENT_ALC_max = PERCENT_ALC_max
    def get_FRAPID(self):
        return self.FRAPID
    def set_FRAPID(self, FRAPID):
        self.FRAPID = FRAPID
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_ProductType17(self, value):
        result = True
        # Validate type ProductType17, a restriction on xs:string.
        pass
        return result
    def validate_Digits3(self, value):
        result = True
        # Validate type Digits3, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType198(self, value):
        result = True
        # Validate type FullNameType198, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType199(self, value):
        result = True
        # Validate type ShortNameType199, a restriction on xs:string.
        pass
        return result
    def validate_UnpackedType(self, value):
        result = True
        # Validate type UnpackedType, a restriction on xs:integer.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoEmptyString20(self, value):
        result = True
        # Validate type NoEmptyString20, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Producer is not None or
            self.Type is not None or
            self.VidCode is not None or
            self.CountryCode is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.Unpacked_Flag is not None or
            self.Capacity is not None or
            self.PERCENT_ALC is not None or
            self.PERCENT_ALC_min is not None or
            self.PERCENT_ALC_max is not None or
            self.FRAPID is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cn="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='RequestAddSSPPositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestAddSSPPositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestAddSSPPositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestAddSSPPositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestAddSSPPositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestAddSSPPositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cn="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='RequestAddSSPPositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducer>%s</%sProducer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Producer), input_name='Producer')), namespaceprefix_ , eol_))
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.VidCode is not None:
            namespaceprefix_ = self.VidCode_nsprefix_ + ':' if (UseCapturedNS_ and self.VidCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVidCode>%s</%sVidCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VidCode), input_name='VidCode')), namespaceprefix_ , eol_))
        if self.CountryCode is not None:
            namespaceprefix_ = self.CountryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.CountryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.Unpacked_Flag is not None:
            namespaceprefix_ = self.Unpacked_Flag_nsprefix_ + ':' if (UseCapturedNS_ and self.Unpacked_Flag_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnpacked_Flag>%s</%sUnpacked_Flag>%s' % (namespaceprefix_ , self.gds_format_integer(self.Unpacked_Flag, input_name='Unpacked_Flag'), namespaceprefix_ , eol_))
        if self.Capacity is not None:
            namespaceprefix_ = self.Capacity_nsprefix_ + ':' if (UseCapturedNS_ and self.Capacity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCapacity>%s</%sCapacity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Capacity, input_name='Capacity'), namespaceprefix_ , eol_))
        if self.PERCENT_ALC is not None:
            namespaceprefix_ = self.PERCENT_ALC_nsprefix_ + ':' if (UseCapturedNS_ and self.PERCENT_ALC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPERCENT_ALC>%s</%sPERCENT_ALC>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PERCENT_ALC, input_name='PERCENT_ALC'), namespaceprefix_ , eol_))
        if self.PERCENT_ALC_min is not None:
            namespaceprefix_ = self.PERCENT_ALC_min_nsprefix_ + ':' if (UseCapturedNS_ and self.PERCENT_ALC_min_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPERCENT_ALC_min>%s</%sPERCENT_ALC_min>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PERCENT_ALC_min, input_name='PERCENT_ALC_min'), namespaceprefix_ , eol_))
        if self.PERCENT_ALC_max is not None:
            namespaceprefix_ = self.PERCENT_ALC_max_nsprefix_ + ':' if (UseCapturedNS_ and self.PERCENT_ALC_max_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPERCENT_ALC_max>%s</%sPERCENT_ALC_max>%s' % (namespaceprefix_ , self.gds_format_decimal(self.PERCENT_ALC_max, input_name='PERCENT_ALC_max'), namespaceprefix_ , eol_))
        if self.FRAPID is not None:
            namespaceprefix_ = self.FRAPID_nsprefix_ + ':' if (UseCapturedNS_ and self.FRAPID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFRAPID>%s</%sFRAPID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FRAPID), input_name='FRAPID')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Producer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Producer')
            value_ = self.gds_validate_string(value_, node, 'Producer')
            self.Producer = value_
            self.Producer_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Producer)
        elif nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type ProductType17
            self.validate_ProductType17(self.Type)
        elif nodeName_ == 'VidCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VidCode')
            value_ = self.gds_validate_string(value_, node, 'VidCode')
            self.VidCode = value_
            self.VidCode_nsprefix_ = child_.prefix
            # validate type Digits3
            self.validate_Digits3(self.VidCode)
        elif nodeName_ == 'CountryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CountryCode')
            value_ = self.gds_validate_string(value_, node, 'CountryCode')
            self.CountryCode = value_
            self.CountryCode_nsprefix_ = child_.prefix
            # validate type Digits3
            self.validate_Digits3(self.CountryCode)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType198
            self.validate_FullNameType198(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType199
            self.validate_ShortNameType199(self.ShortName)
        elif nodeName_ == 'Unpacked_Flag' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Unpacked_Flag')
            ival_ = self.gds_validate_integer(ival_, node, 'Unpacked_Flag')
            self.Unpacked_Flag = ival_
            self.Unpacked_Flag_nsprefix_ = child_.prefix
            # validate type UnpackedType
            self.validate_UnpackedType(self.Unpacked_Flag)
        elif nodeName_ == 'Capacity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Capacity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Capacity')
            self.Capacity = fval_
            self.Capacity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Capacity)
        elif nodeName_ == 'PERCENT_ALC' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PERCENT_ALC')
            fval_ = self.gds_validate_decimal(fval_, node, 'PERCENT_ALC')
            self.PERCENT_ALC = fval_
            self.PERCENT_ALC_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.PERCENT_ALC)
        elif nodeName_ == 'PERCENT_ALC_min' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PERCENT_ALC_min')
            fval_ = self.gds_validate_decimal(fval_, node, 'PERCENT_ALC_min')
            self.PERCENT_ALC_min = fval_
            self.PERCENT_ALC_min_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.PERCENT_ALC_min)
        elif nodeName_ == 'PERCENT_ALC_max' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'PERCENT_ALC_max')
            fval_ = self.gds_validate_decimal(fval_, node, 'PERCENT_ALC_max')
            self.PERCENT_ALC_max = fval_
            self.PERCENT_ALC_max_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.PERCENT_ALC_max)
        elif nodeName_ == 'FRAPID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FRAPID')
            value_ = self.gds_validate_string(value_, node, 'FRAPID')
            self.FRAPID = value_
            self.FRAPID_nsprefix_ = child_.prefix
            # validate type NoEmptyString20
            self.validate_NoEmptyString20(self.FRAPID)
# end class RequestAddSSPPositionType


class RequestAddFProducer(GeneratedsSuper):
    """Запрос на добавление в справочник продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientId=None, RequestNumber=None, RequestDate=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientId = ClientId
        self.validate_NoEmptyString50(self.ClientId)
        self.ClientId_nsprefix_ = None
        self.RequestNumber = RequestNumber
        self.validate_NoEmptyString50(self.RequestNumber)
        self.RequestNumber_nsprefix_ = None
        if isinstance(RequestDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RequestDate, '%Y-%m-%d').date()
        else:
            initvalue_ = RequestDate
        self.RequestDate = initvalue_
        self.RequestDate_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RequestAddFProducer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RequestAddFProducer.subclass:
            return RequestAddFProducer.subclass(*args_, **kwargs_)
        else:
            return RequestAddFProducer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientId(self):
        return self.ClientId
    def set_ClientId(self, ClientId):
        self.ClientId = ClientId
    def get_RequestNumber(self):
        return self.RequestNumber
    def set_RequestNumber(self, RequestNumber):
        self.RequestNumber = RequestNumber
    def get_RequestDate(self):
        return self.RequestDate
    def set_RequestDate(self, RequestDate):
        self.RequestDate = RequestDate
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientId is not None or
            self.RequestNumber is not None or
            self.RequestDate is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestAddFProducer', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RequestAddFProducer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RequestAddFProducer':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RequestAddFProducer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RequestAddFProducer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RequestAddFProducer'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RequestAddFProducer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientId is not None:
            namespaceprefix_ = self.ClientId_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientId>%s</%sClientId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientId), input_name='ClientId')), namespaceprefix_ , eol_))
        if self.RequestNumber is not None:
            namespaceprefix_ = self.RequestNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestNumber>%s</%sRequestNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RequestNumber), input_name='RequestNumber')), namespaceprefix_ , eol_))
        if self.RequestDate is not None:
            namespaceprefix_ = self.RequestDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RequestDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRequestDate>%s</%sRequestDate>%s' % (namespaceprefix_ , self.gds_format_date(self.RequestDate, input_name='RequestDate'), namespaceprefix_ , eol_))
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientId')
            value_ = self.gds_validate_string(value_, node, 'ClientId')
            self.ClientId = value_
            self.ClientId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientId)
        elif nodeName_ == 'RequestNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RequestNumber')
            value_ = self.gds_validate_string(value_, node, 'RequestNumber')
            self.RequestNumber = value_
            self.RequestNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RequestNumber)
        elif nodeName_ == 'RequestDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.RequestDate = dval_
            self.RequestDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Content':
            obj_ = OrgInfoForeignAddType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class RequestAddFProducer


class OrgInfoForeignAddType(GeneratedsSuper):
    """Иностранные организации"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, FO=None, TS=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.FO = FO
        self.FO_nsprefix_ = None
        self.TS = TS
        self.TS_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OrgInfoForeignAddType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OrgInfoForeignAddType.subclass:
            return OrgInfoForeignAddType.subclass(*args_, **kwargs_)
        else:
            return OrgInfoForeignAddType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_FO(self):
        return self.FO
    def set_FO(self, FO):
        self.FO = FO
    def get_TS(self):
        return self.TS
    def set_TS(self, TS):
        self.TS = TS
    def hasContent_(self):
        if (
            self.FO is not None or
            self.TS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeignAddType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OrgInfoForeignAddType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'OrgInfoForeignAddType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='OrgInfoForeignAddType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='OrgInfoForeignAddType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='OrgInfoForeignAddType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='OrgInfoForeignAddType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FO is not None:
            namespaceprefix_ = self.FO_nsprefix_ + ':' if (UseCapturedNS_ and self.FO_nsprefix_) else ''
            self.FO.export(outfile, level, namespaceprefix_, namespacedef_='', name_='FO', pretty_print=pretty_print)
        if self.TS is not None:
            namespaceprefix_ = self.TS_nsprefix_ + ':' if (UseCapturedNS_ and self.TS_nsprefix_) else ''
            self.TS.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TS', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'FO':
            obj_ = AddFOType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.FO = obj_
            obj_.original_tagname_ = 'FO'
        elif nodeName_ == 'TS':
            obj_ = AddTSType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.TS = obj_
            obj_.original_tagname_ = 'TS'
# end class OrgInfoForeignAddType


class AddFOType(GeneratedsSuper):
    """Иностраная организация"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LocalClientCode=None, FullName=None, ShortName=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LocalClientCode = LocalClientCode
        self.validate_NoEmptyString50(self.LocalClientCode)
        self.LocalClientCode_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType200(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType201(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddFOType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddFOType.subclass:
            return AddFOType.subclass(*args_, **kwargs_)
        else:
            return AddFOType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LocalClientCode(self):
        return self.LocalClientCode
    def set_LocalClientCode(self, LocalClientCode):
        self.LocalClientCode = LocalClientCode
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType200(self, value):
        result = True
        # Validate type FullNameType200, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType201(self, value):
        result = True
        # Validate type ShortNameType201, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.LocalClientCode is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='AddFOType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddFOType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddFOType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddFOType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddFOType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='AddFOType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='AddFOType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocalClientCode is not None:
            namespaceprefix_ = self.LocalClientCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalClientCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalClientCode>%s</%sLocalClientCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalClientCode), input_name='LocalClientCode')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LocalClientCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalClientCode')
            value_ = self.gds_validate_string(value_, node, 'LocalClientCode')
            self.LocalClientCode = value_
            self.LocalClientCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.LocalClientCode)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType200
            self.validate_FullNameType200(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType201
            self.validate_ShortNameType201(self.ShortName)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeFOTS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class AddFOType


class AddTSType(GeneratedsSuper):
    """Организация из таможенного союза"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LocalClientCode=None, FullName=None, ShortName=None, TSNUM=None, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.LocalClientCode = LocalClientCode
        self.validate_NoEmptyString50(self.LocalClientCode)
        self.LocalClientCode_nsprefix_ = None
        self.FullName = FullName
        self.validate_FullNameType202(self.FullName)
        self.FullName_nsprefix_ = None
        self.ShortName = ShortName
        self.validate_ShortNameType203(self.ShortName)
        self.ShortName_nsprefix_ = None
        self.TSNUM = TSNUM
        self.validate_NoEmptyString50(self.TSNUM)
        self.TSNUM_nsprefix_ = None
        self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AddTSType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AddTSType.subclass:
            return AddTSType.subclass(*args_, **kwargs_)
        else:
            return AddTSType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LocalClientCode(self):
        return self.LocalClientCode
    def set_LocalClientCode(self, LocalClientCode):
        self.LocalClientCode = LocalClientCode
    def get_FullName(self):
        return self.FullName
    def set_FullName(self, FullName):
        self.FullName = FullName
    def get_ShortName(self):
        return self.ShortName
    def set_ShortName(self, ShortName):
        self.ShortName = ShortName
    def get_TSNUM(self):
        return self.TSNUM
    def set_TSNUM(self, TSNUM):
        self.TSNUM = TSNUM
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_FullNameType202(self, value):
        result = True
        # Validate type FullNameType202, a restriction on xs:string.
        pass
        return result
    def validate_ShortNameType203(self, value):
        result = True
        # Validate type ShortNameType203, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.LocalClientCode is not None or
            self.FullName is not None or
            self.ShortName is not None or
            self.TSNUM is not None or
            self.address is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='AddTSType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AddTSType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AddTSType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AddTSType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AddTSType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='AddTSType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='AddTSType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LocalClientCode is not None:
            namespaceprefix_ = self.LocalClientCode_nsprefix_ + ':' if (UseCapturedNS_ and self.LocalClientCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocalClientCode>%s</%sLocalClientCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.LocalClientCode), input_name='LocalClientCode')), namespaceprefix_ , eol_))
        if self.FullName is not None:
            namespaceprefix_ = self.FullName_nsprefix_ + ':' if (UseCapturedNS_ and self.FullName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FullName), input_name='FullName')), namespaceprefix_ , eol_))
        if self.ShortName is not None:
            namespaceprefix_ = self.ShortName_nsprefix_ + ':' if (UseCapturedNS_ and self.ShortName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShortName>%s</%sShortName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ShortName), input_name='ShortName')), namespaceprefix_ , eol_))
        if self.TSNUM is not None:
            namespaceprefix_ = self.TSNUM_nsprefix_ + ':' if (UseCapturedNS_ and self.TSNUM_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTSNUM>%s</%sTSNUM>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TSNUM), input_name='TSNUM')), namespaceprefix_ , eol_))
        if self.address is not None:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            self.address.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LocalClientCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'LocalClientCode')
            value_ = self.gds_validate_string(value_, node, 'LocalClientCode')
            self.LocalClientCode = value_
            self.LocalClientCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.LocalClientCode)
        elif nodeName_ == 'FullName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FullName')
            value_ = self.gds_validate_string(value_, node, 'FullName')
            self.FullName = value_
            self.FullName_nsprefix_ = child_.prefix
            # validate type FullNameType202
            self.validate_FullNameType202(self.FullName)
        elif nodeName_ == 'ShortName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ShortName')
            value_ = self.gds_validate_string(value_, node, 'ShortName')
            self.ShortName = value_
            self.ShortName_nsprefix_ = child_.prefix
            # validate type ShortNameType203
            self.validate_ShortNameType203(self.ShortName)
        elif nodeName_ == 'TSNUM':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TSNUM')
            value_ = self.gds_validate_string(value_, node, 'TSNUM')
            self.TSNUM = value_
            self.TSNUM_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TSNUM)
        elif nodeName_ == 'address':
            obj_ = OrgAddressTypeFOTS.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address = obj_
            obj_.original_tagname_ = 'address'
# end class AddTSType


class ReplyHistoryTransferShop(GeneratedsSuper):
    """Ответ на запрос о пермещении между регистрами 1 и 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReplyDate=None, monthReport=None, yearReport=None, AlcCode=None, History=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ReplyDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReplyDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReplyDate
        self.ReplyDate = initvalue_
        self.ReplyDate_nsprefix_ = None
        self.monthReport = monthReport
        self.validate_MonthType(self.monthReport)
        self.monthReport_nsprefix_ = None
        self.yearReport = yearReport
        self.validate_YearType(self.yearReport)
        self.yearReport_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType204(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.History = History
        self.History_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyHistoryTransferShop)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyHistoryTransferShop.subclass:
            return ReplyHistoryTransferShop.subclass(*args_, **kwargs_)
        else:
            return ReplyHistoryTransferShop(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReplyDate(self):
        return self.ReplyDate
    def set_ReplyDate(self, ReplyDate):
        self.ReplyDate = ReplyDate
    def get_monthReport(self):
        return self.monthReport
    def set_monthReport(self, monthReport):
        self.monthReport = monthReport
    def get_yearReport(self):
        return self.yearReport
    def set_yearReport(self, yearReport):
        self.yearReport = yearReport
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_History(self):
        return self.History
    def set_History(self, History):
        self.History = History
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def validate_MonthType(self, value):
        result = True
        # Validate type MonthType, a restriction on xs:string.
        pass
        return result
    def validate_YearType(self, value):
        result = True
        # Validate type YearType, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType204(self, value):
        result = True
        # Validate type AlcCodeType204, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.ReplyDate is not None or
            self.monthReport is not None or
            self.yearReport is not None or
            self.AlcCode is not None or
            self.History is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistoryTransferShop', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyHistoryTransferShop')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyHistoryTransferShop':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyHistoryTransferShop')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyHistoryTransferShop', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyHistoryTransferShop'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyHistoryTransferShop', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReplyDate is not None:
            namespaceprefix_ = self.ReplyDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReplyDate>%s</%sReplyDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReplyDate, input_name='ReplyDate'), namespaceprefix_ , eol_))
        if self.monthReport is not None:
            namespaceprefix_ = self.monthReport_nsprefix_ + ':' if (UseCapturedNS_ and self.monthReport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smonthReport>%s</%smonthReport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.monthReport), input_name='monthReport')), namespaceprefix_ , eol_))
        if self.yearReport is not None:
            namespaceprefix_ = self.yearReport_nsprefix_ + ':' if (UseCapturedNS_ and self.yearReport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%syearReport>%s</%syearReport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.yearReport), input_name='yearReport')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.History is not None:
            namespaceprefix_ = self.History_nsprefix_ + ':' if (UseCapturedNS_ and self.History_nsprefix_) else ''
            self.History.export(outfile, level, namespaceprefix_, namespacedef_='', name_='History', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReplyDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReplyDate = dval_
            self.ReplyDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.ReplyDate)
        elif nodeName_ == 'monthReport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'monthReport')
            value_ = self.gds_validate_string(value_, node, 'monthReport')
            self.monthReport = value_
            self.monthReport_nsprefix_ = child_.prefix
            # validate type MonthType
            self.validate_MonthType(self.monthReport)
        elif nodeName_ == 'yearReport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'yearReport')
            value_ = self.gds_validate_string(value_, node, 'yearReport')
            self.yearReport = value_
            self.yearReport_nsprefix_ = child_.prefix
            # validate type YearType
            self.validate_YearType(self.yearReport)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType204
            self.validate_AlcCodeType204(self.AlcCode)
        elif nodeName_ == 'History':
            obj_ = HistoryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.History = obj_
            obj_.original_tagname_ = 'History'
# end class ReplyHistoryTransferShop


class DocDataType(GeneratedsSuper):
    """Движение товара"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocType=None, DocId=None, OperDate=None, Quantity=None, RegForm2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.DocType = DocType
        self.DocType_nsprefix_ = None
        self.DocId = DocId
        self.DocId_nsprefix_ = None
        if isinstance(OperDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(OperDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = OperDate
        self.OperDate = initvalue_
        self.OperDate_nsprefix_ = None
        self.Quantity = Quantity
        self.Quantity_nsprefix_ = None
        self.RegForm2 = RegForm2
        self.RegForm2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DocDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DocDataType.subclass:
            return DocDataType.subclass(*args_, **kwargs_)
        else:
            return DocDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocType(self):
        return self.DocType
    def set_DocType(self, DocType):
        self.DocType = DocType
    def get_DocId(self):
        return self.DocId
    def set_DocId(self, DocId):
        self.DocId = DocId
    def get_OperDate(self):
        return self.OperDate
    def set_OperDate(self, OperDate):
        self.OperDate = OperDate
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_RegForm2(self):
        return self.RegForm2
    def set_RegForm2(self, RegForm2):
        self.RegForm2 = RegForm2
    def hasContent_(self):
        if (
            self.DocType is not None or
            self.DocId is not None or
            self.OperDate is not None or
            self.Quantity is not None or
            self.RegForm2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DocDataType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DocDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DocDataType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DocDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DocDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='DocDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DocDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DocType is not None:
            namespaceprefix_ = self.DocType_nsprefix_ + ':' if (UseCapturedNS_ and self.DocType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocType>%s</%sDocType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocType), input_name='DocType')), namespaceprefix_ , eol_))
        if self.DocId is not None:
            namespaceprefix_ = self.DocId_nsprefix_ + ':' if (UseCapturedNS_ and self.DocId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDocId>%s</%sDocId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DocId), input_name='DocId')), namespaceprefix_ , eol_))
        if self.OperDate is not None:
            namespaceprefix_ = self.OperDate_nsprefix_ + ':' if (UseCapturedNS_ and self.OperDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOperDate>%s</%sOperDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.OperDate, input_name='OperDate'), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.RegForm2 is not None:
            namespaceprefix_ = self.RegForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.RegForm2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegForm2>%s</%sRegForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegForm2), input_name='RegForm2')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocType')
            value_ = self.gds_validate_string(value_, node, 'DocType')
            self.DocType = value_
            self.DocType_nsprefix_ = child_.prefix
        elif nodeName_ == 'DocId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DocId')
            value_ = self.gds_validate_string(value_, node, 'DocId')
            self.DocId = value_
            self.DocId_nsprefix_ = child_.prefix
        elif nodeName_ == 'OperDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.OperDate = dval_
            self.OperDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'RegForm2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegForm2')
            value_ = self.gds_validate_string(value_, node, 'RegForm2')
            self.RegForm2 = value_
            self.RegForm2_nsprefix_ = child_.prefix
# end class DocDataType


class ReplyWOCheque(GeneratedsSuper):
    """Ответ на запрос о количестве списаний по чекам"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ReplyDate=None, monthReport=None, yearReport=None, AlcCode=None, WriteOffCh=None, ReturnCh=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(ReplyDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ReplyDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = ReplyDate
        self.ReplyDate = initvalue_
        self.ReplyDate_nsprefix_ = None
        self.monthReport = monthReport
        self.validate_MonthType(self.monthReport)
        self.monthReport_nsprefix_ = None
        self.yearReport = yearReport
        self.validate_YearType(self.yearReport)
        self.yearReport_nsprefix_ = None
        self.AlcCode = AlcCode
        self.validate_AlcCodeType205(self.AlcCode)
        self.AlcCode_nsprefix_ = None
        self.WriteOffCh = WriteOffCh
        self.WriteOffCh_nsprefix_ = None
        self.ReturnCh = ReturnCh
        self.ReturnCh_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyWOCheque)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyWOCheque.subclass:
            return ReplyWOCheque.subclass(*args_, **kwargs_)
        else:
            return ReplyWOCheque(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ReplyDate(self):
        return self.ReplyDate
    def set_ReplyDate(self, ReplyDate):
        self.ReplyDate = ReplyDate
    def get_monthReport(self):
        return self.monthReport
    def set_monthReport(self, monthReport):
        self.monthReport = monthReport
    def get_yearReport(self):
        return self.yearReport
    def set_yearReport(self, yearReport):
        self.yearReport = yearReport
    def get_AlcCode(self):
        return self.AlcCode
    def set_AlcCode(self, AlcCode):
        self.AlcCode = AlcCode
    def get_WriteOffCh(self):
        return self.WriteOffCh
    def set_WriteOffCh(self, WriteOffCh):
        self.WriteOffCh = WriteOffCh
    def get_ReturnCh(self):
        return self.ReturnCh
    def set_ReturnCh(self, ReturnCh):
        self.ReturnCh = ReturnCh
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def validate_MonthType(self, value):
        result = True
        # Validate type MonthType, a restriction on xs:string.
        pass
        return result
    def validate_YearType(self, value):
        result = True
        # Validate type YearType, a restriction on xs:string.
        pass
        return result
    def validate_AlcCodeType205(self, value):
        result = True
        # Validate type AlcCodeType205, a restriction on c:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.ReplyDate is not None or
            self.monthReport is not None or
            self.yearReport is not None or
            self.AlcCode is not None or
            self.WriteOffCh is not None or
            self.ReturnCh is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyWOCheque', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyWOCheque')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyWOCheque':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyWOCheque')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyWOCheque', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyWOCheque'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyWOCheque', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ReplyDate is not None:
            namespaceprefix_ = self.ReplyDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ReplyDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReplyDate>%s</%sReplyDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.ReplyDate, input_name='ReplyDate'), namespaceprefix_ , eol_))
        if self.monthReport is not None:
            namespaceprefix_ = self.monthReport_nsprefix_ + ':' if (UseCapturedNS_ and self.monthReport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smonthReport>%s</%smonthReport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.monthReport), input_name='monthReport')), namespaceprefix_ , eol_))
        if self.yearReport is not None:
            namespaceprefix_ = self.yearReport_nsprefix_ + ':' if (UseCapturedNS_ and self.yearReport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%syearReport>%s</%syearReport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.yearReport), input_name='yearReport')), namespaceprefix_ , eol_))
        if self.AlcCode is not None:
            namespaceprefix_ = self.AlcCode_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcCode>%s</%sAlcCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.AlcCode), input_name='AlcCode')), namespaceprefix_ , eol_))
        if self.WriteOffCh is not None:
            namespaceprefix_ = self.WriteOffCh_nsprefix_ + ':' if (UseCapturedNS_ and self.WriteOffCh_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWriteOffCh>%s</%sWriteOffCh>%s' % (namespaceprefix_ , self.gds_format_integer(self.WriteOffCh, input_name='WriteOffCh'), namespaceprefix_ , eol_))
        if self.ReturnCh is not None:
            namespaceprefix_ = self.ReturnCh_nsprefix_ + ':' if (UseCapturedNS_ and self.ReturnCh_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReturnCh>%s</%sReturnCh>%s' % (namespaceprefix_ , self.gds_format_integer(self.ReturnCh, input_name='ReturnCh'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ReplyDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.ReplyDate = dval_
            self.ReplyDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.ReplyDate)
        elif nodeName_ == 'monthReport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'monthReport')
            value_ = self.gds_validate_string(value_, node, 'monthReport')
            self.monthReport = value_
            self.monthReport_nsprefix_ = child_.prefix
            # validate type MonthType
            self.validate_MonthType(self.monthReport)
        elif nodeName_ == 'yearReport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'yearReport')
            value_ = self.gds_validate_string(value_, node, 'yearReport')
            self.yearReport = value_
            self.yearReport_nsprefix_ = child_.prefix
            # validate type YearType
            self.validate_YearType(self.yearReport)
        elif nodeName_ == 'AlcCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'AlcCode')
            value_ = self.gds_validate_string(value_, node, 'AlcCode')
            self.AlcCode = value_
            self.AlcCode_nsprefix_ = child_.prefix
            # validate type AlcCodeType205
            self.validate_AlcCodeType205(self.AlcCode)
        elif nodeName_ == 'WriteOffCh' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'WriteOffCh')
            ival_ = self.gds_validate_integer(ival_, node, 'WriteOffCh')
            self.WriteOffCh = ival_
            self.WriteOffCh_nsprefix_ = child_.prefix
        elif nodeName_ == 'ReturnCh' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'ReturnCh')
            ival_ = self.gds_validate_integer(ival_, node, 'ReturnCh')
            self.ReturnCh = ival_
            self.ReturnCh_nsprefix_ = child_.prefix
# end class ReplyWOCheque


class AscpNav(GeneratedsSuper):
    """Сведения с автоматических средств контроля положения"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Sensor=None, TimeUTC=None, Latitude=None, Longitude=None, CountSatellite=None, Accuracy=None, Course=None, Speed=None, DataLevelGauge=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Sensor = Sensor
        self.Sensor_nsprefix_ = None
        self.TimeUTC = TimeUTC
        self.TimeUTC_nsprefix_ = None
        self.Latitude = Latitude
        self.Latitude_nsprefix_ = None
        self.Longitude = Longitude
        self.Longitude_nsprefix_ = None
        self.CountSatellite = CountSatellite
        self.CountSatellite_nsprefix_ = None
        self.Accuracy = Accuracy
        self.Accuracy_nsprefix_ = None
        self.Course = Course
        self.Course_nsprefix_ = None
        self.Speed = Speed
        self.Speed_nsprefix_ = None
        self.DataLevelGauge = DataLevelGauge
        self.DataLevelGauge_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AscpNav)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AscpNav.subclass:
            return AscpNav.subclass(*args_, **kwargs_)
        else:
            return AscpNav(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Sensor(self):
        return self.Sensor
    def set_Sensor(self, Sensor):
        self.Sensor = Sensor
    def get_TimeUTC(self):
        return self.TimeUTC
    def set_TimeUTC(self, TimeUTC):
        self.TimeUTC = TimeUTC
    def get_Latitude(self):
        return self.Latitude
    def set_Latitude(self, Latitude):
        self.Latitude = Latitude
    def get_Longitude(self):
        return self.Longitude
    def set_Longitude(self, Longitude):
        self.Longitude = Longitude
    def get_CountSatellite(self):
        return self.CountSatellite
    def set_CountSatellite(self, CountSatellite):
        self.CountSatellite = CountSatellite
    def get_Accuracy(self):
        return self.Accuracy
    def set_Accuracy(self, Accuracy):
        self.Accuracy = Accuracy
    def get_Course(self):
        return self.Course
    def set_Course(self, Course):
        self.Course = Course
    def get_Speed(self):
        return self.Speed
    def set_Speed(self, Speed):
        self.Speed = Speed
    def get_DataLevelGauge(self):
        return self.DataLevelGauge
    def set_DataLevelGauge(self, DataLevelGauge):
        self.DataLevelGauge = DataLevelGauge
    def hasContent_(self):
        if (
            self.Sensor is not None or
            self.TimeUTC is not None or
            self.Latitude is not None or
            self.Longitude is not None or
            self.CountSatellite is not None or
            self.Accuracy is not None or
            self.Course is not None or
            self.Speed is not None or
            self.DataLevelGauge is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation"', name_='AscpNav', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AscpNav')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'AscpNav':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='AscpNav')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='AscpNav', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='AscpNav'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation"', name_='AscpNav', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Sensor is not None:
            namespaceprefix_ = self.Sensor_nsprefix_ + ':' if (UseCapturedNS_ and self.Sensor_nsprefix_) else ''
            self.Sensor.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Sensor', pretty_print=pretty_print)
        if self.TimeUTC is not None:
            namespaceprefix_ = self.TimeUTC_nsprefix_ + ':' if (UseCapturedNS_ and self.TimeUTC_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeUTC>%s</%sTimeUTC>%s' % (namespaceprefix_ , self.gds_format_integer(self.TimeUTC, input_name='TimeUTC'), namespaceprefix_ , eol_))
        if self.Latitude is not None:
            namespaceprefix_ = self.Latitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Latitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLatitude>%s</%sLatitude>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Latitude, input_name='Latitude'), namespaceprefix_ , eol_))
        if self.Longitude is not None:
            namespaceprefix_ = self.Longitude_nsprefix_ + ':' if (UseCapturedNS_ and self.Longitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLongitude>%s</%sLongitude>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Longitude, input_name='Longitude'), namespaceprefix_ , eol_))
        if self.CountSatellite is not None:
            namespaceprefix_ = self.CountSatellite_nsprefix_ + ':' if (UseCapturedNS_ and self.CountSatellite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountSatellite>%s</%sCountSatellite>%s' % (namespaceprefix_ , self.gds_format_integer(self.CountSatellite, input_name='CountSatellite'), namespaceprefix_ , eol_))
        if self.Accuracy is not None:
            namespaceprefix_ = self.Accuracy_nsprefix_ + ':' if (UseCapturedNS_ and self.Accuracy_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccuracy>%s</%sAccuracy>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Accuracy, input_name='Accuracy'), namespaceprefix_ , eol_))
        if self.Course is not None:
            namespaceprefix_ = self.Course_nsprefix_ + ':' if (UseCapturedNS_ and self.Course_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCourse>%s</%sCourse>%s' % (namespaceprefix_ , self.gds_format_integer(self.Course, input_name='Course'), namespaceprefix_ , eol_))
        if self.Speed is not None:
            namespaceprefix_ = self.Speed_nsprefix_ + ':' if (UseCapturedNS_ and self.Speed_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSpeed>%s</%sSpeed>%s' % (namespaceprefix_ , self.gds_format_integer(self.Speed, input_name='Speed'), namespaceprefix_ , eol_))
        if self.DataLevelGauge is not None:
            namespaceprefix_ = self.DataLevelGauge_nsprefix_ + ':' if (UseCapturedNS_ and self.DataLevelGauge_nsprefix_) else ''
            self.DataLevelGauge.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DataLevelGauge', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Sensor':
            obj_ = SensorType206.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Sensor = obj_
            obj_.original_tagname_ = 'Sensor'
        elif nodeName_ == 'TimeUTC' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'TimeUTC')
            ival_ = self.gds_validate_integer(ival_, node, 'TimeUTC')
            self.TimeUTC = ival_
            self.TimeUTC_nsprefix_ = child_.prefix
        elif nodeName_ == 'Latitude' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Latitude')
            fval_ = self.gds_validate_decimal(fval_, node, 'Latitude')
            self.Latitude = fval_
            self.Latitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'Longitude' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Longitude')
            fval_ = self.gds_validate_decimal(fval_, node, 'Longitude')
            self.Longitude = fval_
            self.Longitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'CountSatellite' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'CountSatellite')
            ival_ = self.gds_validate_integer(ival_, node, 'CountSatellite')
            self.CountSatellite = ival_
            self.CountSatellite_nsprefix_ = child_.prefix
        elif nodeName_ == 'Accuracy' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Accuracy')
            fval_ = self.gds_validate_decimal(fval_, node, 'Accuracy')
            self.Accuracy = fval_
            self.Accuracy_nsprefix_ = child_.prefix
        elif nodeName_ == 'Course' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Course')
            ival_ = self.gds_validate_integer(ival_, node, 'Course')
            self.Course = ival_
            self.Course_nsprefix_ = child_.prefix
        elif nodeName_ == 'Speed' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Speed')
            ival_ = self.gds_validate_integer(ival_, node, 'Speed')
            self.Speed = ival_
            self.Speed_nsprefix_ = child_.prefix
        elif nodeName_ == 'DataLevelGauge':
            obj_ = DataLevelGaugeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DataLevelGauge = obj_
            obj_.original_tagname_ = 'DataLevelGauge'
# end class AscpNav


class DataType37(GeneratedsSuper):
    """Строка данных измерений"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, Readings=None, Temperature=None, Density=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.Number_nsprefix_ = None
        self.Readings = Readings
        self.Readings_nsprefix_ = None
        self.Temperature = Temperature
        self.Temperature_nsprefix_ = None
        self.Density = Density
        self.Density_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataType37)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataType37.subclass:
            return DataType37.subclass(*args_, **kwargs_)
        else:
            return DataType37(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_Readings(self):
        return self.Readings
    def set_Readings(self, Readings):
        self.Readings = Readings
    def get_Temperature(self):
        return self.Temperature
    def set_Temperature(self, Temperature):
        self.Temperature = Temperature
    def get_Density(self):
        return self.Density
    def set_Density(self, Density):
        self.Density = Density
    def hasContent_(self):
        if (
            self.Number is not None or
            self.Readings is not None or
            self.Temperature is not None or
            self.Density is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation"', name_='DataType37', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataType37')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataType37':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataType37')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataType37', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='as:', name_='DataType37'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='as:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation"', name_='DataType37', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.Number, input_name='Number'), namespaceprefix_ , eol_))
        if self.Readings is not None:
            namespaceprefix_ = self.Readings_nsprefix_ + ':' if (UseCapturedNS_ and self.Readings_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReadings>%s</%sReadings>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Readings, input_name='Readings'), namespaceprefix_ , eol_))
        if self.Temperature is not None:
            namespaceprefix_ = self.Temperature_nsprefix_ + ':' if (UseCapturedNS_ and self.Temperature_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTemperature>%s</%sTemperature>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Temperature, input_name='Temperature'), namespaceprefix_ , eol_))
        if self.Density is not None:
            namespaceprefix_ = self.Density_nsprefix_ + ':' if (UseCapturedNS_ and self.Density_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDensity>%s</%sDensity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Density, input_name='Density'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'Number')
            ival_ = self.gds_validate_integer(ival_, node, 'Number')
            self.Number = ival_
            self.Number_nsprefix_ = child_.prefix
        elif nodeName_ == 'Readings' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Readings')
            fval_ = self.gds_validate_decimal(fval_, node, 'Readings')
            self.Readings = fval_
            self.Readings_nsprefix_ = child_.prefix
        elif nodeName_ == 'Temperature' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Temperature')
            fval_ = self.gds_validate_decimal(fval_, node, 'Temperature')
            self.Temperature = fval_
            self.Temperature_nsprefix_ = child_.prefix
        elif nodeName_ == 'Density' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Density')
            fval_ = self.gds_validate_decimal(fval_, node, 'Density')
            self.Density = fval_
            self.Density_nsprefix_ = child_.prefix
# end class DataType37


class WayBillType_v3(GeneratedsSuper):
    """Товарно-Транспортная Накладная"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillType_v3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillType_v3.subclass:
            return WayBillType_v3.subclass(*args_, **kwargs_)
        else:
            return WayBillType_v3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType_v3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillType_v3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillType_v3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillType_v3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillType_v3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillType_v3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillType_v3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType207.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType213.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillType_v3


class PositionType38(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, Pack_ID=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Price=None, Party=None, Identity=None, EXCISE_NUMBER=None, EXCISE_DATE=None, EXCISE_SUM=None, EXCISE_BS=None, EAN13=None, FARegId=None, InformF2=None, boxInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.Pack_ID = Pack_ID
        self.validate_NoEmptyString50(self.Pack_ID)
        self.Pack_ID_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Price = Price
        self.validate_NoNegativeDecimalType(self.Price)
        self.Price_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.EXCISE_NUMBER = EXCISE_NUMBER
        self.validate_EXCISE_NUMBERType(self.EXCISE_NUMBER)
        self.EXCISE_NUMBER_nsprefix_ = None
        if isinstance(EXCISE_DATE, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EXCISE_DATE, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = EXCISE_DATE
        self.EXCISE_DATE = initvalue_
        self.EXCISE_DATE_nsprefix_ = None
        self.EXCISE_SUM = EXCISE_SUM
        self.validate_NoNegativeDecimalType(self.EXCISE_SUM)
        self.EXCISE_SUM_nsprefix_ = None
        self.EXCISE_BS = EXCISE_BS
        self.validate_PositiveDecimalType(self.EXCISE_BS)
        self.EXCISE_BS_nsprefix_ = None
        self.EAN13 = EAN13
        self.validate_EAN13Type(self.EAN13)
        self.EAN13_nsprefix_ = None
        self.FARegId = FARegId
        self.validate_NoEmptyString50(self.FARegId)
        self.FARegId_nsprefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
        self.boxInfo = boxInfo
        self.boxInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType38)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType38.subclass:
            return PositionType38.subclass(*args_, **kwargs_)
        else:
            return PositionType38(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_Pack_ID(self):
        return self.Pack_ID
    def set_Pack_ID(self, Pack_ID):
        self.Pack_ID = Pack_ID
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Price(self):
        return self.Price
    def set_Price(self, Price):
        self.Price = Price
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_EXCISE_NUMBER(self):
        return self.EXCISE_NUMBER
    def set_EXCISE_NUMBER(self, EXCISE_NUMBER):
        self.EXCISE_NUMBER = EXCISE_NUMBER
    def get_EXCISE_DATE(self):
        return self.EXCISE_DATE
    def set_EXCISE_DATE(self, EXCISE_DATE):
        self.EXCISE_DATE = EXCISE_DATE
    def get_EXCISE_SUM(self):
        return self.EXCISE_SUM
    def set_EXCISE_SUM(self, EXCISE_SUM):
        self.EXCISE_SUM = EXCISE_SUM
    def get_EXCISE_BS(self):
        return self.EXCISE_BS
    def set_EXCISE_BS(self, EXCISE_BS):
        self.EXCISE_BS = EXCISE_BS
    def get_EAN13(self):
        return self.EAN13
    def set_EAN13(self, EAN13):
        self.EAN13 = EAN13
    def get_FARegId(self):
        return self.FARegId
    def set_FARegId(self, FARegId):
        self.FARegId = FARegId
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def get_boxInfo(self):
        return self.boxInfo
    def set_boxInfo(self, boxInfo):
        self.boxInfo = boxInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_EXCISE_NUMBERType(self, value):
        result = True
        # Validate type EXCISE_NUMBERType, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def validate_EAN13Type(self, value):
        result = True
        # Validate type EAN13Type, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Product is not None or
            self.Pack_ID is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Price is not None or
            self.Party is not None or
            self.Identity is not None or
            self.EXCISE_NUMBER is not None or
            self.EXCISE_DATE is not None or
            self.EXCISE_SUM is not None or
            self.EXCISE_BS is not None or
            self.EAN13 is not None or
            self.FARegId is not None or
            self.InformF2 is not None or
            self.boxInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='PositionType38', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType38')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType38':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType38')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType38', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType38'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef"  xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='PositionType38', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.Pack_ID is not None:
            namespaceprefix_ = self.Pack_ID_nsprefix_ + ':' if (UseCapturedNS_ and self.Pack_ID_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPack_ID>%s</%sPack_ID>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Pack_ID), input_name='Pack_ID')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Price is not None:
            namespaceprefix_ = self.Price_nsprefix_ + ':' if (UseCapturedNS_ and self.Price_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Price, input_name='Price'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.EXCISE_NUMBER is not None:
            namespaceprefix_ = self.EXCISE_NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.EXCISE_NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCISE_NUMBER>%s</%sEXCISE_NUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EXCISE_NUMBER), input_name='EXCISE_NUMBER')), namespaceprefix_ , eol_))
        if self.EXCISE_DATE is not None:
            namespaceprefix_ = self.EXCISE_DATE_nsprefix_ + ':' if (UseCapturedNS_ and self.EXCISE_DATE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCISE_DATE>%s</%sEXCISE_DATE>%s' % (namespaceprefix_ , self.gds_format_datetime(self.EXCISE_DATE, input_name='EXCISE_DATE'), namespaceprefix_ , eol_))
        if self.EXCISE_SUM is not None:
            namespaceprefix_ = self.EXCISE_SUM_nsprefix_ + ':' if (UseCapturedNS_ and self.EXCISE_SUM_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCISE_SUM>%s</%sEXCISE_SUM>%s' % (namespaceprefix_ , self.gds_format_decimal(self.EXCISE_SUM, input_name='EXCISE_SUM'), namespaceprefix_ , eol_))
        if self.EXCISE_BS is not None:
            namespaceprefix_ = self.EXCISE_BS_nsprefix_ + ':' if (UseCapturedNS_ and self.EXCISE_BS_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXCISE_BS>%s</%sEXCISE_BS>%s' % (namespaceprefix_ , self.gds_format_decimal(self.EXCISE_BS, input_name='EXCISE_BS'), namespaceprefix_ , eol_))
        if self.EAN13 is not None:
            namespaceprefix_ = self.EAN13_nsprefix_ + ':' if (UseCapturedNS_ and self.EAN13_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEAN13>%s</%sEAN13>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EAN13), input_name='EAN13')), namespaceprefix_ , eol_))
        if self.FARegId is not None:
            namespaceprefix_ = self.FARegId_nsprefix_ + ':' if (UseCapturedNS_ and self.FARegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFARegId>%s</%sFARegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.FARegId), input_name='FARegId')), namespaceprefix_ , eol_))
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
        if self.boxInfo is not None:
            namespaceprefix_ = self.boxInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.boxInfo_nsprefix_) else ''
            self.boxInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='boxInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'Pack_ID':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Pack_ID')
            value_ = self.gds_validate_string(value_, node, 'Pack_ID')
            self.Pack_ID = value_
            self.Pack_ID_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Pack_ID)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Price' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Price')
            fval_ = self.gds_validate_decimal(fval_, node, 'Price')
            self.Price = fval_
            self.Price_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.Price)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'EXCISE_NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EXCISE_NUMBER')
            value_ = self.gds_validate_string(value_, node, 'EXCISE_NUMBER')
            self.EXCISE_NUMBER = value_
            self.EXCISE_NUMBER_nsprefix_ = child_.prefix
            # validate type EXCISE_NUMBERType
            self.validate_EXCISE_NUMBERType(self.EXCISE_NUMBER)
        elif nodeName_ == 'EXCISE_DATE':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.EXCISE_DATE = dval_
            self.EXCISE_DATE_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.EXCISE_DATE)
        elif nodeName_ == 'EXCISE_SUM' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'EXCISE_SUM')
            fval_ = self.gds_validate_decimal(fval_, node, 'EXCISE_SUM')
            self.EXCISE_SUM = fval_
            self.EXCISE_SUM_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.EXCISE_SUM)
        elif nodeName_ == 'EXCISE_BS' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'EXCISE_BS')
            fval_ = self.gds_validate_decimal(fval_, node, 'EXCISE_BS')
            self.EXCISE_BS = fval_
            self.EXCISE_BS_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.EXCISE_BS)
        elif nodeName_ == 'EAN13':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EAN13')
            value_ = self.gds_validate_string(value_, node, 'EAN13')
            self.EAN13 = value_
            self.EAN13_nsprefix_ = child_.prefix
            # validate type EAN13Type
            self.validate_EAN13Type(self.EAN13)
        elif nodeName_ == 'FARegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'FARegId')
            value_ = self.gds_validate_string(value_, node, 'FARegId')
            self.FARegId = value_
            self.FARegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.FARegId)
        elif nodeName_ == 'InformF2':
            obj_ = InformF2TypeItemBC.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
        elif nodeName_ == 'boxInfo':
            obj_ = boxInfoType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.boxInfo = obj_
            obj_.original_tagname_ = 'boxInfo'
# end class PositionType38


class TransportType39(GeneratedsSuper):
    """Транспортный раздел"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TRAN_TYPE=None, TRAN_COMPANY=None, TRAN_CAR=None, TRAN_TRAILER=None, TRAN_CUSTOMER=None, TRAN_DRIVER=None, TRAN_LOADPOINT=None, TRAN_UNLOADPOINT=None, TRAN_REDIRECT=None, TRAN_FORWARDER=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TRAN_TYPE = TRAN_TYPE
        self.validate_TRAN_TYPEType214(self.TRAN_TYPE)
        self.TRAN_TYPE_nsprefix_ = None
        self.TRAN_COMPANY = TRAN_COMPANY
        self.validate_TRAN_COMPANYType215(self.TRAN_COMPANY)
        self.TRAN_COMPANY_nsprefix_ = None
        self.TRAN_CAR = TRAN_CAR
        self.validate_TRAN_CARType216(self.TRAN_CAR)
        self.TRAN_CAR_nsprefix_ = None
        self.TRAN_TRAILER = TRAN_TRAILER
        self.validate_TRAN_TRAILERType217(self.TRAN_TRAILER)
        self.TRAN_TRAILER_nsprefix_ = None
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
        self.validate_TRAN_CUSTOMERType218(self.TRAN_CUSTOMER)
        self.TRAN_CUSTOMER_nsprefix_ = None
        self.TRAN_DRIVER = TRAN_DRIVER
        self.validate_TRAN_DRIVERType219(self.TRAN_DRIVER)
        self.TRAN_DRIVER_nsprefix_ = None
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
        self.validate_TRAN_LOADPOINTType220(self.TRAN_LOADPOINT)
        self.TRAN_LOADPOINT_nsprefix_ = None
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
        self.validate_TRAN_UNLOADPOINTType221(self.TRAN_UNLOADPOINT)
        self.TRAN_UNLOADPOINT_nsprefix_ = None
        self.TRAN_REDIRECT = TRAN_REDIRECT
        self.validate_TRAN_REDIRECTType222(self.TRAN_REDIRECT)
        self.TRAN_REDIRECT_nsprefix_ = None
        self.TRAN_FORWARDER = TRAN_FORWARDER
        self.validate_TRAN_FORWARDERType223(self.TRAN_FORWARDER)
        self.TRAN_FORWARDER_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransportType39)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransportType39.subclass:
            return TransportType39.subclass(*args_, **kwargs_)
        else:
            return TransportType39(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TRAN_TYPE(self):
        return self.TRAN_TYPE
    def set_TRAN_TYPE(self, TRAN_TYPE):
        self.TRAN_TYPE = TRAN_TYPE
    def get_TRAN_COMPANY(self):
        return self.TRAN_COMPANY
    def set_TRAN_COMPANY(self, TRAN_COMPANY):
        self.TRAN_COMPANY = TRAN_COMPANY
    def get_TRAN_CAR(self):
        return self.TRAN_CAR
    def set_TRAN_CAR(self, TRAN_CAR):
        self.TRAN_CAR = TRAN_CAR
    def get_TRAN_TRAILER(self):
        return self.TRAN_TRAILER
    def set_TRAN_TRAILER(self, TRAN_TRAILER):
        self.TRAN_TRAILER = TRAN_TRAILER
    def get_TRAN_CUSTOMER(self):
        return self.TRAN_CUSTOMER
    def set_TRAN_CUSTOMER(self, TRAN_CUSTOMER):
        self.TRAN_CUSTOMER = TRAN_CUSTOMER
    def get_TRAN_DRIVER(self):
        return self.TRAN_DRIVER
    def set_TRAN_DRIVER(self, TRAN_DRIVER):
        self.TRAN_DRIVER = TRAN_DRIVER
    def get_TRAN_LOADPOINT(self):
        return self.TRAN_LOADPOINT
    def set_TRAN_LOADPOINT(self, TRAN_LOADPOINT):
        self.TRAN_LOADPOINT = TRAN_LOADPOINT
    def get_TRAN_UNLOADPOINT(self):
        return self.TRAN_UNLOADPOINT
    def set_TRAN_UNLOADPOINT(self, TRAN_UNLOADPOINT):
        self.TRAN_UNLOADPOINT = TRAN_UNLOADPOINT
    def get_TRAN_REDIRECT(self):
        return self.TRAN_REDIRECT
    def set_TRAN_REDIRECT(self, TRAN_REDIRECT):
        self.TRAN_REDIRECT = TRAN_REDIRECT
    def get_TRAN_FORWARDER(self):
        return self.TRAN_FORWARDER
    def set_TRAN_FORWARDER(self, TRAN_FORWARDER):
        self.TRAN_FORWARDER = TRAN_FORWARDER
    def validate_TRAN_TYPEType214(self, value):
        result = True
        # Validate type TRAN_TYPEType214, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_COMPANYType215(self, value):
        result = True
        # Validate type TRAN_COMPANYType215, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CARType216(self, value):
        result = True
        # Validate type TRAN_CARType216, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_TRAILERType217(self, value):
        result = True
        # Validate type TRAN_TRAILERType217, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_CUSTOMERType218(self, value):
        result = True
        # Validate type TRAN_CUSTOMERType218, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_DRIVERType219(self, value):
        result = True
        # Validate type TRAN_DRIVERType219, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_LOADPOINTType220(self, value):
        result = True
        # Validate type TRAN_LOADPOINTType220, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_UNLOADPOINTType221(self, value):
        result = True
        # Validate type TRAN_UNLOADPOINTType221, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_REDIRECTType222(self, value):
        result = True
        # Validate type TRAN_REDIRECTType222, a restriction on xs:string.
        pass
        return result
    def validate_TRAN_FORWARDERType223(self, value):
        result = True
        # Validate type TRAN_FORWARDERType223, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.TRAN_TYPE is not None or
            self.TRAN_COMPANY is not None or
            self.TRAN_CAR is not None or
            self.TRAN_TRAILER is not None or
            self.TRAN_CUSTOMER is not None or
            self.TRAN_DRIVER is not None or
            self.TRAN_LOADPOINT is not None or
            self.TRAN_UNLOADPOINT is not None or
            self.TRAN_REDIRECT is not None or
            self.TRAN_FORWARDER is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType39', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransportType39')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TransportType39':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransportType39')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TransportType39', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TransportType39'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TransportType39', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TRAN_TYPE is not None:
            namespaceprefix_ = self.TRAN_TYPE_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TYPE_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TYPE>%s</%sTRAN_TYPE>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TYPE), input_name='TRAN_TYPE')), namespaceprefix_ , eol_))
        if self.TRAN_COMPANY is not None:
            namespaceprefix_ = self.TRAN_COMPANY_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_COMPANY_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_COMPANY>%s</%sTRAN_COMPANY>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_COMPANY), input_name='TRAN_COMPANY')), namespaceprefix_ , eol_))
        if self.TRAN_CAR is not None:
            namespaceprefix_ = self.TRAN_CAR_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CAR_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CAR>%s</%sTRAN_CAR>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CAR), input_name='TRAN_CAR')), namespaceprefix_ , eol_))
        if self.TRAN_TRAILER is not None:
            namespaceprefix_ = self.TRAN_TRAILER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_TRAILER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_TRAILER>%s</%sTRAN_TRAILER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_TRAILER), input_name='TRAN_TRAILER')), namespaceprefix_ , eol_))
        if self.TRAN_CUSTOMER is not None:
            namespaceprefix_ = self.TRAN_CUSTOMER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_CUSTOMER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_CUSTOMER>%s</%sTRAN_CUSTOMER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_CUSTOMER), input_name='TRAN_CUSTOMER')), namespaceprefix_ , eol_))
        if self.TRAN_DRIVER is not None:
            namespaceprefix_ = self.TRAN_DRIVER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_DRIVER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_DRIVER>%s</%sTRAN_DRIVER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_DRIVER), input_name='TRAN_DRIVER')), namespaceprefix_ , eol_))
        if self.TRAN_LOADPOINT is not None:
            namespaceprefix_ = self.TRAN_LOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_LOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_LOADPOINT>%s</%sTRAN_LOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_LOADPOINT), input_name='TRAN_LOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_UNLOADPOINT is not None:
            namespaceprefix_ = self.TRAN_UNLOADPOINT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_UNLOADPOINT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_UNLOADPOINT>%s</%sTRAN_UNLOADPOINT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_UNLOADPOINT), input_name='TRAN_UNLOADPOINT')), namespaceprefix_ , eol_))
        if self.TRAN_REDIRECT is not None:
            namespaceprefix_ = self.TRAN_REDIRECT_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_REDIRECT_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_REDIRECT>%s</%sTRAN_REDIRECT>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_REDIRECT), input_name='TRAN_REDIRECT')), namespaceprefix_ , eol_))
        if self.TRAN_FORWARDER is not None:
            namespaceprefix_ = self.TRAN_FORWARDER_nsprefix_ + ':' if (UseCapturedNS_ and self.TRAN_FORWARDER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRAN_FORWARDER>%s</%sTRAN_FORWARDER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TRAN_FORWARDER), input_name='TRAN_FORWARDER')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TRAN_TYPE':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TYPE')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TYPE')
            self.TRAN_TYPE = value_
            self.TRAN_TYPE_nsprefix_ = child_.prefix
            # validate type TRAN_TYPEType214
            self.validate_TRAN_TYPEType214(self.TRAN_TYPE)
        elif nodeName_ == 'TRAN_COMPANY':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_COMPANY')
            value_ = self.gds_validate_string(value_, node, 'TRAN_COMPANY')
            self.TRAN_COMPANY = value_
            self.TRAN_COMPANY_nsprefix_ = child_.prefix
            # validate type TRAN_COMPANYType215
            self.validate_TRAN_COMPANYType215(self.TRAN_COMPANY)
        elif nodeName_ == 'TRAN_CAR':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CAR')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CAR')
            self.TRAN_CAR = value_
            self.TRAN_CAR_nsprefix_ = child_.prefix
            # validate type TRAN_CARType216
            self.validate_TRAN_CARType216(self.TRAN_CAR)
        elif nodeName_ == 'TRAN_TRAILER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_TRAILER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_TRAILER')
            self.TRAN_TRAILER = value_
            self.TRAN_TRAILER_nsprefix_ = child_.prefix
            # validate type TRAN_TRAILERType217
            self.validate_TRAN_TRAILERType217(self.TRAN_TRAILER)
        elif nodeName_ == 'TRAN_CUSTOMER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_CUSTOMER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_CUSTOMER')
            self.TRAN_CUSTOMER = value_
            self.TRAN_CUSTOMER_nsprefix_ = child_.prefix
            # validate type TRAN_CUSTOMERType218
            self.validate_TRAN_CUSTOMERType218(self.TRAN_CUSTOMER)
        elif nodeName_ == 'TRAN_DRIVER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_DRIVER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_DRIVER')
            self.TRAN_DRIVER = value_
            self.TRAN_DRIVER_nsprefix_ = child_.prefix
            # validate type TRAN_DRIVERType219
            self.validate_TRAN_DRIVERType219(self.TRAN_DRIVER)
        elif nodeName_ == 'TRAN_LOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_LOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_LOADPOINT')
            self.TRAN_LOADPOINT = value_
            self.TRAN_LOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_LOADPOINTType220
            self.validate_TRAN_LOADPOINTType220(self.TRAN_LOADPOINT)
        elif nodeName_ == 'TRAN_UNLOADPOINT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_UNLOADPOINT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_UNLOADPOINT')
            self.TRAN_UNLOADPOINT = value_
            self.TRAN_UNLOADPOINT_nsprefix_ = child_.prefix
            # validate type TRAN_UNLOADPOINTType221
            self.validate_TRAN_UNLOADPOINTType221(self.TRAN_UNLOADPOINT)
        elif nodeName_ == 'TRAN_REDIRECT':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_REDIRECT')
            value_ = self.gds_validate_string(value_, node, 'TRAN_REDIRECT')
            self.TRAN_REDIRECT = value_
            self.TRAN_REDIRECT_nsprefix_ = child_.prefix
            # validate type TRAN_REDIRECTType222
            self.validate_TRAN_REDIRECTType222(self.TRAN_REDIRECT)
        elif nodeName_ == 'TRAN_FORWARDER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TRAN_FORWARDER')
            value_ = self.gds_validate_string(value_, node, 'TRAN_FORWARDER')
            self.TRAN_FORWARDER = value_
            self.TRAN_FORWARDER_nsprefix_ = child_.prefix
            # validate type TRAN_FORWARDERType223
            self.validate_TRAN_FORWARDERType223(self.TRAN_FORWARDER)
# end class TransportType39


class ActWriteOffType_v3(GeneratedsSuper):
    """Акт списания"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffType_v3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffType_v3.subclass:
            return ActWriteOffType_v3.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffType_v3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType_v3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffType_v3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffType_v3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffType_v3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffType_v3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffType_v3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActWriteOffType_v3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType224.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType226.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActWriteOffType_v3


class ActWriteOffPositionType42(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Quantity=None, SumSale=None, InformF1F2=None, MarkCodeInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.SumSale = SumSale
        self.validate_NoNegativeDecimalType(self.SumSale)
        self.SumSale_nsprefix_ = None
        self.InformF1F2 = InformF1F2
        self.InformF1F2_nsprefix_ = None
        self.MarkCodeInfo = MarkCodeInfo
        self.MarkCodeInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActWriteOffPositionType42)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActWriteOffPositionType42.subclass:
            return ActWriteOffPositionType42.subclass(*args_, **kwargs_)
        else:
            return ActWriteOffPositionType42(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_SumSale(self):
        return self.SumSale
    def set_SumSale(self, SumSale):
        self.SumSale = SumSale
    def get_InformF1F2(self):
        return self.InformF1F2
    def set_InformF1F2(self, InformF1F2):
        self.InformF1F2 = InformF1F2
    def get_MarkCodeInfo(self):
        return self.MarkCodeInfo
    def set_MarkCodeInfo(self, MarkCodeInfo):
        self.MarkCodeInfo = MarkCodeInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Quantity is not None or
            self.SumSale is not None or
            self.InformF1F2 is not None or
            self.MarkCodeInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActWriteOffPositionType42', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActWriteOffPositionType42')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActWriteOffPositionType42':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActWriteOffPositionType42')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActWriteOffPositionType42', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActWriteOffPositionType42'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActWriteOffPositionType42', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.SumSale is not None:
            namespaceprefix_ = self.SumSale_nsprefix_ + ':' if (UseCapturedNS_ and self.SumSale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSumSale>%s</%sSumSale>%s' % (namespaceprefix_ , self.gds_format_decimal(self.SumSale, input_name='SumSale'), namespaceprefix_ , eol_))
        if self.InformF1F2 is not None:
            namespaceprefix_ = self.InformF1F2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1F2_nsprefix_) else ''
            self.InformF1F2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1F2', pretty_print=pretty_print)
        if self.MarkCodeInfo is not None:
            namespaceprefix_ = self.MarkCodeInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkCodeInfo_nsprefix_) else ''
            self.MarkCodeInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkCodeInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'SumSale' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'SumSale')
            fval_ = self.gds_validate_decimal(fval_, node, 'SumSale')
            self.SumSale = fval_
            self.SumSale_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.SumSale)
        elif nodeName_ == 'InformF1F2':
            obj_ = InformF1F243.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1F2 = obj_
            obj_.original_tagname_ = 'InformF1F2'
        elif nodeName_ == 'MarkCodeInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkCodeInfo = obj_
            obj_.original_tagname_ = 'MarkCodeInfo'
# end class ActWriteOffPositionType42


class InformF1F243(GeneratedsSuper):
    """Должна быть указанана или форма 1 или форма 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2=None, InformF1=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2 = InformF2
        self.InformF2_nsprefix_ = None
        self.InformF1 = InformF1
        self.InformF1_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1F243)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1F243.subclass:
            return InformF1F243.subclass(*args_, **kwargs_)
        else:
            return InformF1F243(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2(self):
        return self.InformF2
    def set_InformF2(self, InformF2):
        self.InformF2 = InformF2
    def get_InformF1(self):
        return self.InformF1
    def set_InformF1(self, InformF1):
        self.InformF1 = InformF1
    def hasContent_(self):
        if (
            self.InformF2 is not None or
            self.InformF1 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformF1F243', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1F243')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1F243':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1F243')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1F243', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformF1F243'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='InformF1F243', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2 is not None:
            namespaceprefix_ = self.InformF2_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2_nsprefix_) else ''
            self.InformF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2', pretty_print=pretty_print)
        if self.InformF1 is not None:
            namespaceprefix_ = self.InformF1_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1_nsprefix_) else ''
            self.InformF1.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2':
            obj_ = InformF2TypeItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2 = obj_
            obj_.original_tagname_ = 'InformF2'
        elif nodeName_ == 'InformF1':
            obj_ = InformF1Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1 = obj_
            obj_.original_tagname_ = 'InformF1'
# end class InformF1F243


class WayBillActType_v3(GeneratedsSuper):
    """Акт разногласий для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WayBillActType_v3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WayBillActType_v3.subclass:
            return WayBillActType_v3.subclass(*args_, **kwargs_)
        else:
            return WayBillActType_v3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType_v3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('WayBillActType_v3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'WayBillActType_v3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='WayBillActType_v3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='WayBillActType_v3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='WayBillActType_v3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='WayBillActType_v3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType227.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType229.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class WayBillActType_v3


class PositionType44(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, InformF2RegId=None, RealQuantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        self.RealQuantity = RealQuantity
        self.validate_NoNegativeDecimalType(self.RealQuantity)
        self.RealQuantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType44)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType44.subclass:
            return PositionType44.subclass(*args_, **kwargs_)
        else:
            return PositionType44(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_RealQuantity(self):
        return self.RealQuantity
    def set_RealQuantity(self, RealQuantity):
        self.RealQuantity = RealQuantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_NoNegativeDecimalType(self, value):
        result = True
        # Validate type NoNegativeDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.InformF2RegId is not None or
            self.RealQuantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='PositionType44', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType44')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType44':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType44')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType44', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType44'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='PositionType44', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.RealQuantity is not None:
            namespaceprefix_ = self.RealQuantity_nsprefix_ + ':' if (UseCapturedNS_ and self.RealQuantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRealQuantity>%s</%sRealQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.RealQuantity, input_name='RealQuantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'RealQuantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'RealQuantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'RealQuantity')
            self.RealQuantity = fval_
            self.RealQuantity_nsprefix_ = child_.prefix
            # validate type NoNegativeDecimalType
            self.validate_NoNegativeDecimalType(self.RealQuantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class PositionType44


class RepProducedType_v3(GeneratedsSuper):
    """Отчет о производстве продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, ContentResource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
        self.ContentResource = ContentResource
        self.ContentResource_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepProducedType_v3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepProducedType_v3.subclass:
            return RepProducedType_v3.subclass(*args_, **kwargs_)
        else:
            return RepProducedType_v3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def get_ContentResource(self):
        return self.ContentResource
    def set_ContentResource(self, ContentResource):
        self.ContentResource = ContentResource
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None or
            self.ContentResource is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepProducedType_v3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepProducedType_v3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepProducedType_v3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepProducedType_v3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepProducedType_v3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RepProducedType_v3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepProducedType_v3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
        if self.ContentResource is not None:
            namespaceprefix_ = self.ContentResource_nsprefix_ + ':' if (UseCapturedNS_ and self.ContentResource_nsprefix_) else ''
            self.ContentResource.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContentResource', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType230.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType232.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
        elif nodeName_ == 'ContentResource':
            obj_ = ContentResourceType233.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ContentResource = obj_
            obj_.original_tagname_ = 'ContentResource'
# end class RepProducedType_v3


class PositionType46(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProductCode=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Party=None, Identity=None, Comment1=None, Comment2=None, Comment3=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Comment1 = Comment1
        self.validate_Comment1Type234(self.Comment1)
        self.Comment1_nsprefix_ = None
        self.Comment2 = Comment2
        self.validate_Comment2Type235(self.Comment2)
        self.Comment2_nsprefix_ = None
        self.Comment3 = Comment3
        self.validate_Comment3Type236(self.Comment3)
        self.Comment3_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType46)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType46.subclass:
            return PositionType46.subclass(*args_, **kwargs_)
        else:
            return PositionType46(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Comment1(self):
        return self.Comment1
    def set_Comment1(self, Comment1):
        self.Comment1 = Comment1
    def get_Comment2(self):
        return self.Comment2
    def set_Comment2(self, Comment2):
        self.Comment2 = Comment2
    def get_Comment3(self):
        return self.Comment3
    def set_Comment3(self, Comment3):
        self.Comment3 = Comment3
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_Comment1Type234(self, value):
        result = True
        # Validate type Comment1Type234, a restriction on xs:string.
        pass
        return result
    def validate_Comment2Type235(self, value):
        result = True
        # Validate type Comment2Type235, a restriction on xs:string.
        pass
        return result
    def validate_Comment3Type236(self, value):
        result = True
        # Validate type Comment3Type236, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ProductCode is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Party is not None or
            self.Identity is not None or
            self.Comment1 is not None or
            self.Comment2 is not None or
            self.Comment3 is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='PositionType46', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType46')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType46':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType46')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType46', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType46'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='PositionType46', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Comment1 is not None:
            namespaceprefix_ = self.Comment1_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment1>%s</%sComment1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment1), input_name='Comment1')), namespaceprefix_ , eol_))
        if self.Comment2 is not None:
            namespaceprefix_ = self.Comment2_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment2>%s</%sComment2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment2), input_name='Comment2')), namespaceprefix_ , eol_))
        if self.Comment3 is not None:
            namespaceprefix_ = self.Comment3_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment3>%s</%sComment3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment3), input_name='Comment3')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Comment1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment1')
            value_ = self.gds_validate_string(value_, node, 'Comment1')
            self.Comment1 = value_
            self.Comment1_nsprefix_ = child_.prefix
            # validate type Comment1Type234
            self.validate_Comment1Type234(self.Comment1)
        elif nodeName_ == 'Comment2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment2')
            value_ = self.gds_validate_string(value_, node, 'Comment2')
            self.Comment2 = value_
            self.Comment2_nsprefix_ = child_.prefix
            # validate type Comment2Type235
            self.validate_Comment2Type235(self.Comment2)
        elif nodeName_ == 'Comment3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment3')
            value_ = self.gds_validate_string(value_, node, 'Comment3')
            self.Comment3 = value_
            self.Comment3_nsprefix_ = child_.prefix
            # validate type Comment3Type236
            self.validate_Comment3Type236(self.Comment3)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class PositionType46


class UsedResourceType47(GeneratedsSuper):
    """Сырье использованное для производства продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IdentityRes=None, Product=None, RegForm2=None, Quantity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IdentityRes = IdentityRes
        self.validate_IdentityType(self.IdentityRes)
        self.IdentityRes_nsprefix_ = None
        self.Product = Product
        self.Product_nsprefix_ = None
        self.RegForm2 = RegForm2
        self.validate_NoEmptyString50(self.RegForm2)
        self.RegForm2_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UsedResourceType47)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UsedResourceType47.subclass:
            return UsedResourceType47.subclass(*args_, **kwargs_)
        else:
            return UsedResourceType47(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IdentityRes(self):
        return self.IdentityRes
    def set_IdentityRes(self, IdentityRes):
        self.IdentityRes = IdentityRes
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def get_RegForm2(self):
        return self.RegForm2
    def set_RegForm2(self, RegForm2):
        self.RegForm2 = RegForm2
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def hasContent_(self):
        if (
            self.IdentityRes is not None or
            self.Product is not None or
            self.RegForm2 is not None or
            self.Quantity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='UsedResourceType47', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('UsedResourceType47')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'UsedResourceType47':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='UsedResourceType47')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='UsedResourceType47', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='UsedResourceType47'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='UsedResourceType47', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentityRes is not None:
            namespaceprefix_ = self.IdentityRes_nsprefix_ + ':' if (UseCapturedNS_ and self.IdentityRes_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentityRes>%s</%sIdentityRes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IdentityRes), input_name='IdentityRes')), namespaceprefix_ , eol_))
        if self.Product is not None:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            self.Product.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
        if self.RegForm2 is not None:
            namespaceprefix_ = self.RegForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.RegForm2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegForm2>%s</%sRegForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RegForm2), input_name='RegForm2')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IdentityRes':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IdentityRes')
            value_ = self.gds_validate_string(value_, node, 'IdentityRes')
            self.IdentityRes = value_
            self.IdentityRes_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.IdentityRes)
        elif nodeName_ == 'Product':
            obj_ = ProductInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product = obj_
            obj_.original_tagname_ = 'Product'
        elif nodeName_ == 'RegForm2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RegForm2')
            value_ = self.gds_validate_string(value_, node, 'RegForm2')
            self.RegForm2 = value_
            self.RegForm2_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RegForm2)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
# end class UsedResourceType47


class RepImportedType_v3(GeneratedsSuper):
    """Отчет об импорте продукции"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RepImportedType_v3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RepImportedType_v3.subclass:
            return RepImportedType_v3.subclass(*args_, **kwargs_)
        else:
            return RepImportedType_v3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepImportedType_v3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RepImportedType_v3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RepImportedType_v3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RepImportedType_v3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RepImportedType_v3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='RepImportedType_v3'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='RepImportedType_v3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType237.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType240.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class RepImportedType_v3


class PositionType49(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProductCode=None, Quantity=None, alcPercent=None, alcPercentMin=None, alcPercentMax=None, Party=None, Identity=None, Comment1=None, Comment2=None, Comment3=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity = Quantity
        self.validate_PositiveDecimalType(self.Quantity)
        self.Quantity_nsprefix_ = None
        self.alcPercent = alcPercent
        self.validate_AlcPercentType(self.alcPercent)
        self.alcPercent_nsprefix_ = None
        self.alcPercentMin = alcPercentMin
        self.validate_AlcPercentType(self.alcPercentMin)
        self.alcPercentMin_nsprefix_ = None
        self.alcPercentMax = alcPercentMax
        self.validate_AlcPercentType(self.alcPercentMax)
        self.alcPercentMax_nsprefix_ = None
        self.Party = Party
        self.validate_NoEmptyString50(self.Party)
        self.Party_nsprefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Comment1 = Comment1
        self.validate_Comment1Type241(self.Comment1)
        self.Comment1_nsprefix_ = None
        self.Comment2 = Comment2
        self.validate_Comment2Type242(self.Comment2)
        self.Comment2_nsprefix_ = None
        self.Comment3 = Comment3
        self.validate_Comment3Type243(self.Comment3)
        self.Comment3_nsprefix_ = None
        self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType49)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType49.subclass:
            return PositionType49.subclass(*args_, **kwargs_)
        else:
            return PositionType49(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity(self):
        return self.Quantity
    def set_Quantity(self, Quantity):
        self.Quantity = Quantity
    def get_alcPercent(self):
        return self.alcPercent
    def set_alcPercent(self, alcPercent):
        self.alcPercent = alcPercent
    def get_alcPercentMin(self):
        return self.alcPercentMin
    def set_alcPercentMin(self, alcPercentMin):
        self.alcPercentMin = alcPercentMin
    def get_alcPercentMax(self):
        return self.alcPercentMax
    def set_alcPercentMax(self, alcPercentMax):
        self.alcPercentMax = alcPercentMax
    def get_Party(self):
        return self.Party
    def set_Party(self, Party):
        self.Party = Party
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Comment1(self):
        return self.Comment1
    def set_Comment1(self, Comment1):
        self.Comment1 = Comment1
    def get_Comment2(self):
        return self.Comment2
    def set_Comment2(self, Comment2):
        self.Comment2 = Comment2
    def get_Comment3(self):
        return self.Comment3
    def set_Comment3(self, Comment3):
        self.Comment3 = Comment3
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_Comment1Type241(self, value):
        result = True
        # Validate type Comment1Type241, a restriction on xs:string.
        pass
        return result
    def validate_Comment2Type242(self, value):
        result = True
        # Validate type Comment2Type242, a restriction on xs:string.
        pass
        return result
    def validate_Comment3Type243(self, value):
        result = True
        # Validate type Comment3Type243, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ProductCode is not None or
            self.Quantity is not None or
            self.alcPercent is not None or
            self.alcPercentMin is not None or
            self.alcPercentMax is not None or
            self.Party is not None or
            self.Identity is not None or
            self.Comment1 is not None or
            self.Comment2 is not None or
            self.Comment3 is not None or
            self.MarkInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='PositionType49', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType49')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType49':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType49')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType49', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType49'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='PositionType49', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity is not None:
            namespaceprefix_ = self.Quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity, input_name='Quantity'), namespaceprefix_ , eol_))
        if self.alcPercent is not None:
            namespaceprefix_ = self.alcPercent_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercent_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercent>%s</%salcPercent>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercent, input_name='alcPercent'), namespaceprefix_ , eol_))
        if self.alcPercentMin is not None:
            namespaceprefix_ = self.alcPercentMin_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMin>%s</%salcPercentMin>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMin, input_name='alcPercentMin'), namespaceprefix_ , eol_))
        if self.alcPercentMax is not None:
            namespaceprefix_ = self.alcPercentMax_nsprefix_ + ':' if (UseCapturedNS_ and self.alcPercentMax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salcPercentMax>%s</%salcPercentMax>%s' % (namespaceprefix_ , self.gds_format_decimal(self.alcPercentMax, input_name='alcPercentMax'), namespaceprefix_ , eol_))
        if self.Party is not None:
            namespaceprefix_ = self.Party_nsprefix_ + ':' if (UseCapturedNS_ and self.Party_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sParty>%s</%sParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Party), input_name='Party')), namespaceprefix_ , eol_))
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Comment1 is not None:
            namespaceprefix_ = self.Comment1_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment1>%s</%sComment1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment1), input_name='Comment1')), namespaceprefix_ , eol_))
        if self.Comment2 is not None:
            namespaceprefix_ = self.Comment2_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment2>%s</%sComment2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment2), input_name='Comment2')), namespaceprefix_ , eol_))
        if self.Comment3 is not None:
            namespaceprefix_ = self.Comment3_nsprefix_ + ':' if (UseCapturedNS_ and self.Comment3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComment3>%s</%sComment3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Comment3), input_name='Comment3')), namespaceprefix_ , eol_))
        if self.MarkInfo is not None:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            self.MarkInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity')
            self.Quantity = fval_
            self.Quantity_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity)
        elif nodeName_ == 'alcPercent' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercent')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercent')
            self.alcPercent = fval_
            self.alcPercent_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercent)
        elif nodeName_ == 'alcPercentMin' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMin')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMin')
            self.alcPercentMin = fval_
            self.alcPercentMin_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMin)
        elif nodeName_ == 'alcPercentMax' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'alcPercentMax')
            fval_ = self.gds_validate_decimal(fval_, node, 'alcPercentMax')
            self.alcPercentMax = fval_
            self.alcPercentMax_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.alcPercentMax)
        elif nodeName_ == 'Party':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Party')
            value_ = self.gds_validate_string(value_, node, 'Party')
            self.Party = value_
            self.Party_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Party)
        elif nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Comment1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment1')
            value_ = self.gds_validate_string(value_, node, 'Comment1')
            self.Comment1 = value_
            self.Comment1_nsprefix_ = child_.prefix
            # validate type Comment1Type241
            self.validate_Comment1Type241(self.Comment1)
        elif nodeName_ == 'Comment2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment2')
            value_ = self.gds_validate_string(value_, node, 'Comment2')
            self.Comment2 = value_
            self.Comment2_nsprefix_ = child_.prefix
            # validate type Comment2Type242
            self.validate_Comment2Type242(self.Comment2)
        elif nodeName_ == 'Comment3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Comment3')
            value_ = self.gds_validate_string(value_, node, 'Comment3')
            self.Comment3 = value_
            self.Comment3_nsprefix_ = child_.prefix
            # validate type Comment3Type243
            self.validate_Comment3Type243(self.Comment3)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo = obj_
            obj_.original_tagname_ = 'MarkInfo'
# end class PositionType49


class ReplyRestBCode(GeneratedsSuper):
    """Ответ на запрос об остатках по складу (сокращенный)"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, RestsDate=None, Inform2RegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(RestsDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(RestsDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = RestsDate
        self.RestsDate = initvalue_
        self.RestsDate_nsprefix_ = None
        self.Inform2RegId = Inform2RegId
        self.validate_NoEmptyString50(self.Inform2RegId)
        self.Inform2RegId_nsprefix_ = None
        if MarkInfo is None:
            self.MarkInfo = []
        else:
            self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyRestBCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyRestBCode.subclass:
            return ReplyRestBCode.subclass(*args_, **kwargs_)
        else:
            return ReplyRestBCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_RestsDate(self):
        return self.RestsDate
    def set_RestsDate(self, RestsDate):
        self.RestsDate = RestsDate
    def get_Inform2RegId(self):
        return self.Inform2RegId
    def set_Inform2RegId(self, Inform2RegId):
        self.Inform2RegId = Inform2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def add_MarkInfo(self, value):
        self.MarkInfo.append(value)
    def insert_MarkInfo_at(self, index, value):
        self.MarkInfo.insert(index, value)
    def replace_MarkInfo_at(self, index, value):
        self.MarkInfo[index] = value
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.RestsDate is not None or
            self.Inform2RegId is not None or
            self.MarkInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ReplyRestBCode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyRestBCode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyRestBCode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyRestBCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyRestBCode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyRestBCode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='ReplyRestBCode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RestsDate is not None:
            namespaceprefix_ = self.RestsDate_nsprefix_ + ':' if (UseCapturedNS_ and self.RestsDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRestsDate>%s</%sRestsDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.RestsDate, input_name='RestsDate'), namespaceprefix_ , eol_))
        if self.Inform2RegId is not None:
            namespaceprefix_ = self.Inform2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.Inform2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInform2RegId>%s</%sInform2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Inform2RegId), input_name='Inform2RegId')), namespaceprefix_ , eol_))
        for MarkInfo_ in self.MarkInfo:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            MarkInfo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'RestsDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.RestsDate = dval_
            self.RestsDate_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.RestsDate)
        elif nodeName_ == 'Inform2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inform2RegId')
            value_ = self.gds_validate_string(value_, node, 'Inform2RegId')
            self.Inform2RegId = value_
            self.Inform2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Inform2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo.append(obj_)
            obj_.original_tagname_ = 'MarkInfo'
# end class ReplyRestBCode


class ActFixBarCode(GeneratedsSuper):
    """Акт фиксации имеющихся на складе штрихкодов в разрезе форм 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActFixBarCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActFixBarCode.subclass:
            return ActFixBarCode.subclass(*args_, **kwargs_)
        else:
            return ActFixBarCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActFixBarCode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActFixBarCode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActFixBarCode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActFixBarCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActFixBarCode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActFixBarCode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActFixBarCode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType244.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType246.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActFixBarCode


class ActFixBarCodePositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Inform2RegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Inform2RegId = Inform2RegId
        self.validate_NoEmptyString50(self.Inform2RegId)
        self.Inform2RegId_nsprefix_ = None
        if MarkInfo is None:
            self.MarkInfo = []
        else:
            self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActFixBarCodePositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActFixBarCodePositionType.subclass:
            return ActFixBarCodePositionType.subclass(*args_, **kwargs_)
        else:
            return ActFixBarCodePositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Inform2RegId(self):
        return self.Inform2RegId
    def set_Inform2RegId(self, Inform2RegId):
        self.Inform2RegId = Inform2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def add_MarkInfo(self, value):
        self.MarkInfo.append(value)
    def insert_MarkInfo_at(self, index, value):
        self.MarkInfo.insert(index, value)
    def replace_MarkInfo_at(self, index, value):
        self.MarkInfo[index] = value
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Inform2RegId is not None or
            self.MarkInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActFixBarCodePositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActFixBarCodePositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActFixBarCodePositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActFixBarCodePositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActFixBarCodePositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActFixBarCodePositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActFixBarCodePositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Inform2RegId is not None:
            namespaceprefix_ = self.Inform2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.Inform2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInform2RegId>%s</%sInform2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Inform2RegId), input_name='Inform2RegId')), namespaceprefix_ , eol_))
        for MarkInfo_ in self.MarkInfo:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            MarkInfo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Inform2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inform2RegId')
            value_ = self.gds_validate_string(value_, node, 'Inform2RegId')
            self.Inform2RegId = value_
            self.Inform2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Inform2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo.append(obj_)
            obj_.original_tagname_ = 'MarkInfo'
# end class ActFixBarCodePositionType


class ActUnFixBarCode(GeneratedsSuper):
    """Акт отмены фиксации имеющихся на складе штрихкодов в разрезе форм 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActUnFixBarCode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActUnFixBarCode.subclass:
            return ActUnFixBarCode.subclass(*args_, **kwargs_)
        else:
            return ActUnFixBarCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActUnFixBarCode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActUnFixBarCode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActUnFixBarCode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActUnFixBarCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActUnFixBarCode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActUnFixBarCode'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ActUnFixBarCode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Header':
            obj_ = HeaderType247.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType249.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class ActUnFixBarCode


class ActUnFixBarCodePositionType(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Inform2RegId=None, MarkInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.Inform2RegId = Inform2RegId
        self.validate_NoEmptyString50(self.Inform2RegId)
        self.Inform2RegId_nsprefix_ = None
        if MarkInfo is None:
            self.MarkInfo = []
        else:
            self.MarkInfo = MarkInfo
        self.MarkInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ActUnFixBarCodePositionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ActUnFixBarCodePositionType.subclass:
            return ActUnFixBarCodePositionType.subclass(*args_, **kwargs_)
        else:
            return ActUnFixBarCodePositionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Inform2RegId(self):
        return self.Inform2RegId
    def set_Inform2RegId(self, Inform2RegId):
        self.Inform2RegId = Inform2RegId
    def get_MarkInfo(self):
        return self.MarkInfo
    def set_MarkInfo(self, MarkInfo):
        self.MarkInfo = MarkInfo
    def add_MarkInfo(self, value):
        self.MarkInfo.append(value)
    def insert_MarkInfo_at(self, index, value):
        self.MarkInfo.insert(index, value)
    def replace_MarkInfo_at(self, index, value):
        self.MarkInfo[index] = value
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Inform2RegId is not None or
            self.MarkInfo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActUnFixBarCodePositionType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ActUnFixBarCodePositionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ActUnFixBarCodePositionType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ActUnFixBarCodePositionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ActUnFixBarCodePositionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ActUnFixBarCodePositionType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:cee="http://fsrar.ru/WEGAIS/CommonV3" ', name_='ActUnFixBarCodePositionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Inform2RegId is not None:
            namespaceprefix_ = self.Inform2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.Inform2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInform2RegId>%s</%sInform2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Inform2RegId), input_name='Inform2RegId')), namespaceprefix_ , eol_))
        for MarkInfo_ in self.MarkInfo:
            namespaceprefix_ = self.MarkInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.MarkInfo_nsprefix_) else ''
            MarkInfo_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MarkInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'Inform2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Inform2RegId')
            value_ = self.gds_validate_string(value_, node, 'Inform2RegId')
            self.Inform2RegId = value_
            self.Inform2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Inform2RegId)
        elif nodeName_ == 'MarkInfo':
            obj_ = AMCforDocType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.MarkInfo.append(obj_)
            obj_.original_tagname_ = 'MarkInfo'
# end class ActUnFixBarCodePositionType


class ReplyParentHistForm2(GeneratedsSuper):
    """Ответ на запрос о движении по форме Б"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2RegId=None, HistForm2Date=None, ParentHist=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF2RegId = InformF2RegId
        self.validate_NoEmptyString50(self.InformF2RegId)
        self.InformF2RegId_nsprefix_ = None
        if isinstance(HistForm2Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(HistForm2Date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = HistForm2Date
        self.HistForm2Date = initvalue_
        self.HistForm2Date_nsprefix_ = None
        self.ParentHist = ParentHist
        self.ParentHist_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReplyParentHistForm2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReplyParentHistForm2.subclass:
            return ReplyParentHistForm2.subclass(*args_, **kwargs_)
        else:
            return ReplyParentHistForm2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2RegId(self):
        return self.InformF2RegId
    def set_InformF2RegId(self, InformF2RegId):
        self.InformF2RegId = InformF2RegId
    def get_HistForm2Date(self):
        return self.HistForm2Date
    def set_HistForm2Date(self, HistForm2Date):
        self.HistForm2Date = HistForm2Date
    def get_ParentHist(self):
        return self.ParentHist
    def set_ParentHist(self, ParentHist):
        self.ParentHist = ParentHist
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateWTime(self, value):
        result = True
        # Validate type DateWTime, a restriction on xs:dateTime.
        pass
        return result
    def hasContent_(self):
        if (
            self.InformF2RegId is not None or
            self.HistForm2Date is not None or
            self.ParentHist is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyParentHistForm2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReplyParentHistForm2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ReplyParentHistForm2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReplyParentHistForm2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ReplyParentHistForm2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='ReplyParentHistForm2'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='ReplyParentHistForm2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF2RegId is not None:
            namespaceprefix_ = self.InformF2RegId_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2RegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInformF2RegId>%s</%sInformF2RegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InformF2RegId), input_name='InformF2RegId')), namespaceprefix_ , eol_))
        if self.HistForm2Date is not None:
            namespaceprefix_ = self.HistForm2Date_nsprefix_ + ':' if (UseCapturedNS_ and self.HistForm2Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sHistForm2Date>%s</%sHistForm2Date>%s' % (namespaceprefix_ , self.gds_format_datetime(self.HistForm2Date, input_name='HistForm2Date'), namespaceprefix_ , eol_))
        if self.ParentHist is not None:
            namespaceprefix_ = self.ParentHist_nsprefix_ + ':' if (UseCapturedNS_ and self.ParentHist_nsprefix_) else ''
            self.ParentHist.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ParentHist', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2RegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InformF2RegId')
            value_ = self.gds_validate_string(value_, node, 'InformF2RegId')
            self.InformF2RegId = value_
            self.InformF2RegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InformF2RegId)
        elif nodeName_ == 'HistForm2Date':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.HistForm2Date = dval_
            self.HistForm2Date_nsprefix_ = child_.prefix
            # validate type DateWTime
            self.validate_DateWTime(self.HistForm2Date)
        elif nodeName_ == 'ParentHist':
            obj_ = ParentHistType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ParentHist = obj_
            obj_.original_tagname_ = 'ParentHist'
# end class ReplyParentHistForm2


class stepBType(GeneratedsSuper):
    """Движение товара"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, lev=None, Form2=None, parentForm2=None, Shipper=None, Consignee=None, WBRegId=None, amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.lev = lev
        self.lev_nsprefix_ = None
        self.Form2 = Form2
        self.Form2_nsprefix_ = None
        self.parentForm2 = parentForm2
        self.parentForm2_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.WBRegId = WBRegId
        self.WBRegId_nsprefix_ = None
        self.amount = amount
        self.amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, stepBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if stepBType.subclass:
            return stepBType.subclass(*args_, **kwargs_)
        else:
            return stepBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_lev(self):
        return self.lev
    def set_lev(self, lev):
        self.lev = lev
    def get_Form2(self):
        return self.Form2
    def set_Form2(self, Form2):
        self.Form2 = Form2
    def get_parentForm2(self):
        return self.parentForm2
    def set_parentForm2(self, parentForm2):
        self.parentForm2 = parentForm2
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_amount(self):
        return self.amount
    def set_amount(self, amount):
        self.amount = amount
    def hasContent_(self):
        if (
            self.lev is not None or
            self.Form2 is not None or
            self.parentForm2 is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.WBRegId is not None or
            self.amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='stepBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('stepBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'stepBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='stepBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='stepBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='stepBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='stepBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.lev is not None:
            namespaceprefix_ = self.lev_nsprefix_ + ':' if (UseCapturedNS_ and self.lev_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slev>%s</%slev>%s' % (namespaceprefix_ , self.gds_format_integer(self.lev, input_name='lev'), namespaceprefix_ , eol_))
        if self.Form2 is not None:
            namespaceprefix_ = self.Form2_nsprefix_ + ':' if (UseCapturedNS_ and self.Form2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForm2>%s</%sForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Form2), input_name='Form2')), namespaceprefix_ , eol_))
        if self.parentForm2 is not None:
            namespaceprefix_ = self.parentForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.parentForm2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparentForm2>%s</%sparentForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parentForm2), input_name='parentForm2')), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipper>%s</%sShipper>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Shipper), input_name='Shipper')), namespaceprefix_ , eol_))
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignee>%s</%sConsignee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Consignee), input_name='Consignee')), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.amount is not None:
            namespaceprefix_ = self.amount_nsprefix_ + ':' if (UseCapturedNS_ and self.amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%samount>%s</%samount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.amount, input_name='amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'lev' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'lev')
            ival_ = self.gds_validate_integer(ival_, node, 'lev')
            self.lev = ival_
            self.lev_nsprefix_ = child_.prefix
        elif nodeName_ == 'Form2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Form2')
            value_ = self.gds_validate_string(value_, node, 'Form2')
            self.Form2 = value_
            self.Form2_nsprefix_ = child_.prefix
        elif nodeName_ == 'parentForm2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parentForm2')
            value_ = self.gds_validate_string(value_, node, 'parentForm2')
            self.parentForm2 = value_
            self.parentForm2_nsprefix_ = child_.prefix
        elif nodeName_ == 'Shipper':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Shipper')
            value_ = self.gds_validate_string(value_, node, 'Shipper')
            self.Shipper = value_
            self.Shipper_nsprefix_ = child_.prefix
        elif nodeName_ == 'Consignee':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Consignee')
            value_ = self.gds_validate_string(value_, node, 'Consignee')
            self.Consignee = value_
            self.Consignee_nsprefix_ = child_.prefix
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
        elif nodeName_ == 'amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'amount')
            self.amount = fval_
            self.amount_nsprefix_ = child_.prefix
# end class stepBType


class TTNHistoryF2Reg(GeneratedsSuper):
    """Квитанция о регистрации справок 2 для Товарно-Транспортной Накладной"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TTNHistoryF2Reg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TTNHistoryF2Reg.subclass:
            return TTNHistoryF2Reg.subclass(*args_, **kwargs_)
        else:
            return TTNHistoryF2Reg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TTNHistoryF2Reg', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TTNHistoryF2Reg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'TTNHistoryF2Reg':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TTNHistoryF2Reg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='TTNHistoryF2Reg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='TTNHistoryF2Reg'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='TTNHistoryF2Reg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType250.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType251.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class TTNHistoryF2Reg


class InformParentF2Type(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, HistF2=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.HistF2 = HistF2
        self.HistF2_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformParentF2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformParentF2Type.subclass:
            return InformParentF2Type.subclass(*args_, **kwargs_)
        else:
            return InformParentF2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_HistF2(self):
        return self.HistF2
    def set_HistF2(self, HistF2):
        self.HistF2 = HistF2
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.HistF2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformParentF2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformParentF2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformParentF2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformParentF2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformParentF2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='InformParentF2Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='InformParentF2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.HistF2 is not None:
            namespaceprefix_ = self.HistF2_nsprefix_ + ':' if (UseCapturedNS_ and self.HistF2_nsprefix_) else ''
            self.HistF2.export(outfile, level, namespaceprefix_, namespacedef_='', name_='HistF2', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'HistF2':
            obj_ = HistF2Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.HistF2 = obj_
            obj_.original_tagname_ = 'HistF2'
# end class InformParentF2Type


class stepType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, lev=None, Form2=None, parentForm2=None, Shipper=None, Consignee=None, WBRegId=None, amount=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.lev = lev
        self.lev_nsprefix_ = None
        self.Form2 = Form2
        self.Form2_nsprefix_ = None
        self.parentForm2 = parentForm2
        self.parentForm2_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.WBRegId = WBRegId
        self.WBRegId_nsprefix_ = None
        self.amount = amount
        self.amount_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, stepType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if stepType.subclass:
            return stepType.subclass(*args_, **kwargs_)
        else:
            return stepType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_lev(self):
        return self.lev
    def set_lev(self, lev):
        self.lev = lev
    def get_Form2(self):
        return self.Form2
    def set_Form2(self, Form2):
        self.Form2 = Form2
    def get_parentForm2(self):
        return self.parentForm2
    def set_parentForm2(self, parentForm2):
        self.parentForm2 = parentForm2
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_amount(self):
        return self.amount
    def set_amount(self, amount):
        self.amount = amount
    def hasContent_(self):
        if (
            self.lev is not None or
            self.Form2 is not None or
            self.parentForm2 is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.WBRegId is not None or
            self.amount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='stepType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('stepType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'stepType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='stepType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='stepType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='stepType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='stepType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.lev is not None:
            namespaceprefix_ = self.lev_nsprefix_ + ':' if (UseCapturedNS_ and self.lev_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slev>%s</%slev>%s' % (namespaceprefix_ , self.gds_format_integer(self.lev, input_name='lev'), namespaceprefix_ , eol_))
        if self.Form2 is not None:
            namespaceprefix_ = self.Form2_nsprefix_ + ':' if (UseCapturedNS_ and self.Form2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForm2>%s</%sForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Form2), input_name='Form2')), namespaceprefix_ , eol_))
        if self.parentForm2 is not None:
            namespaceprefix_ = self.parentForm2_nsprefix_ + ':' if (UseCapturedNS_ and self.parentForm2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparentForm2>%s</%sparentForm2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.parentForm2), input_name='parentForm2')), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipper>%s</%sShipper>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Shipper), input_name='Shipper')), namespaceprefix_ , eol_))
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignee>%s</%sConsignee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Consignee), input_name='Consignee')), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.amount is not None:
            namespaceprefix_ = self.amount_nsprefix_ + ':' if (UseCapturedNS_ and self.amount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%samount>%s</%samount>%s' % (namespaceprefix_ , self.gds_format_decimal(self.amount, input_name='amount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'lev' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'lev')
            ival_ = self.gds_validate_integer(ival_, node, 'lev')
            self.lev = ival_
            self.lev_nsprefix_ = child_.prefix
        elif nodeName_ == 'Form2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Form2')
            value_ = self.gds_validate_string(value_, node, 'Form2')
            self.Form2 = value_
            self.Form2_nsprefix_ = child_.prefix
        elif nodeName_ == 'parentForm2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parentForm2')
            value_ = self.gds_validate_string(value_, node, 'parentForm2')
            self.parentForm2 = value_
            self.parentForm2_nsprefix_ = child_.prefix
        elif nodeName_ == 'Shipper':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Shipper')
            value_ = self.gds_validate_string(value_, node, 'Shipper')
            self.Shipper = value_
            self.Shipper_nsprefix_ = child_.prefix
        elif nodeName_ == 'Consignee':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Consignee')
            value_ = self.gds_validate_string(value_, node, 'Consignee')
            self.Consignee = value_
            self.Consignee_nsprefix_ = child_.prefix
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
        elif nodeName_ == 'amount' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'amount')
            fval_ = self.gds_validate_decimal(fval_, node, 'amount')
            self.amount = fval_
            self.amount_nsprefix_ = child_.prefix
# end class stepType


class CarrierNotice(GeneratedsSuper):
    """Уведомление о перевозке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Header=None, Content=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Header = Header
        self.Header_nsprefix_ = None
        self.Content = Content
        self.Content_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CarrierNotice)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CarrierNotice.subclass:
            return CarrierNotice.subclass(*args_, **kwargs_)
        else:
            return CarrierNotice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Header(self):
        return self.Header
    def set_Header(self, Header):
        self.Header = Header
    def get_Content(self):
        return self.Content
    def set_Content(self, Content):
        self.Content = Content
    def hasContent_(self):
        if (
            self.Header is not None or
            self.Content is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='CarrierNotice', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CarrierNotice')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'CarrierNotice':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CarrierNotice')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CarrierNotice', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='CarrierNotice'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='CarrierNotice', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Header is not None:
            namespaceprefix_ = self.Header_nsprefix_ + ':' if (UseCapturedNS_ and self.Header_nsprefix_) else ''
            self.Header.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Header', pretty_print=pretty_print)
        if self.Content is not None:
            namespaceprefix_ = self.Content_nsprefix_ + ':' if (UseCapturedNS_ and self.Content_nsprefix_) else ''
            self.Content.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Content', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Header':
            obj_ = HeaderType252.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Header = obj_
            obj_.original_tagname_ = 'Header'
        elif nodeName_ == 'Content':
            obj_ = ContentType253.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Content = obj_
            obj_.original_tagname_ = 'Content'
# end class CarrierNotice


class PositionType50(GeneratedsSuper):
    """Позиция"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ProductCode=None, Quantity20=None, AlcPerc20=None, PosIdentity=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ProductCode = ProductCode
        self.validate_NoEmptyString50(self.ProductCode)
        self.ProductCode_nsprefix_ = None
        self.Quantity20 = Quantity20
        self.validate_PositiveDecimalType(self.Quantity20)
        self.Quantity20_nsprefix_ = None
        self.AlcPerc20 = AlcPerc20
        self.validate_AlcPercentType(self.AlcPerc20)
        self.AlcPerc20_nsprefix_ = None
        self.PosIdentity = PosIdentity
        self.validate_IdentityType(self.PosIdentity)
        self.PosIdentity_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PositionType50)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PositionType50.subclass:
            return PositionType50.subclass(*args_, **kwargs_)
        else:
            return PositionType50(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ProductCode(self):
        return self.ProductCode
    def set_ProductCode(self, ProductCode):
        self.ProductCode = ProductCode
    def get_Quantity20(self):
        return self.Quantity20
    def set_Quantity20(self, Quantity20):
        self.Quantity20 = Quantity20
    def get_AlcPerc20(self):
        return self.AlcPerc20
    def set_AlcPerc20(self, AlcPerc20):
        self.AlcPerc20 = AlcPerc20
    def get_PosIdentity(self):
        return self.PosIdentity
    def set_PosIdentity(self, PosIdentity):
        self.PosIdentity = PosIdentity
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_PositiveDecimalType(self, value):
        result = True
        # Validate type PositiveDecimalType, a restriction on xs:decimal.
        pass
        return result
    def validate_AlcPercentType(self, value):
        result = True
        # Validate type AlcPercentType, a restriction on xs:decimal.
        pass
        return result
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def hasContent_(self):
        if (
            self.ProductCode is not None or
            self.Quantity20 is not None or
            self.AlcPerc20 is not None or
            self.PosIdentity is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType50', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PositionType50')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'PositionType50':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PositionType50')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PositionType50', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ns:', name_='PositionType50'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ns:', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='PositionType50', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductCode is not None:
            namespaceprefix_ = self.ProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.ProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductCode>%s</%sProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ProductCode), input_name='ProductCode')), namespaceprefix_ , eol_))
        if self.Quantity20 is not None:
            namespaceprefix_ = self.Quantity20_nsprefix_ + ':' if (UseCapturedNS_ and self.Quantity20_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity20>%s</%sQuantity20>%s' % (namespaceprefix_ , self.gds_format_decimal(self.Quantity20, input_name='Quantity20'), namespaceprefix_ , eol_))
        if self.AlcPerc20 is not None:
            namespaceprefix_ = self.AlcPerc20_nsprefix_ + ':' if (UseCapturedNS_ and self.AlcPerc20_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAlcPerc20>%s</%sAlcPerc20>%s' % (namespaceprefix_ , self.gds_format_decimal(self.AlcPerc20, input_name='AlcPerc20'), namespaceprefix_ , eol_))
        if self.PosIdentity is not None:
            namespaceprefix_ = self.PosIdentity_nsprefix_ + ':' if (UseCapturedNS_ and self.PosIdentity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPosIdentity>%s</%sPosIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PosIdentity), input_name='PosIdentity')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ProductCode')
            value_ = self.gds_validate_string(value_, node, 'ProductCode')
            self.ProductCode = value_
            self.ProductCode_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ProductCode)
        elif nodeName_ == 'Quantity20' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'Quantity20')
            fval_ = self.gds_validate_decimal(fval_, node, 'Quantity20')
            self.Quantity20 = fval_
            self.Quantity20_nsprefix_ = child_.prefix
            # validate type PositiveDecimalType
            self.validate_PositiveDecimalType(self.Quantity20)
        elif nodeName_ == 'AlcPerc20' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_decimal(sval_, node, 'AlcPerc20')
            fval_ = self.gds_validate_decimal(fval_, node, 'AlcPerc20')
            self.AlcPerc20 = fval_
            self.AlcPerc20_nsprefix_ = child_.prefix
            # validate type AlcPercentType
            self.validate_AlcPercentType(self.AlcPerc20)
        elif nodeName_ == 'PosIdentity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PosIdentity')
            value_ = self.gds_validate_string(value_, node, 'PosIdentity')
            self.PosIdentity = value_
            self.PosIdentity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.PosIdentity)
# end class PositionType50


class addresslistType(GeneratedsSuper):
    """Список фактических адресов ИП"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if address is None:
            self.address = []
        else:
            self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresslistType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresslistType.subclass:
            return addresslistType.subclass(*args_, **kwargs_)
        else:
            return addresslistType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def add_address(self, value):
        self.address.append(value)
    def insert_address_at(self, index, value):
        self.address.insert(index, value)
    def replace_address_at(self, index, value):
        self.address[index] = value
    def hasContent_(self):
        if (
            self.address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='addresslistType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresslistType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresslistType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresslistType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresslistType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresslistType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='addresslistType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for address_ in self.address:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            address_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'address':
            obj_ = OrgAddressType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address.append(obj_)
            obj_.original_tagname_ = 'address'
# end class addresslistType


class RangesType(GeneratedsSuper):
    """Диапазоны марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Range=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Range is None:
            self.Range = []
        else:
            self.Range = Range
        self.Range_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RangesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RangesType.subclass:
            return RangesType.subclass(*args_, **kwargs_)
        else:
            return RangesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Range(self):
        return self.Range
    def set_Range(self, Range):
        self.Range = Range
    def add_Range(self, value):
        self.Range.append(value)
    def insert_Range_at(self, index, value):
        self.Range.insert(index, value)
    def replace_Range_at(self, index, value):
        self.Range[index] = value
    def hasContent_(self):
        if (
            self.Range
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangesType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RangesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RangesType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RangesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RangesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RangesType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Range_ in self.Range:
            namespaceprefix_ = self.Range_nsprefix_ + ':' if (UseCapturedNS_ and self.Range_nsprefix_) else ''
            Range_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Range', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Range':
            obj_ = RangeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Range.append(obj_)
            obj_.original_tagname_ = 'Range'
# end class RangesType


class RangeType(GeneratedsSuper):
    """Диапазоны марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Rank=None, Start=None, Last=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.Identity_nsprefix_ = None
        self.Rank = Rank
        self.validate_RankType(self.Rank)
        self.Rank_nsprefix_ = None
        self.Start = Start
        self.validate_MarkNumberType(self.Start)
        self.Start_nsprefix_ = None
        self.Last = Last
        self.validate_MarkNumberType(self.Last)
        self.Last_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RangeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RangeType.subclass:
            return RangeType.subclass(*args_, **kwargs_)
        else:
            return RangeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Rank(self):
        return self.Rank
    def set_Rank(self, Rank):
        self.Rank = Rank
    def get_Start(self):
        return self.Start
    def set_Start(self, Start):
        self.Start = Start
    def get_Last(self):
        return self.Last
    def set_Last(self, Last):
        self.Last = Last
    def validate_RankType(self, value):
        result = True
        # Validate type RankType, a restriction on xs:string.
        pass
        return result
    def validate_MarkNumberType(self, value):
        result = True
        # Validate type MarkNumberType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Rank is not None or
            self.Start is not None or
            self.Last is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RangeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RangeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RangeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RangeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RangeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Rank is not None:
            namespaceprefix_ = self.Rank_nsprefix_ + ':' if (UseCapturedNS_ and self.Rank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRank>%s</%sRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rank), input_name='Rank')), namespaceprefix_ , eol_))
        if self.Start is not None:
            namespaceprefix_ = self.Start_nsprefix_ + ':' if (UseCapturedNS_ and self.Start_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStart>%s</%sStart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), namespaceprefix_ , eol_))
        if self.Last is not None:
            namespaceprefix_ = self.Last_nsprefix_ + ':' if (UseCapturedNS_ and self.Last_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLast>%s</%sLast>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Last), input_name='Last')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rank')
            value_ = self.gds_validate_string(value_, node, 'Rank')
            self.Rank = value_
            self.Rank_nsprefix_ = child_.prefix
            # validate type RankType
            self.validate_RankType(self.Rank)
        elif nodeName_ == 'Start':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Start')
            value_ = self.gds_validate_string(value_, node, 'Start')
            self.Start = value_
            self.Start_nsprefix_ = child_.prefix
            # validate type MarkNumberType
            self.validate_MarkNumberType(self.Start)
        elif nodeName_ == 'Last':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Last')
            value_ = self.gds_validate_string(value_, node, 'Last')
            self.Last = value_
            self.Last_nsprefix_ = child_.prefix
            # validate type MarkNumberType
            self.validate_MarkNumberType(self.Last)
# end class RangeType


class HeaderType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type='WBInvoiceFromMe', UnitType=None, NUMBER=None, Date=None, ShippingDate=None, Transport=None, Shipper=None, Consignee=None, Supplier=None, Base=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_WbType(self.Type)
        self.Type_nsprefix_ = None
        self.UnitType = UnitType
        self.validate_WbUnitType1(self.UnitType)
        self.UnitType_nsprefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Transport = Transport
        self.Transport_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.Base = Base
        self.validate_BaseType(self.Base)
        self.Base_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType.subclass:
            return HeaderType.subclass(*args_, **kwargs_)
        else:
            return HeaderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_UnitType(self):
        return self.UnitType
    def set_UnitType(self, UnitType):
        self.UnitType = UnitType
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Transport(self):
        return self.Transport
    def set_Transport(self, Transport):
        self.Transport = Transport
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def get_Base(self):
        return self.Base
    def set_Base(self, Base):
        self.Base = Base
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_WbType(self, value):
        result = True
        # Validate type WbType, a restriction on xs:string.
        pass
        return result
    def validate_WbUnitType1(self, value):
        result = True
        # Validate type WbUnitType1, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_BaseType(self, value):
        result = True
        # Validate type BaseType, a restriction on xs:string.
        pass
        return result
    def validate_NoteType(self, value):
        result = True
        # Validate type NoteType, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type != "WBInvoiceFromMe" or
            self.UnitType is not None or
            self.NUMBER is not None or
            self.Date is not None or
            self.ShippingDate is not None or
            self.Transport is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.Supplier is not None or
            self.Base is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.UnitType is not None:
            namespaceprefix_ = self.UnitType_nsprefix_ + ':' if (UseCapturedNS_ and self.UnitType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitType>%s</%sUnitType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.UnitType), input_name='UnitType')), namespaceprefix_ , eol_))
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Transport is not None:
            namespaceprefix_ = self.Transport_nsprefix_ + ':' if (UseCapturedNS_ and self.Transport_nsprefix_) else ''
            self.Transport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Transport', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
        if self.Base is not None:
            namespaceprefix_ = self.Base_nsprefix_ + ':' if (UseCapturedNS_ and self.Base_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBase>%s</%sBase>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Base), input_name='Base')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type WbType
            self.validate_WbType(self.Type)
        elif nodeName_ == 'UnitType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'UnitType')
            value_ = self.gds_validate_string(value_, node, 'UnitType')
            self.UnitType = value_
            self.UnitType_nsprefix_ = child_.prefix
            # validate type WbUnitType1
            self.validate_WbUnitType1(self.UnitType)
        elif nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Transport':
            obj_ = TransportType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transport = obj_
            obj_.original_tagname_ = 'Transport'
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
        elif nodeName_ == 'Base':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Base')
            value_ = self.gds_validate_string(value_, node, 'Base')
            self.Base = value_
            self.Base_nsprefix_ = child_.prefix
            # validate type BaseType
            self.validate_BaseType(self.Base)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType
            self.validate_NoteType(self.Note)
# end class HeaderType


class ContentType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType.subclass:
            return ContentType.subclass(*args_, **kwargs_)
        else:
            return ContentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType


class HeaderType55(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsAccept=None, ACTNUMBER=None, ActDate=None, WBRegId=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsAccept = IsAccept
        self.validate_AcceptType(self.IsAccept)
        self.IsAccept_nsprefix_ = None
        self.ACTNUMBER = ACTNUMBER
        self.validate_NoEmptyString50(self.ACTNUMBER)
        self.ACTNUMBER_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType56(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType55)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType55.subclass:
            return HeaderType55.subclass(*args_, **kwargs_)
        else:
            return HeaderType55(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsAccept(self):
        return self.IsAccept
    def set_IsAccept(self, IsAccept):
        self.IsAccept = IsAccept
    def get_ACTNUMBER(self):
        return self.ACTNUMBER
    def set_ACTNUMBER(self, ACTNUMBER):
        self.ACTNUMBER = ACTNUMBER
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_AcceptType(self, value):
        result = True
        # Validate type AcceptType, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType56(self, value):
        result = True
        # Validate type NoteType56, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IsAccept is not None or
            self.ACTNUMBER is not None or
            self.ActDate is not None or
            self.WBRegId is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType55', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType55')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType55':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType55')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType55', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType55'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType55', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsAccept is not None:
            namespaceprefix_ = self.IsAccept_nsprefix_ + ':' if (UseCapturedNS_ and self.IsAccept_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsAccept>%s</%sIsAccept>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsAccept), input_name='IsAccept')), namespaceprefix_ , eol_))
        if self.ACTNUMBER is not None:
            namespaceprefix_ = self.ACTNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.ACTNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACTNUMBER>%s</%sACTNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACTNUMBER), input_name='ACTNUMBER')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsAccept':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IsAccept')
            value_ = self.gds_validate_string(value_, node, 'IsAccept')
            self.IsAccept = value_
            self.IsAccept_nsprefix_ = child_.prefix
            # validate type AcceptType
            self.validate_AcceptType(self.IsAccept)
        elif nodeName_ == 'ACTNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACTNUMBER')
            value_ = self.gds_validate_string(value_, node, 'ACTNUMBER')
            self.ACTNUMBER = value_
            self.ACTNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ACTNUMBER)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType56
            self.validate_NoteType56(self.Note)
# end class HeaderType55


class ContentType57(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType57)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType57.subclass:
            return ContentType57.subclass(*args_, **kwargs_)
        else:
            return ContentType57(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType57', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType57')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType57':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType57')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType57', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType57'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType57', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType57


class HeaderType58(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsConfirm=None, TicketNumber=None, TicketDate=None, WBRegId=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsConfirm = IsConfirm
        self.validate_ConclusionType3(self.IsConfirm)
        self.IsConfirm_nsprefix_ = None
        self.TicketNumber = TicketNumber
        self.validate_NoEmptyString50(self.TicketNumber)
        self.TicketNumber_nsprefix_ = None
        if isinstance(TicketDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TicketDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TicketDate
        self.TicketDate = initvalue_
        self.TicketDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType59(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType58)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType58.subclass:
            return HeaderType58.subclass(*args_, **kwargs_)
        else:
            return HeaderType58(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsConfirm(self):
        return self.IsConfirm
    def set_IsConfirm(self, IsConfirm):
        self.IsConfirm = IsConfirm
    def get_TicketNumber(self):
        return self.TicketNumber
    def set_TicketNumber(self, TicketNumber):
        self.TicketNumber = TicketNumber
    def get_TicketDate(self):
        return self.TicketDate
    def set_TicketDate(self, TicketDate):
        self.TicketDate = TicketDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_ConclusionType3(self, value):
        result = True
        # Validate type ConclusionType3, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType59(self, value):
        result = True
        # Validate type NoteType59, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IsConfirm is not None or
            self.TicketNumber is not None or
            self.TicketDate is not None or
            self.WBRegId is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType58', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType58')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType58':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType58')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType58', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType58'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType58', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsConfirm is not None:
            namespaceprefix_ = self.IsConfirm_nsprefix_ + ':' if (UseCapturedNS_ and self.IsConfirm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsConfirm>%s</%sIsConfirm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsConfirm), input_name='IsConfirm')), namespaceprefix_ , eol_))
        if self.TicketNumber is not None:
            namespaceprefix_ = self.TicketNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TicketNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTicketNumber>%s</%sTicketNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TicketNumber), input_name='TicketNumber')), namespaceprefix_ , eol_))
        if self.TicketDate is not None:
            namespaceprefix_ = self.TicketDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TicketDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTicketDate>%s</%sTicketDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TicketDate, input_name='TicketDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsConfirm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IsConfirm')
            value_ = self.gds_validate_string(value_, node, 'IsConfirm')
            self.IsConfirm = value_
            self.IsConfirm_nsprefix_ = child_.prefix
            # validate type ConclusionType3
            self.validate_ConclusionType3(self.IsConfirm)
        elif nodeName_ == 'TicketNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TicketNumber')
            value_ = self.gds_validate_string(value_, node, 'TicketNumber')
            self.TicketNumber = value_
            self.TicketNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TicketNumber)
        elif nodeName_ == 'TicketDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TicketDate = dval_
            self.TicketDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TicketDate)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType59
            self.validate_NoteType59(self.Note)
# end class HeaderType58


class HeaderType60(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, DivisionName=None, InventoryBasis=None, InventoryBasisNumber=None, InventoryBasisDate=None, InventoryDateBegin=None, InventoryDateEnd=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        self.DivisionName = DivisionName
        self.validate_DivisionNameType(self.DivisionName)
        self.DivisionName_nsprefix_ = None
        self.InventoryBasis = InventoryBasis
        self.validate_NoEmptyString50(self.InventoryBasis)
        self.InventoryBasis_nsprefix_ = None
        self.InventoryBasisNumber = InventoryBasisNumber
        self.validate_NoEmptyString50(self.InventoryBasisNumber)
        self.InventoryBasisNumber_nsprefix_ = None
        if isinstance(InventoryBasisDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InventoryBasisDate, '%Y-%m-%d').date()
        else:
            initvalue_ = InventoryBasisDate
        self.InventoryBasisDate = initvalue_
        self.InventoryBasisDate_nsprefix_ = None
        if isinstance(InventoryDateBegin, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InventoryDateBegin, '%Y-%m-%d').date()
        else:
            initvalue_ = InventoryDateBegin
        self.InventoryDateBegin = initvalue_
        self.InventoryDateBegin_nsprefix_ = None
        if isinstance(InventoryDateEnd, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(InventoryDateEnd, '%Y-%m-%d').date()
        else:
            initvalue_ = InventoryDateEnd
        self.InventoryDateEnd = initvalue_
        self.InventoryDateEnd_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType61(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType60)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType60.subclass:
            return HeaderType60.subclass(*args_, **kwargs_)
        else:
            return HeaderType60(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_DivisionName(self):
        return self.DivisionName
    def set_DivisionName(self, DivisionName):
        self.DivisionName = DivisionName
    def get_InventoryBasis(self):
        return self.InventoryBasis
    def set_InventoryBasis(self, InventoryBasis):
        self.InventoryBasis = InventoryBasis
    def get_InventoryBasisNumber(self):
        return self.InventoryBasisNumber
    def set_InventoryBasisNumber(self, InventoryBasisNumber):
        self.InventoryBasisNumber = InventoryBasisNumber
    def get_InventoryBasisDate(self):
        return self.InventoryBasisDate
    def set_InventoryBasisDate(self, InventoryBasisDate):
        self.InventoryBasisDate = InventoryBasisDate
    def get_InventoryDateBegin(self):
        return self.InventoryDateBegin
    def set_InventoryDateBegin(self, InventoryDateBegin):
        self.InventoryDateBegin = InventoryDateBegin
    def get_InventoryDateEnd(self):
        return self.InventoryDateEnd
    def set_InventoryDateEnd(self, InventoryDateEnd):
        self.InventoryDateEnd = InventoryDateEnd
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DivisionNameType(self, value):
        result = True
        # Validate type DivisionNameType, a restriction on c:NoEmptyString.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType61(self, value):
        result = True
        # Validate type NoteType61, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.DivisionName is not None or
            self.InventoryBasis is not None or
            self.InventoryBasisNumber is not None or
            self.InventoryBasisDate is not None or
            self.InventoryDateBegin is not None or
            self.InventoryDateEnd is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType60', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType60')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType60':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType60')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType60', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType60'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType60', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.DivisionName is not None:
            namespaceprefix_ = self.DivisionName_nsprefix_ + ':' if (UseCapturedNS_ and self.DivisionName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDivisionName>%s</%sDivisionName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DivisionName), input_name='DivisionName')), namespaceprefix_ , eol_))
        if self.InventoryBasis is not None:
            namespaceprefix_ = self.InventoryBasis_nsprefix_ + ':' if (UseCapturedNS_ and self.InventoryBasis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryBasis>%s</%sInventoryBasis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InventoryBasis), input_name='InventoryBasis')), namespaceprefix_ , eol_))
        if self.InventoryBasisNumber is not None:
            namespaceprefix_ = self.InventoryBasisNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.InventoryBasisNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryBasisNumber>%s</%sInventoryBasisNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InventoryBasisNumber), input_name='InventoryBasisNumber')), namespaceprefix_ , eol_))
        if self.InventoryBasisDate is not None:
            namespaceprefix_ = self.InventoryBasisDate_nsprefix_ + ':' if (UseCapturedNS_ and self.InventoryBasisDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryBasisDate>%s</%sInventoryBasisDate>%s' % (namespaceprefix_ , self.gds_format_date(self.InventoryBasisDate, input_name='InventoryBasisDate'), namespaceprefix_ , eol_))
        if self.InventoryDateBegin is not None:
            namespaceprefix_ = self.InventoryDateBegin_nsprefix_ + ':' if (UseCapturedNS_ and self.InventoryDateBegin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryDateBegin>%s</%sInventoryDateBegin>%s' % (namespaceprefix_ , self.gds_format_date(self.InventoryDateBegin, input_name='InventoryDateBegin'), namespaceprefix_ , eol_))
        if self.InventoryDateEnd is not None:
            namespaceprefix_ = self.InventoryDateEnd_nsprefix_ + ':' if (UseCapturedNS_ and self.InventoryDateEnd_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryDateEnd>%s</%sInventoryDateEnd>%s' % (namespaceprefix_ , self.gds_format_date(self.InventoryDateEnd, input_name='InventoryDateEnd'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'DivisionName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DivisionName')
            value_ = self.gds_validate_string(value_, node, 'DivisionName')
            self.DivisionName = value_
            self.DivisionName_nsprefix_ = child_.prefix
            # validate type DivisionNameType
            self.validate_DivisionNameType(self.DivisionName)
        elif nodeName_ == 'InventoryBasis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InventoryBasis')
            value_ = self.gds_validate_string(value_, node, 'InventoryBasis')
            self.InventoryBasis = value_
            self.InventoryBasis_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InventoryBasis)
        elif nodeName_ == 'InventoryBasisNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'InventoryBasisNumber')
            value_ = self.gds_validate_string(value_, node, 'InventoryBasisNumber')
            self.InventoryBasisNumber = value_
            self.InventoryBasisNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.InventoryBasisNumber)
        elif nodeName_ == 'InventoryBasisDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InventoryBasisDate = dval_
            self.InventoryBasisDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.InventoryBasisDate)
        elif nodeName_ == 'InventoryDateBegin':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InventoryDateBegin = dval_
            self.InventoryDateBegin_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.InventoryDateBegin)
        elif nodeName_ == 'InventoryDateEnd':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.InventoryDateEnd = dval_
            self.InventoryDateEnd_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.InventoryDateEnd)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType61
            self.validate_NoteType61(self.Note)
# end class HeaderType60


class ContentType62(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType62)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType62.subclass:
            return ContentType62.subclass(*args_, **kwargs_)
        else:
            return ContentType62(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType62', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType62')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType62':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType62')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType62', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType62'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType62', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActInventoryPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType62


class InformBType63(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformBItem=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if InformBItem is None:
            self.InformBItem = []
        else:
            self.InformBItem = InformBItem
        self.InformBItem_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBType63)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBType63.subclass:
            return InformBType63.subclass(*args_, **kwargs_)
        else:
            return InformBType63(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformBItem(self):
        return self.InformBItem
    def set_InformBItem(self, InformBItem):
        self.InformBItem = InformBItem
    def add_InformBItem(self, value):
        self.InformBItem.append(value)
    def insert_InformBItem_at(self, index, value):
        self.InformBItem.insert(index, value)
    def replace_InformBItem_at(self, index, value):
        self.InformBItem[index] = value
    def hasContent_(self):
        if (
            self.InformBItem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformBType63', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBType63')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBType63':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBType63')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBType63', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InformBType63'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:iab="http://fsrar.ru/WEGAIS/ActInventoryF1F2Info" ', name_='InformBType63', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformBItem_ in self.InformBItem:
            namespaceprefix_ = self.InformBItem_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBItem_nsprefix_) else ''
            InformBItem_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformBItem', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformBItem':
            obj_ = InformBTypeRegItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformBItem.append(obj_)
            obj_.original_tagname_ = 'InformBItem'
# end class InformBType63


class HeaderType64(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, ActDate=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType65(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType64)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType64.subclass:
            return HeaderType64.subclass(*args_, **kwargs_)
        else:
            return HeaderType64(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType65(self, value):
        result = True
        # Validate type NoteType65, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.ActDate is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType64', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType64')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType64':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType64')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType64', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType64'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType64', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType65
            self.validate_NoteType65(self.Note)
# end class HeaderType64


class ContentType66(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType66)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType66.subclass:
            return ContentType66.subclass(*args_, **kwargs_)
        else:
            return ContentType66(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType66', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType66')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType66':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType66')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType66', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType66'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType66', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActChargeOnPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType66


class InformABType(GeneratedsSuper):
    """Справки А и Б"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformABKey=None, InformABReg=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformABKey = InformABKey
        self.InformABKey_nsprefix_ = None
        self.InformABReg = InformABReg
        self.InformABReg_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformABType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformABType.subclass:
            return InformABType.subclass(*args_, **kwargs_)
        else:
            return InformABType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformABKey(self):
        return self.InformABKey
    def set_InformABKey(self, InformABKey):
        self.InformABKey = InformABKey
    def get_InformABReg(self):
        return self.InformABReg
    def set_InformABReg(self, InformABReg):
        self.InformABReg = InformABReg
    def hasContent_(self):
        if (
            self.InformABKey is not None or
            self.InformABReg is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformABType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformABType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformABType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformABType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformABType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InformABType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformABType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformABKey is not None:
            namespaceprefix_ = self.InformABKey_nsprefix_ + ':' if (UseCapturedNS_ and self.InformABKey_nsprefix_) else ''
            self.InformABKey.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformABKey', pretty_print=pretty_print)
        if self.InformABReg is not None:
            namespaceprefix_ = self.InformABReg_nsprefix_ + ':' if (UseCapturedNS_ and self.InformABReg_nsprefix_) else ''
            self.InformABReg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformABReg', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformABKey':
            obj_ = InformABKeyType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformABKey = obj_
            obj_.original_tagname_ = 'InformABKey'
        elif nodeName_ == 'InformABReg':
            obj_ = InformABRegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformABReg = obj_
            obj_.original_tagname_ = 'InformABReg'
# end class InformABType


class HeaderType67(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ActRegId=None, Number=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ActRegId = ActRegId
        self.validate_NoEmptyString50(self.ActRegId)
        self.ActRegId_nsprefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType67)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType67.subclass:
            return HeaderType67.subclass(*args_, **kwargs_)
        else:
            return HeaderType67(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ActRegId(self):
        return self.ActRegId
    def set_ActRegId(self, ActRegId):
        self.ActRegId = ActRegId
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ActRegId is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType67', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType67')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType67':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType67')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType67', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType67'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType67', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ActRegId is not None:
            namespaceprefix_ = self.ActRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ActRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActRegId>%s</%sActRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActRegId), input_name='ActRegId')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ActRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActRegId')
            value_ = self.gds_validate_string(value_, node, 'ActRegId')
            self.ActRegId = value_
            self.ActRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActRegId)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
# end class HeaderType67


class ContentType68(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType68)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType68.subclass:
            return ContentType68.subclass(*args_, **kwargs_)
        else:
            return ContentType68(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType68', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType68')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType68':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType68')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType68', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType68'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType68', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformInvPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType68


class InformBType69(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformBItem=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if InformBItem is None:
            self.InformBItem = []
        else:
            self.InformBItem = InformBItem
        self.InformBItem_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformBType69)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformBType69.subclass:
            return InformBType69.subclass(*args_, **kwargs_)
        else:
            return InformBType69(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformBItem(self):
        return self.InformBItem
    def set_InformBItem(self, InformBItem):
        self.InformBItem = InformBItem
    def add_InformBItem(self, value):
        self.InformBItem.append(value)
    def insert_InformBItem_at(self, index, value):
        self.InformBItem.insert(index, value)
    def replace_InformBItem_at(self, index, value):
        self.InformBItem[index] = value
    def hasContent_(self):
        if (
            self.InformBItem
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformBType69', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformBType69')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformBType69':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformBType69')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformBType69', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InformBType69'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformBType69', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformBItem_ in self.InformBItem:
            namespaceprefix_ = self.InformBItem_nsprefix_ + ':' if (UseCapturedNS_ and self.InformBItem_nsprefix_) else ''
            InformBItem_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformBItem', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformBItem':
            obj_ = InformInvBRegItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformBItem.append(obj_)
            obj_.original_tagname_ = 'InformBItem'
# end class InformBType69


class ParametersType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Parameter=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Parameter is None:
            self.Parameter = []
        else:
            self.Parameter = Parameter
        self.Parameter_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParametersType.subclass:
            return ParametersType.subclass(*args_, **kwargs_)
        else:
            return ParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Parameter(self):
        return self.Parameter
    def set_Parameter(self, Parameter):
        self.Parameter = Parameter
    def add_Parameter(self, value):
        self.Parameter.append(value)
    def insert_Parameter_at(self, index, value):
        self.Parameter.insert(index, value)
    def replace_Parameter_at(self, index, value):
        self.Parameter[index] = value
    def hasContent_(self):
        if (
            self.Parameter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ParametersType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ParametersType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ParametersType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ParametersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Parameter_ in self.Parameter:
            namespaceprefix_ = self.Parameter_nsprefix_ + ':' if (UseCapturedNS_ and self.Parameter_nsprefix_) else ''
            Parameter_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Parameter', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Parameter':
            obj_ = Parameter.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Parameter.append(obj_)
            obj_.original_tagname_ = 'Parameter'
# end class ParametersType


class HeaderType70(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, WBRegId=None, EGAISFixNumber=None, EGAISFixDate=None, WBNUMBER=None, WBDate=None, Shipper=None, Consignee=None, Supplier=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.EGAISFixNumber = EGAISFixNumber
        self.validate_NoEmptyString50(self.EGAISFixNumber)
        self.EGAISFixNumber_nsprefix_ = None
        if isinstance(EGAISFixDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISFixDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISFixDate
        self.EGAISFixDate = initvalue_
        self.EGAISFixDate_nsprefix_ = None
        self.WBNUMBER = WBNUMBER
        self.validate_NoEmptyString50(self.WBNUMBER)
        self.WBNUMBER_nsprefix_ = None
        if isinstance(WBDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(WBDate, '%Y-%m-%d').date()
        else:
            initvalue_ = WBDate
        self.WBDate = initvalue_
        self.WBDate_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType70)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType70.subclass:
            return HeaderType70.subclass(*args_, **kwargs_)
        else:
            return HeaderType70(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_EGAISFixNumber(self):
        return self.EGAISFixNumber
    def set_EGAISFixNumber(self, EGAISFixNumber):
        self.EGAISFixNumber = EGAISFixNumber
    def get_EGAISFixDate(self):
        return self.EGAISFixDate
    def set_EGAISFixDate(self, EGAISFixDate):
        self.EGAISFixDate = EGAISFixDate
    def get_WBNUMBER(self):
        return self.WBNUMBER
    def set_WBNUMBER(self, WBNUMBER):
        self.WBNUMBER = WBNUMBER
    def get_WBDate(self):
        return self.WBDate
    def set_WBDate(self, WBDate):
        self.WBDate = WBDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.WBRegId is not None or
            self.EGAISFixNumber is not None or
            self.EGAISFixDate is not None or
            self.WBNUMBER is not None or
            self.WBDate is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.Supplier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType70', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType70')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType70':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType70')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType70', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType70'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType70', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.EGAISFixNumber is not None:
            namespaceprefix_ = self.EGAISFixNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixNumber>%s</%sEGAISFixNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISFixNumber), input_name='EGAISFixNumber')), namespaceprefix_ , eol_))
        if self.EGAISFixDate is not None:
            namespaceprefix_ = self.EGAISFixDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixDate>%s</%sEGAISFixDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISFixDate, input_name='EGAISFixDate'), namespaceprefix_ , eol_))
        if self.WBNUMBER is not None:
            namespaceprefix_ = self.WBNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.WBNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBNUMBER>%s</%sWBNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBNUMBER), input_name='WBNUMBER')), namespaceprefix_ , eol_))
        if self.WBDate is not None:
            namespaceprefix_ = self.WBDate_nsprefix_ + ':' if (UseCapturedNS_ and self.WBDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBDate>%s</%sWBDate>%s' % (namespaceprefix_ , self.gds_format_date(self.WBDate, input_name='WBDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'EGAISFixNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISFixNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISFixNumber')
            self.EGAISFixNumber = value_
            self.EGAISFixNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISFixNumber)
        elif nodeName_ == 'EGAISFixDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISFixDate = dval_
            self.EGAISFixDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISFixDate)
        elif nodeName_ == 'WBNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBNUMBER')
            value_ = self.gds_validate_string(value_, node, 'WBNUMBER')
            self.WBNUMBER = value_
            self.WBNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBNUMBER)
        elif nodeName_ == 'WBDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.WBDate = dval_
            self.WBDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.WBDate)
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
# end class HeaderType70


class ContentType71(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType71)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType71.subclass:
            return ContentType71.subclass(*args_, **kwargs_)
        else:
            return ContentType71(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType71', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType71')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType71':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType71')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType71', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType71'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType71', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformBPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType71


class HeaderType72(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActNumber=None, ActDate=None, TypeWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActNumber = ActNumber
        self.validate_NoEmptyString50(self.ActNumber)
        self.ActNumber_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeWriteOff = TypeWriteOff
        self.validate_TypeWriteOff5(self.TypeWriteOff)
        self.TypeWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType73(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType72)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType72.subclass:
            return HeaderType72.subclass(*args_, **kwargs_)
        else:
            return HeaderType72(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActNumber(self):
        return self.ActNumber
    def set_ActNumber(self, ActNumber):
        self.ActNumber = ActNumber
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeWriteOff(self):
        return self.TypeWriteOff
    def set_TypeWriteOff(self, TypeWriteOff):
        self.TypeWriteOff = TypeWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeWriteOff5(self, value):
        result = True
        # Validate type TypeWriteOff5, a restriction on xs:string.
        pass
        return result
    def validate_NoteType73(self, value):
        result = True
        # Validate type NoteType73, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ActNumber is not None or
            self.ActDate is not None or
            self.TypeWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType72', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType72')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType72':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType72')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType72', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType72'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType72', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActNumber is not None:
            namespaceprefix_ = self.ActNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ActNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActNumber>%s</%sActNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActNumber), input_name='ActNumber')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeWriteOff is not None:
            namespaceprefix_ = self.TypeWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeWriteOff>%s</%sTypeWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeWriteOff), input_name='TypeWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActNumber')
            value_ = self.gds_validate_string(value_, node, 'ActNumber')
            self.ActNumber = value_
            self.ActNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActNumber)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeWriteOff')
            value_ = self.gds_validate_string(value_, node, 'TypeWriteOff')
            self.TypeWriteOff = value_
            self.TypeWriteOff_nsprefix_ = child_.prefix
            # validate type TypeWriteOff5
            self.validate_TypeWriteOff5(self.TypeWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType73
            self.validate_NoteType73(self.Note)
# end class HeaderType72


class ContentType74(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType74)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType74.subclass:
            return ContentType74.subclass(*args_, **kwargs_)
        else:
            return ContentType74(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType74', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType74')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType74':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType74')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType74', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType74'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType74', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActWriteOffPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType74


class HeaderType75(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type='OperProduction', NUMBER=None, Date=None, ProducedDate=None, Producer=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_OperType(self.Type)
        self.Type_nsprefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ProducedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ProducedDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ProducedDate
        self.ProducedDate = initvalue_
        self.ProducedDate_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType76(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType75)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType75.subclass:
            return HeaderType75.subclass(*args_, **kwargs_)
        else:
            return HeaderType75(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ProducedDate(self):
        return self.ProducedDate
    def set_ProducedDate(self, ProducedDate):
        self.ProducedDate = ProducedDate
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_OperType(self, value):
        result = True
        # Validate type OperType, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType76(self, value):
        result = True
        # Validate type NoteType76, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type != "OperProduction" or
            self.NUMBER is not None or
            self.Date is not None or
            self.ProducedDate is not None or
            self.Producer is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType75', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType75')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType75':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType75')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType75', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType75'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType75', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ProducedDate is not None:
            namespaceprefix_ = self.ProducedDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducedDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducedDate>%s</%sProducedDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ProducedDate, input_name='ProducedDate'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type OperType
            self.validate_OperType(self.Type)
        elif nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ProducedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ProducedDate = dval_
            self.ProducedDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ProducedDate)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType76
            self.validate_NoteType76(self.Note)
# end class HeaderType75


class ContentType77(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType77)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType77.subclass:
            return ContentType77.subclass(*args_, **kwargs_)
        else:
            return ContentType77(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType77', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType77')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType77':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType77')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType77', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType77'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType77', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType6.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType77


class ContentResourceType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Resource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Resource is None:
            self.Resource = []
        else:
            self.Resource = Resource
        self.Resource_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentResourceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentResourceType.subclass:
            return ContentResourceType.subclass(*args_, **kwargs_)
        else:
            return ContentResourceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Resource(self):
        return self.Resource
    def set_Resource(self, Resource):
        self.Resource = Resource
    def add_Resource(self, value):
        self.Resource.append(value)
    def insert_Resource_at(self, index, value):
        self.Resource.insert(index, value)
    def replace_Resource_at(self, index, value):
        self.Resource[index] = value
    def hasContent_(self):
        if (
            self.Resource
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentResourceType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentResourceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentResourceType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentResourceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentResourceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentResourceType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentResourceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Resource_ in self.Resource:
            namespaceprefix_ = self.Resource_nsprefix_ + ':' if (UseCapturedNS_ and self.Resource_nsprefix_) else ''
            Resource_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Resource', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Resource':
            obj_ = UsedResourceType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Resource.append(obj_)
            obj_.original_tagname_ = 'Resource'
# end class ContentResourceType


class addresslistType78(GeneratedsSuper):
    """Список фактических адресов ИП"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, address=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if address is None:
            self.address = []
        else:
            self.address = address
        self.address_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, addresslistType78)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if addresslistType78.subclass:
            return addresslistType78.subclass(*args_, **kwargs_)
        else:
            return addresslistType78(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_address(self):
        return self.address
    def set_address(self, address):
        self.address = address
    def add_address(self, value):
        self.address.append(value)
    def insert_address_at(self, index, value):
        self.address.insert(index, value)
    def replace_address_at(self, index, value):
        self.address[index] = value
    def hasContent_(self):
        if (
            self.address
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='addresslistType78', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('addresslistType78')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'addresslistType78':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='addresslistType78')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='addresslistType78', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='addresslistType78'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='addresslistType78', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for address_ in self.address:
            namespaceprefix_ = self.address_nsprefix_ + ':' if (UseCapturedNS_ and self.address_nsprefix_) else ''
            address_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='address', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'address':
            obj_ = OrgAddressType9.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.address.append(obj_)
            obj_.original_tagname_ = 'address'
# end class addresslistType78


class RangesType104(GeneratedsSuper):
    """Диапазоны марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Range=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Range is None:
            self.Range = []
        else:
            self.Range = Range
        self.Range_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RangesType104)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RangesType104.subclass:
            return RangesType104.subclass(*args_, **kwargs_)
        else:
            return RangesType104(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Range(self):
        return self.Range
    def set_Range(self, Range):
        self.Range = Range
    def add_Range(self, value):
        self.Range.append(value)
    def insert_Range_at(self, index, value):
        self.Range.insert(index, value)
    def replace_Range_at(self, index, value):
        self.Range[index] = value
    def hasContent_(self):
        if (
            self.Range
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangesType104', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RangesType104')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RangesType104':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RangesType104')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RangesType104', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RangesType104'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangesType104', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Range_ in self.Range:
            namespaceprefix_ = self.Range_nsprefix_ + ':' if (UseCapturedNS_ and self.Range_nsprefix_) else ''
            Range_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Range', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Range':
            obj_ = RangeType105.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Range.append(obj_)
            obj_.original_tagname_ = 'Range'
# end class RangesType104


class RangeType105(GeneratedsSuper):
    """Диапазоны марок"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, Rank=None, Start=None, Last=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.Identity_nsprefix_ = None
        self.Rank = Rank
        self.validate_RankType18(self.Rank)
        self.Rank_nsprefix_ = None
        self.Start = Start
        self.validate_MarkNumberType19(self.Start)
        self.Start_nsprefix_ = None
        self.Last = Last
        self.validate_MarkNumberType19(self.Last)
        self.Last_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RangeType105)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RangeType105.subclass:
            return RangeType105.subclass(*args_, **kwargs_)
        else:
            return RangeType105(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_Rank(self):
        return self.Rank
    def set_Rank(self, Rank):
        self.Rank = Rank
    def get_Start(self):
        return self.Start
    def set_Start(self, Start):
        self.Start = Start
    def get_Last(self):
        return self.Last
    def set_Last(self, Last):
        self.Last = Last
    def validate_RankType18(self, value):
        result = True
        # Validate type RankType18, a restriction on xs:string.
        pass
        return result
    def validate_MarkNumberType19(self, value):
        result = True
        # Validate type MarkNumberType19, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.Rank is not None or
            self.Start is not None or
            self.Last is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangeType105', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RangeType105')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'RangeType105':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RangeType105')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RangeType105', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RangeType105'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='RangeType105', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.Rank is not None:
            namespaceprefix_ = self.Rank_nsprefix_ + ':' if (UseCapturedNS_ and self.Rank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRank>%s</%sRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Rank), input_name='Rank')), namespaceprefix_ , eol_))
        if self.Start is not None:
            namespaceprefix_ = self.Start_nsprefix_ + ':' if (UseCapturedNS_ and self.Start_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStart>%s</%sStart>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), namespaceprefix_ , eol_))
        if self.Last is not None:
            namespaceprefix_ = self.Last_nsprefix_ + ':' if (UseCapturedNS_ and self.Last_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLast>%s</%sLast>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Last), input_name='Last')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
        elif nodeName_ == 'Rank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Rank')
            value_ = self.gds_validate_string(value_, node, 'Rank')
            self.Rank = value_
            self.Rank_nsprefix_ = child_.prefix
            # validate type RankType18
            self.validate_RankType18(self.Rank)
        elif nodeName_ == 'Start':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Start')
            value_ = self.gds_validate_string(value_, node, 'Start')
            self.Start = value_
            self.Start_nsprefix_ = child_.prefix
            # validate type MarkNumberType19
            self.validate_MarkNumberType19(self.Start)
        elif nodeName_ == 'Last':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Last')
            value_ = self.gds_validate_string(value_, node, 'Last')
            self.Last = value_
            self.Last_nsprefix_ = child_.prefix
            # validate type MarkNumberType19
            self.validate_MarkNumberType19(self.Last)
# end class RangeType105


class HeaderType131(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NUMBER=None, Date=None, ImportedDate=None, Importer=None, Supplier=None, GTDNUMBER=None, GTDDate=None, ContractNUMBER=None, ContractDate=None, Country=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ImportedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ImportedDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ImportedDate
        self.ImportedDate = initvalue_
        self.ImportedDate_nsprefix_ = None
        self.Importer = Importer
        self.Importer_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.GTDNUMBER = GTDNUMBER
        self.validate_NoEmptyString50(self.GTDNUMBER)
        self.GTDNUMBER_nsprefix_ = None
        if isinstance(GTDDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GTDDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GTDDate
        self.GTDDate = initvalue_
        self.GTDDate_nsprefix_ = None
        self.ContractNUMBER = ContractNUMBER
        self.validate_NoEmptyString50(self.ContractNUMBER)
        self.ContractNUMBER_nsprefix_ = None
        if isinstance(ContractDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ContractDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ContractDate
        self.ContractDate = initvalue_
        self.ContractDate_nsprefix_ = None
        self.Country = Country
        self.validate_CountryType132(self.Country)
        self.Country_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType133(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType131)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType131.subclass:
            return HeaderType131.subclass(*args_, **kwargs_)
        else:
            return HeaderType131(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ImportedDate(self):
        return self.ImportedDate
    def set_ImportedDate(self, ImportedDate):
        self.ImportedDate = ImportedDate
    def get_Importer(self):
        return self.Importer
    def set_Importer(self, Importer):
        self.Importer = Importer
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def get_GTDNUMBER(self):
        return self.GTDNUMBER
    def set_GTDNUMBER(self, GTDNUMBER):
        self.GTDNUMBER = GTDNUMBER
    def get_GTDDate(self):
        return self.GTDDate
    def set_GTDDate(self, GTDDate):
        self.GTDDate = GTDDate
    def get_ContractNUMBER(self):
        return self.ContractNUMBER
    def set_ContractNUMBER(self, ContractNUMBER):
        self.ContractNUMBER = ContractNUMBER
    def get_ContractDate(self):
        return self.ContractDate
    def set_ContractDate(self, ContractDate):
        self.ContractDate = ContractDate
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_CountryType132(self, value):
        result = True
        # Validate type CountryType132, a restriction on xs:string.
        pass
        return result
    def validate_NoteType133(self, value):
        result = True
        # Validate type NoteType133, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.NUMBER is not None or
            self.Date is not None or
            self.ImportedDate is not None or
            self.Importer is not None or
            self.Supplier is not None or
            self.GTDNUMBER is not None or
            self.GTDDate is not None or
            self.ContractNUMBER is not None or
            self.ContractDate is not None or
            self.Country is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType131', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType131')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType131':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType131')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType131', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType131'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType131', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ImportedDate is not None:
            namespaceprefix_ = self.ImportedDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ImportedDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImportedDate>%s</%sImportedDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ImportedDate, input_name='ImportedDate'), namespaceprefix_ , eol_))
        if self.Importer is not None:
            namespaceprefix_ = self.Importer_nsprefix_ + ':' if (UseCapturedNS_ and self.Importer_nsprefix_) else ''
            self.Importer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Importer', pretty_print=pretty_print)
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
        if self.GTDNUMBER is not None:
            namespaceprefix_ = self.GTDNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDNUMBER>%s</%sGTDNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GTDNUMBER), input_name='GTDNUMBER')), namespaceprefix_ , eol_))
        if self.GTDDate is not None:
            namespaceprefix_ = self.GTDDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDDate>%s</%sGTDDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GTDDate, input_name='GTDDate'), namespaceprefix_ , eol_))
        if self.ContractNUMBER is not None:
            namespaceprefix_ = self.ContractNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractNUMBER>%s</%sContractNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContractNUMBER), input_name='ContractNUMBER')), namespaceprefix_ , eol_))
        if self.ContractDate is not None:
            namespaceprefix_ = self.ContractDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractDate>%s</%sContractDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ContractDate, input_name='ContractDate'), namespaceprefix_ , eol_))
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ImportedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ImportedDate = dval_
            self.ImportedDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ImportedDate)
        elif nodeName_ == 'Importer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Importer = obj_
            obj_.original_tagname_ = 'Importer'
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfoForeign_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
        elif nodeName_ == 'GTDNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GTDNUMBER')
            value_ = self.gds_validate_string(value_, node, 'GTDNUMBER')
            self.GTDNUMBER = value_
            self.GTDNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.GTDNUMBER)
        elif nodeName_ == 'GTDDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GTDDate = dval_
            self.GTDDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.GTDDate)
        elif nodeName_ == 'ContractNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContractNUMBER')
            value_ = self.gds_validate_string(value_, node, 'ContractNUMBER')
            self.ContractNUMBER = value_
            self.ContractNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ContractNUMBER)
        elif nodeName_ == 'ContractDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ContractDate = dval_
            self.ContractDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ContractDate)
        elif nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType132
            self.validate_CountryType132(self.Country)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType133
            self.validate_NoteType133(self.Note)
# end class HeaderType131


class ContentType134(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType134)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType134.subclass:
            return ContentType134.subclass(*args_, **kwargs_)
        else:
            return ContentType134(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType134', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType134')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType134':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType134')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType134', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType134'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType134', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType20.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType134


class ProductsType138(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType138)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType138.subclass:
            return ProductsType138.subclass(*args_, **kwargs_)
        else:
            return ProductsType138(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType138', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType138')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType138':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType138')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType138', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType138'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType138', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType138


class ProductsType139(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType139)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType139.subclass:
            return ProductsType139.subclass(*args_, **kwargs_)
        else:
            return ProductsType139(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType139', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType139')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType139':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType139')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType139', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType139'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType139', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType139


class ClientsType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Client=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Client is None:
            self.Client = []
        else:
            self.Client = Client
        self.Client_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientsType.subclass:
            return ClientsType.subclass(*args_, **kwargs_)
        else:
            return ClientsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Client(self):
        return self.Client
    def set_Client(self, Client):
        self.Client = Client
    def add_Client(self, value):
        self.Client.append(value)
    def insert_Client_at(self, index, value):
        self.Client.insert(index, value)
    def replace_Client_at(self, index, value):
        self.Client[index] = value
    def hasContent_(self):
        if (
            self.Client
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ClientsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientsType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ClientsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Client_ in self.Client:
            namespaceprefix_ = self.Client_nsprefix_ + ':' if (UseCapturedNS_ and self.Client_nsprefix_) else ''
            Client_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Client', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Client':
            obj_ = OrgInfoEx.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Client.append(obj_)
            obj_.original_tagname_ = 'Client'
# end class ClientsType


class ProductsType140(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType140)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType140.subclass:
            return ProductsType140.subclass(*args_, **kwargs_)
        else:
            return ProductsType140(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType140', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType140')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType140':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType140')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType140', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType140'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType140', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType140


class ProductsType141(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StockPosition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StockPosition is None:
            self.StockPosition = []
        else:
            self.StockPosition = StockPosition
        self.StockPosition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType141)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType141.subclass:
            return ProductsType141.subclass(*args_, **kwargs_)
        else:
            return ProductsType141(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StockPosition(self):
        return self.StockPosition
    def set_StockPosition(self, StockPosition):
        self.StockPosition = StockPosition
    def add_StockPosition(self, value):
        self.StockPosition.append(value)
    def insert_StockPosition_at(self, index, value):
        self.StockPosition.insert(index, value)
    def replace_StockPosition_at(self, index, value):
        self.StockPosition[index] = value
    def hasContent_(self):
        if (
            self.StockPosition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType141', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType141')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType141':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType141')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType141', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType141'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType141', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StockPosition_ in self.StockPosition:
            namespaceprefix_ = self.StockPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.StockPosition_nsprefix_) else ''
            StockPosition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StockPosition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StockPosition':
            obj_ = StockPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StockPosition.append(obj_)
            obj_.original_tagname_ = 'StockPosition'
# end class ProductsType141


class HistoryBType(GeneratedsSuper):
    """История движения по справке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OperationB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if OperationB is None:
            self.OperationB = []
        else:
            self.OperationB = OperationB
        self.OperationB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistoryBType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistoryBType.subclass:
            return HistoryBType.subclass(*args_, **kwargs_)
        else:
            return HistoryBType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OperationB(self):
        return self.OperationB
    def set_OperationB(self, OperationB):
        self.OperationB = OperationB
    def add_OperationB(self, value):
        self.OperationB.append(value)
    def insert_OperationB_at(self, index, value):
        self.OperationB.insert(index, value)
    def replace_OperationB_at(self, index, value):
        self.OperationB[index] = value
    def hasContent_(self):
        if (
            self.OperationB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryBType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HistoryBType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HistoryBType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HistoryBType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HistoryBType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HistoryBType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryBType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OperationB_ in self.OperationB:
            namespaceprefix_ = self.OperationB_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationB_nsprefix_) else ''
            OperationB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OperationB':
            obj_ = OperationBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationB.append(obj_)
            obj_.original_tagname_ = 'OperationB'
# end class HistoryBType


class ProductsType142(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType142)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType142.subclass:
            return ProductsType142.subclass(*args_, **kwargs_)
        else:
            return ProductsType142(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType142', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType142')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType142':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType142')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType142', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType142'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType142', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType142


class ProductsType143(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType143)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType143.subclass:
            return ProductsType143.subclass(*args_, **kwargs_)
        else:
            return ProductsType143(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType143', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType143')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType143':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType143')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType143', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType143'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType143', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType143


class ClientsType144(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Client=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Client is None:
            self.Client = []
        else:
            self.Client = Client
        self.Client_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ClientsType144)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ClientsType144.subclass:
            return ClientsType144.subclass(*args_, **kwargs_)
        else:
            return ClientsType144(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Client(self):
        return self.Client
    def set_Client(self, Client):
        self.Client = Client
    def add_Client(self, value):
        self.Client.append(value)
    def insert_Client_at(self, index, value):
        self.Client.insert(index, value)
    def replace_Client_at(self, index, value):
        self.Client[index] = value
    def hasContent_(self):
        if (
            self.Client
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ClientsType144', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ClientsType144')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ClientsType144':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ClientsType144')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ClientsType144', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ClientsType144'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='ClientsType144', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Client_ in self.Client:
            namespaceprefix_ = self.Client_nsprefix_ + ':' if (UseCapturedNS_ and self.Client_nsprefix_) else ''
            Client_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Client', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Client':
            obj_ = OrgInfoEx_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Client.append(obj_)
            obj_.original_tagname_ = 'Client'
# end class ClientsType144


class ProductsType145(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Product=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Product is None:
            self.Product = []
        else:
            self.Product = Product
        self.Product_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType145)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType145.subclass:
            return ProductsType145.subclass(*args_, **kwargs_)
        else:
            return ProductsType145(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Product(self):
        return self.Product
    def set_Product(self, Product):
        self.Product = Product
    def add_Product(self, value):
        self.Product.append(value)
    def insert_Product_at(self, index, value):
        self.Product.insert(index, value)
    def replace_Product_at(self, index, value):
        self.Product[index] = value
    def hasContent_(self):
        if (
            self.Product
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType145', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType145')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType145':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType145')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType145', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType145'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:pref="http://fsrar.ru/WEGAIS/ProductRef" ', name_='ProductsType145', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Product_ in self.Product:
            namespaceprefix_ = self.Product_nsprefix_ + ':' if (UseCapturedNS_ and self.Product_nsprefix_) else ''
            Product_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Product', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Product':
            obj_ = ProductInfoReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Product.append(obj_)
            obj_.original_tagname_ = 'Product'
# end class ProductsType145


class ProductsType146(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StockPosition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StockPosition is None:
            self.StockPosition = []
        else:
            self.StockPosition = StockPosition
        self.StockPosition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType146)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType146.subclass:
            return ProductsType146.subclass(*args_, **kwargs_)
        else:
            return ProductsType146(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StockPosition(self):
        return self.StockPosition
    def set_StockPosition(self, StockPosition):
        self.StockPosition = StockPosition
    def add_StockPosition(self, value):
        self.StockPosition.append(value)
    def insert_StockPosition_at(self, index, value):
        self.StockPosition.insert(index, value)
    def replace_StockPosition_at(self, index, value):
        self.StockPosition[index] = value
    def hasContent_(self):
        if (
            self.StockPosition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType146', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType146')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType146':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType146')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType146', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType146'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType146', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StockPosition_ in self.StockPosition:
            namespaceprefix_ = self.StockPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.StockPosition_nsprefix_) else ''
            StockPosition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StockPosition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StockPosition':
            obj_ = StockPositionType21.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StockPosition.append(obj_)
            obj_.original_tagname_ = 'StockPosition'
# end class ProductsType146


class HistoryF2Type(GeneratedsSuper):
    """История двидения по справке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, OperationB=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if OperationB is None:
            self.OperationB = []
        else:
            self.OperationB = OperationB
        self.OperationB_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistoryF2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistoryF2Type.subclass:
            return HistoryF2Type.subclass(*args_, **kwargs_)
        else:
            return HistoryF2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_OperationB(self):
        return self.OperationB
    def set_OperationB(self, OperationB):
        self.OperationB = OperationB
    def add_OperationB(self, value):
        self.OperationB.append(value)
    def insert_OperationB_at(self, index, value):
        self.OperationB.insert(index, value)
    def replace_OperationB_at(self, index, value):
        self.OperationB[index] = value
    def hasContent_(self):
        if (
            self.OperationB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryF2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HistoryF2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HistoryF2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HistoryF2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HistoryF2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HistoryF2Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryF2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for OperationB_ in self.OperationB:
            namespaceprefix_ = self.OperationB_nsprefix_ + ':' if (UseCapturedNS_ and self.OperationB_nsprefix_) else ''
            OperationB_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OperationB', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'OperationB':
            obj_ = OperationBType22.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.OperationB.append(obj_)
            obj_.original_tagname_ = 'OperationB'
# end class HistoryF2Type


class HeaderType147(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type='WBInvoiceFromMe', NUMBER=None, Date=None, ShippingDate=None, Transport=None, Shipper=None, Consignee=None, Base=None, Note=None, VarField1=None, VarField2=None, VarField3=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_WbType25(self.Type)
        self.Type_nsprefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Transport = Transport
        self.Transport_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.Base = Base
        self.validate_BaseType148(self.Base)
        self.Base_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType149(self.Note)
        self.Note_nsprefix_ = None
        self.VarField1 = VarField1
        self.validate_VarField1Type(self.VarField1)
        self.VarField1_nsprefix_ = None
        self.VarField2 = VarField2
        self.validate_VarField2Type(self.VarField2)
        self.VarField2_nsprefix_ = None
        self.VarField3 = VarField3
        self.validate_VarField3Type(self.VarField3)
        self.VarField3_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType147)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType147.subclass:
            return HeaderType147.subclass(*args_, **kwargs_)
        else:
            return HeaderType147(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Transport(self):
        return self.Transport
    def set_Transport(self, Transport):
        self.Transport = Transport
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_Base(self):
        return self.Base
    def set_Base(self, Base):
        self.Base = Base
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def get_VarField1(self):
        return self.VarField1
    def set_VarField1(self, VarField1):
        self.VarField1 = VarField1
    def get_VarField2(self):
        return self.VarField2
    def set_VarField2(self, VarField2):
        self.VarField2 = VarField2
    def get_VarField3(self):
        return self.VarField3
    def set_VarField3(self, VarField3):
        self.VarField3 = VarField3
    def validate_WbType25(self, value):
        result = True
        # Validate type WbType25, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_BaseType148(self, value):
        result = True
        # Validate type BaseType148, a restriction on xs:string.
        pass
        return result
    def validate_NoteType149(self, value):
        result = True
        # Validate type NoteType149, a restriction on xs:string.
        pass
        return result
    def validate_VarField1Type(self, value):
        result = True
        # Validate type VarField1Type, a restriction on xs:string.
        pass
        return result
    def validate_VarField2Type(self, value):
        result = True
        # Validate type VarField2Type, a restriction on xs:string.
        pass
        return result
    def validate_VarField3Type(self, value):
        result = True
        # Validate type VarField3Type, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type != "WBInvoiceFromMe" or
            self.NUMBER is not None or
            self.Date is not None or
            self.ShippingDate is not None or
            self.Transport is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.Base is not None or
            self.Note is not None or
            self.VarField1 is not None or
            self.VarField2 is not None or
            self.VarField3 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType147', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType147')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType147':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType147')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType147', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType147'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType147', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Transport is not None:
            namespaceprefix_ = self.Transport_nsprefix_ + ':' if (UseCapturedNS_ and self.Transport_nsprefix_) else ''
            self.Transport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Transport', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.Base is not None:
            namespaceprefix_ = self.Base_nsprefix_ + ':' if (UseCapturedNS_ and self.Base_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBase>%s</%sBase>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Base), input_name='Base')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
        if self.VarField1 is not None:
            namespaceprefix_ = self.VarField1_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField1>%s</%sVarField1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField1), input_name='VarField1')), namespaceprefix_ , eol_))
        if self.VarField2 is not None:
            namespaceprefix_ = self.VarField2_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField2>%s</%sVarField2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField2), input_name='VarField2')), namespaceprefix_ , eol_))
        if self.VarField3 is not None:
            namespaceprefix_ = self.VarField3_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField3>%s</%sVarField3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField3), input_name='VarField3')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type WbType25
            self.validate_WbType25(self.Type)
        elif nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Transport':
            obj_ = TransportType24.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transport = obj_
            obj_.original_tagname_ = 'Transport'
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'Base':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Base')
            value_ = self.gds_validate_string(value_, node, 'Base')
            self.Base = value_
            self.Base_nsprefix_ = child_.prefix
            # validate type BaseType148
            self.validate_BaseType148(self.Base)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType149
            self.validate_NoteType149(self.Note)
        elif nodeName_ == 'VarField1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField1')
            value_ = self.gds_validate_string(value_, node, 'VarField1')
            self.VarField1 = value_
            self.VarField1_nsprefix_ = child_.prefix
            # validate type VarField1Type
            self.validate_VarField1Type(self.VarField1)
        elif nodeName_ == 'VarField2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField2')
            value_ = self.gds_validate_string(value_, node, 'VarField2')
            self.VarField2 = value_
            self.VarField2_nsprefix_ = child_.prefix
            # validate type VarField2Type
            self.validate_VarField2Type(self.VarField2)
        elif nodeName_ == 'VarField3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField3')
            value_ = self.gds_validate_string(value_, node, 'VarField3')
            self.VarField3 = value_
            self.VarField3_nsprefix_ = child_.prefix
            # validate type VarField3Type
            self.validate_VarField3Type(self.VarField3)
# end class HeaderType147


class ContentType150(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType150)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType150.subclass:
            return ContentType150.subclass(*args_, **kwargs_)
        else:
            return ContentType150(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType150', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType150')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType150':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType150')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType150', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType150'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType150', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType23.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType150


class HeaderType161(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsAccept=None, ACTNUMBER=None, ActDate=None, WBRegId=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsAccept = IsAccept
        self.validate_AcceptType28(self.IsAccept)
        self.IsAccept_nsprefix_ = None
        self.ACTNUMBER = ACTNUMBER
        self.validate_NoEmptyString50(self.ACTNUMBER)
        self.ACTNUMBER_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType162(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType161)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType161.subclass:
            return HeaderType161.subclass(*args_, **kwargs_)
        else:
            return HeaderType161(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsAccept(self):
        return self.IsAccept
    def set_IsAccept(self, IsAccept):
        self.IsAccept = IsAccept
    def get_ACTNUMBER(self):
        return self.ACTNUMBER
    def set_ACTNUMBER(self, ACTNUMBER):
        self.ACTNUMBER = ACTNUMBER
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_AcceptType28(self, value):
        result = True
        # Validate type AcceptType28, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType162(self, value):
        result = True
        # Validate type NoteType162, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IsAccept is not None or
            self.ACTNUMBER is not None or
            self.ActDate is not None or
            self.WBRegId is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType161', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType161')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType161':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType161')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType161', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType161'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType161', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsAccept is not None:
            namespaceprefix_ = self.IsAccept_nsprefix_ + ':' if (UseCapturedNS_ and self.IsAccept_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsAccept>%s</%sIsAccept>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsAccept), input_name='IsAccept')), namespaceprefix_ , eol_))
        if self.ACTNUMBER is not None:
            namespaceprefix_ = self.ACTNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.ACTNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACTNUMBER>%s</%sACTNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACTNUMBER), input_name='ACTNUMBER')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsAccept':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IsAccept')
            value_ = self.gds_validate_string(value_, node, 'IsAccept')
            self.IsAccept = value_
            self.IsAccept_nsprefix_ = child_.prefix
            # validate type AcceptType28
            self.validate_AcceptType28(self.IsAccept)
        elif nodeName_ == 'ACTNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACTNUMBER')
            value_ = self.gds_validate_string(value_, node, 'ACTNUMBER')
            self.ACTNUMBER = value_
            self.ACTNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ACTNUMBER)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType162
            self.validate_NoteType162(self.Note)
# end class HeaderType161


class ContentType163(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType163)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType163.subclass:
            return ContentType163.subclass(*args_, **kwargs_)
        else:
            return ContentType163(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType163', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType163')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType163':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType163')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType163', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType163'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType163', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType27.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType163


class HeaderType164(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, ActDate=None, TypeChargeOn=None, ActWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeChargeOn = TypeChargeOn
        self.validate_TypeChargeOn(self.TypeChargeOn)
        self.TypeChargeOn_nsprefix_ = None
        self.ActWriteOff = ActWriteOff
        self.validate_NoEmptyString50(self.ActWriteOff)
        self.ActWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType165(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType164)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType164.subclass:
            return HeaderType164.subclass(*args_, **kwargs_)
        else:
            return HeaderType164(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeChargeOn(self):
        return self.TypeChargeOn
    def set_TypeChargeOn(self, TypeChargeOn):
        self.TypeChargeOn = TypeChargeOn
    def get_ActWriteOff(self):
        return self.ActWriteOff
    def set_ActWriteOff(self, ActWriteOff):
        self.ActWriteOff = ActWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeChargeOn(self, value):
        result = True
        # Validate type TypeChargeOn, a restriction on xs:string.
        pass
        return result
    def validate_NoteType165(self, value):
        result = True
        # Validate type NoteType165, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.ActDate is not None or
            self.TypeChargeOn is not None or
            self.ActWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType164', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType164')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType164':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType164')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType164', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType164'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType164', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeChargeOn is not None:
            namespaceprefix_ = self.TypeChargeOn_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeChargeOn_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeChargeOn>%s</%sTypeChargeOn>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeChargeOn), input_name='TypeChargeOn')), namespaceprefix_ , eol_))
        if self.ActWriteOff is not None:
            namespaceprefix_ = self.ActWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActWriteOff>%s</%sActWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActWriteOff), input_name='ActWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeChargeOn':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeChargeOn')
            value_ = self.gds_validate_string(value_, node, 'TypeChargeOn')
            self.TypeChargeOn = value_
            self.TypeChargeOn_nsprefix_ = child_.prefix
            # validate type TypeChargeOn
            self.validate_TypeChargeOn(self.TypeChargeOn)
        elif nodeName_ == 'ActWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActWriteOff')
            value_ = self.gds_validate_string(value_, node, 'ActWriteOff')
            self.ActWriteOff = value_
            self.ActWriteOff_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType165
            self.validate_NoteType165(self.Note)
# end class HeaderType164


class ContentType166(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType166)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType166.subclass:
            return ContentType166.subclass(*args_, **kwargs_)
        else:
            return ContentType166(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType166', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType166')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType166':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType166')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType166', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType166'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType166', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActChargeOnPositionType29.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType166


class InformF1F2Type(GeneratedsSuper):
    """Справки 1 и 2"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF1F2Reg=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.InformF1F2Reg = InformF1F2Reg
        self.InformF1F2Reg_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF1F2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF1F2Type.subclass:
            return InformF1F2Type.subclass(*args_, **kwargs_)
        else:
            return InformF1F2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF1F2Reg(self):
        return self.InformF1F2Reg
    def set_InformF1F2Reg(self, InformF1F2Reg):
        self.InformF1F2Reg = InformF1F2Reg
    def hasContent_(self):
        if (
            self.InformF1F2Reg is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF1F2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF1F2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF1F2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF1F2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF1F2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InformF1F2Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF1F2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InformF1F2Reg is not None:
            namespaceprefix_ = self.InformF1F2Reg_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF1F2Reg_nsprefix_) else ''
            self.InformF1F2Reg.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF1F2Reg', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF1F2Reg':
            obj_ = InformF1F2RegType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF1F2Reg = obj_
            obj_.original_tagname_ = 'InformF1F2Reg'
# end class InformF1F2Type


class HeaderType167(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, ActRegId=None, Number=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.ActRegId = ActRegId
        self.validate_NoEmptyString50(self.ActRegId)
        self.ActRegId_nsprefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType167)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType167.subclass:
            return HeaderType167.subclass(*args_, **kwargs_)
        else:
            return HeaderType167(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_ActRegId(self):
        return self.ActRegId
    def set_ActRegId(self, ActRegId):
        self.ActRegId = ActRegId
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.ActRegId is not None or
            self.Number is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType167', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType167')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType167':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType167')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType167', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType167'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType167', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.ActRegId is not None:
            namespaceprefix_ = self.ActRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.ActRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActRegId>%s</%sActRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActRegId), input_name='ActRegId')), namespaceprefix_ , eol_))
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'ActRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActRegId')
            value_ = self.gds_validate_string(value_, node, 'ActRegId')
            self.ActRegId = value_
            self.ActRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActRegId)
        elif nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
# end class HeaderType167


class ContentType168(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType168)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType168.subclass:
            return ContentType168.subclass(*args_, **kwargs_)
        else:
            return ContentType168(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType168', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType168')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType168':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType168')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType168', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType168'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType168', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformInvPositionType30.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType168


class InformF2Type169(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, InformF2Item=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if InformF2Item is None:
            self.InformF2Item = []
        else:
            self.InformF2Item = InformF2Item
        self.InformF2Item_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InformF2Type169)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InformF2Type169.subclass:
            return InformF2Type169.subclass(*args_, **kwargs_)
        else:
            return InformF2Type169(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_InformF2Item(self):
        return self.InformF2Item
    def set_InformF2Item(self, InformF2Item):
        self.InformF2Item = InformF2Item
    def add_InformF2Item(self, value):
        self.InformF2Item.append(value)
    def insert_InformF2Item_at(self, index, value):
        self.InformF2Item.insert(index, value)
    def replace_InformF2Item_at(self, index, value):
        self.InformF2Item[index] = value
    def hasContent_(self):
        if (
            self.InformF2Item
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF2Type169', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InformF2Type169')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'InformF2Type169':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='InformF2Type169')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='InformF2Type169', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='InformF2Type169'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='InformF2Type169', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for InformF2Item_ in self.InformF2Item:
            namespaceprefix_ = self.InformF2Item_nsprefix_ + ':' if (UseCapturedNS_ and self.InformF2Item_nsprefix_) else ''
            InformF2Item_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InformF2Item', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'InformF2Item':
            obj_ = InformInvF2RegItem.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.InformF2Item.append(obj_)
            obj_.original_tagname_ = 'InformF2Item'
# end class InformF2Type169


class HeaderType170(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, WBRegId=None, EGAISFixNumber=None, EGAISFixDate=None, WBNUMBER=None, WBDate=None, Shipper=None, Consignee=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.EGAISFixNumber = EGAISFixNumber
        self.validate_NoEmptyString50(self.EGAISFixNumber)
        self.EGAISFixNumber_nsprefix_ = None
        if isinstance(EGAISFixDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(EGAISFixDate, '%Y-%m-%d').date()
        else:
            initvalue_ = EGAISFixDate
        self.EGAISFixDate = initvalue_
        self.EGAISFixDate_nsprefix_ = None
        self.WBNUMBER = WBNUMBER
        self.validate_NoEmptyString50(self.WBNUMBER)
        self.WBNUMBER_nsprefix_ = None
        if isinstance(WBDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(WBDate, '%Y-%m-%d').date()
        else:
            initvalue_ = WBDate
        self.WBDate = initvalue_
        self.WBDate_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType170)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType170.subclass:
            return HeaderType170.subclass(*args_, **kwargs_)
        else:
            return HeaderType170(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_EGAISFixNumber(self):
        return self.EGAISFixNumber
    def set_EGAISFixNumber(self, EGAISFixNumber):
        self.EGAISFixNumber = EGAISFixNumber
    def get_EGAISFixDate(self):
        return self.EGAISFixDate
    def set_EGAISFixDate(self, EGAISFixDate):
        self.EGAISFixDate = EGAISFixDate
    def get_WBNUMBER(self):
        return self.WBNUMBER
    def set_WBNUMBER(self, WBNUMBER):
        self.WBNUMBER = WBNUMBER
    def get_WBDate(self):
        return self.WBDate
    def set_WBDate(self, WBDate):
        self.WBDate = WBDate
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.WBRegId is not None or
            self.EGAISFixNumber is not None or
            self.EGAISFixDate is not None or
            self.WBNUMBER is not None or
            self.WBDate is not None or
            self.Shipper is not None or
            self.Consignee is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType170', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType170')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType170':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType170')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType170', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType170'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType170', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.EGAISFixNumber is not None:
            namespaceprefix_ = self.EGAISFixNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixNumber>%s</%sEGAISFixNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISFixNumber), input_name='EGAISFixNumber')), namespaceprefix_ , eol_))
        if self.EGAISFixDate is not None:
            namespaceprefix_ = self.EGAISFixDate_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixDate>%s</%sEGAISFixDate>%s' % (namespaceprefix_ , self.gds_format_date(self.EGAISFixDate, input_name='EGAISFixDate'), namespaceprefix_ , eol_))
        if self.WBNUMBER is not None:
            namespaceprefix_ = self.WBNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.WBNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBNUMBER>%s</%sWBNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBNUMBER), input_name='WBNUMBER')), namespaceprefix_ , eol_))
        if self.WBDate is not None:
            namespaceprefix_ = self.WBDate_nsprefix_ + ':' if (UseCapturedNS_ and self.WBDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBDate>%s</%sWBDate>%s' % (namespaceprefix_ , self.gds_format_date(self.WBDate, input_name='WBDate'), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'EGAISFixNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISFixNumber')
            value_ = self.gds_validate_string(value_, node, 'EGAISFixNumber')
            self.EGAISFixNumber = value_
            self.EGAISFixNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISFixNumber)
        elif nodeName_ == 'EGAISFixDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.EGAISFixDate = dval_
            self.EGAISFixDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.EGAISFixDate)
        elif nodeName_ == 'WBNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBNUMBER')
            value_ = self.gds_validate_string(value_, node, 'WBNUMBER')
            self.WBNUMBER = value_
            self.WBNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBNUMBER)
        elif nodeName_ == 'WBDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.WBDate = dval_
            self.WBDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.WBDate)
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
# end class HeaderType170


class ContentType171(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType171)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType171.subclass:
            return ContentType171.subclass(*args_, **kwargs_)
        else:
            return ContentType171(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType171', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType171')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType171':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType171')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType171', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType171'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType171', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformF2PositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType171


class HeaderType172(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActNumber=None, ActDate=None, TypeWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActNumber = ActNumber
        self.validate_NoEmptyString50(self.ActNumber)
        self.ActNumber_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeWriteOff = TypeWriteOff
        self.validate_TypeWriteOff(self.TypeWriteOff)
        self.TypeWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType173(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType172)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType172.subclass:
            return HeaderType172.subclass(*args_, **kwargs_)
        else:
            return HeaderType172(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActNumber(self):
        return self.ActNumber
    def set_ActNumber(self, ActNumber):
        self.ActNumber = ActNumber
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeWriteOff(self):
        return self.TypeWriteOff
    def set_TypeWriteOff(self, TypeWriteOff):
        self.TypeWriteOff = TypeWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeWriteOff(self, value):
        result = True
        # Validate type TypeWriteOff, a restriction on xs:string.
        pass
        return result
    def validate_NoteType173(self, value):
        result = True
        # Validate type NoteType173, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ActNumber is not None or
            self.ActDate is not None or
            self.TypeWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType172', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType172')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType172':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType172')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType172', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType172'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType172', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActNumber is not None:
            namespaceprefix_ = self.ActNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ActNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActNumber>%s</%sActNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActNumber), input_name='ActNumber')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeWriteOff is not None:
            namespaceprefix_ = self.TypeWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeWriteOff>%s</%sTypeWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeWriteOff), input_name='TypeWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActNumber')
            value_ = self.gds_validate_string(value_, node, 'ActNumber')
            self.ActNumber = value_
            self.ActNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActNumber)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeWriteOff')
            value_ = self.gds_validate_string(value_, node, 'TypeWriteOff')
            self.TypeWriteOff = value_
            self.TypeWriteOff_nsprefix_ = child_.prefix
            # validate type TypeWriteOff
            self.validate_TypeWriteOff(self.TypeWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType173
            self.validate_NoteType173(self.Note)
# end class HeaderType172


class ContentType174(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType174)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType174.subclass:
            return ContentType174.subclass(*args_, **kwargs_)
        else:
            return ContentType174(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType174', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType174')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType174':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType174')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType174', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType174'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType174', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActWriteOffPositionType31.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType174


class HeaderType175(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransferNumber=None, TransferDate=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransferNumber = TransferNumber
        self.validate_NoEmptyString50(self.TransferNumber)
        self.TransferNumber_nsprefix_ = None
        if isinstance(TransferDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TransferDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TransferDate
        self.TransferDate = initvalue_
        self.TransferDate_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType176(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType175)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType175.subclass:
            return HeaderType175.subclass(*args_, **kwargs_)
        else:
            return HeaderType175(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransferNumber(self):
        return self.TransferNumber
    def set_TransferNumber(self, TransferNumber):
        self.TransferNumber = TransferNumber
    def get_TransferDate(self):
        return self.TransferDate
    def set_TransferDate(self, TransferDate):
        self.TransferDate = TransferDate
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType176(self, value):
        result = True
        # Validate type NoteType176, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.TransferNumber is not None or
            self.TransferDate is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType175', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType175')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType175':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType175')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType175', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType175'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType175', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransferNumber is not None:
            namespaceprefix_ = self.TransferNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransferNumber>%s</%sTransferNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransferNumber), input_name='TransferNumber')), namespaceprefix_ , eol_))
        if self.TransferDate is not None:
            namespaceprefix_ = self.TransferDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransferDate>%s</%sTransferDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TransferDate, input_name='TransferDate'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransferNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransferNumber')
            value_ = self.gds_validate_string(value_, node, 'TransferNumber')
            self.TransferNumber = value_
            self.TransferNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TransferNumber)
        elif nodeName_ == 'TransferDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TransferDate = dval_
            self.TransferDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TransferDate)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType176
            self.validate_NoteType176(self.Note)
# end class HeaderType175


class ContentType177(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType177)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType177.subclass:
            return ContentType177.subclass(*args_, **kwargs_)
        else:
            return ContentType177(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType177', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType177')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType177':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType177')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType177', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType177'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType177', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = TransferFromShopPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType177


class HeaderType178(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, TransferNumber=None, TransferDate=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.TransferNumber = TransferNumber
        self.validate_NoEmptyString50(self.TransferNumber)
        self.TransferNumber_nsprefix_ = None
        if isinstance(TransferDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(TransferDate, '%Y-%m-%d').date()
        else:
            initvalue_ = TransferDate
        self.TransferDate = initvalue_
        self.TransferDate_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType179(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType178)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType178.subclass:
            return HeaderType178.subclass(*args_, **kwargs_)
        else:
            return HeaderType178(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_TransferNumber(self):
        return self.TransferNumber
    def set_TransferNumber(self, TransferNumber):
        self.TransferNumber = TransferNumber
    def get_TransferDate(self):
        return self.TransferDate
    def set_TransferDate(self, TransferDate):
        self.TransferDate = TransferDate
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType179(self, value):
        result = True
        # Validate type NoteType179, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.TransferNumber is not None or
            self.TransferDate is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType178', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType178')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType178':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType178')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType178', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType178'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType178', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TransferNumber is not None:
            namespaceprefix_ = self.TransferNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransferNumber>%s</%sTransferNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TransferNumber), input_name='TransferNumber')), namespaceprefix_ , eol_))
        if self.TransferDate is not None:
            namespaceprefix_ = self.TransferDate_nsprefix_ + ':' if (UseCapturedNS_ and self.TransferDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTransferDate>%s</%sTransferDate>%s' % (namespaceprefix_ , self.gds_format_date(self.TransferDate, input_name='TransferDate'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'TransferNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TransferNumber')
            value_ = self.gds_validate_string(value_, node, 'TransferNumber')
            self.TransferNumber = value_
            self.TransferNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.TransferNumber)
        elif nodeName_ == 'TransferDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.TransferDate = dval_
            self.TransferDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.TransferDate)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType179
            self.validate_NoteType179(self.Note)
# end class HeaderType178


class ContentType180(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType180)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType180.subclass:
            return ContentType180.subclass(*args_, **kwargs_)
        else:
            return ContentType180(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType180', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType180')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType180':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType180')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType180', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType180'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType180', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = TransferToShopPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType180


class HeaderType181(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Identity=None, RepRegId=None, Client=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Identity = Identity
        self.validate_IdentityType(self.Identity)
        self.Identity_nsprefix_ = None
        self.RepRegId = RepRegId
        self.validate_NoEmptyString50(self.RepRegId)
        self.RepRegId_nsprefix_ = None
        self.Client = Client
        self.Client_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType181)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType181.subclass:
            return HeaderType181.subclass(*args_, **kwargs_)
        else:
            return HeaderType181(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Identity(self):
        return self.Identity
    def set_Identity(self, Identity):
        self.Identity = Identity
    def get_RepRegId(self):
        return self.RepRegId
    def set_RepRegId(self, RepRegId):
        self.RepRegId = RepRegId
    def get_Client(self):
        return self.Client
    def set_Client(self, Client):
        self.Client = Client
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Identity is not None or
            self.RepRegId is not None or
            self.Client is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType181', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType181')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType181':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType181')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType181', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType181'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType181', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Identity is not None:
            namespaceprefix_ = self.Identity_nsprefix_ + ':' if (UseCapturedNS_ and self.Identity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIdentity>%s</%sIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Identity), input_name='Identity')), namespaceprefix_ , eol_))
        if self.RepRegId is not None:
            namespaceprefix_ = self.RepRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.RepRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRepRegId>%s</%sRepRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RepRegId), input_name='RepRegId')), namespaceprefix_ , eol_))
        if self.Client is not None:
            namespaceprefix_ = self.Client_nsprefix_ + ':' if (UseCapturedNS_ and self.Client_nsprefix_) else ''
            self.Client.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Client', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Identity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Identity')
            value_ = self.gds_validate_string(value_, node, 'Identity')
            self.Identity = value_
            self.Identity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.Identity)
        elif nodeName_ == 'RepRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'RepRegId')
            value_ = self.gds_validate_string(value_, node, 'RepRegId')
            self.RepRegId = value_
            self.RepRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.RepRegId)
        elif nodeName_ == 'Client':
            obj_ = OrgInfoRusReply_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Client = obj_
            obj_.original_tagname_ = 'Client'
# end class HeaderType181


class ContentType182(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType182)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType182.subclass:
            return ContentType182.subclass(*args_, **kwargs_)
        else:
            return ContentType182(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType182', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType182')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType182':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType182')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType182', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType182'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType182', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformF1PositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType182


class ttnlistType(GeneratedsSuper):
    """Неподтвержденные накладные"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NoAnswer=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if NoAnswer is None:
            self.NoAnswer = []
        else:
            self.NoAnswer = NoAnswer
        self.NoAnswer_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ttnlistType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ttnlistType.subclass:
            return ttnlistType.subclass(*args_, **kwargs_)
        else:
            return ttnlistType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NoAnswer(self):
        return self.NoAnswer
    def set_NoAnswer(self, NoAnswer):
        self.NoAnswer = NoAnswer
    def add_NoAnswer(self, value):
        self.NoAnswer.append(value)
    def insert_NoAnswer_at(self, index, value):
        self.NoAnswer.insert(index, value)
    def replace_NoAnswer_at(self, index, value):
        self.NoAnswer[index] = value
    def hasContent_(self):
        if (
            self.NoAnswer
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ttnlistType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ttnlistType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ttnlistType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ttnlistType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ttnlistType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ttnlistType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ttnlistType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NoAnswer_ in self.NoAnswer:
            namespaceprefix_ = self.NoAnswer_nsprefix_ + ':' if (UseCapturedNS_ and self.NoAnswer_nsprefix_) else ''
            NoAnswer_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NoAnswer', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NoAnswer':
            obj_ = NoAnswerType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.NoAnswer.append(obj_)
            obj_.original_tagname_ = 'NoAnswer'
# end class ttnlistType


class ProductsType183(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShopPosition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ShopPosition is None:
            self.ShopPosition = []
        else:
            self.ShopPosition = ShopPosition
        self.ShopPosition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType183)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType183.subclass:
            return ProductsType183.subclass(*args_, **kwargs_)
        else:
            return ProductsType183(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShopPosition(self):
        return self.ShopPosition
    def set_ShopPosition(self, ShopPosition):
        self.ShopPosition = ShopPosition
    def add_ShopPosition(self, value):
        self.ShopPosition.append(value)
    def insert_ShopPosition_at(self, index, value):
        self.ShopPosition.insert(index, value)
    def replace_ShopPosition_at(self, index, value):
        self.ShopPosition[index] = value
    def hasContent_(self):
        if (
            self.ShopPosition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType183', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType183')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType183':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType183')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType183', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType183'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType183', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShopPosition_ in self.ShopPosition:
            namespaceprefix_ = self.ShopPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.ShopPosition_nsprefix_) else ''
            ShopPosition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShopPosition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShopPosition':
            obj_ = ShopPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShopPosition.append(obj_)
            obj_.original_tagname_ = 'ShopPosition'
# end class ProductsType183


class SensorType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SensorNumber=None, PlaceId=None, SensorModel=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SensorNumber = SensorNumber
        self.validate_NoEmptyString(self.SensorNumber)
        self.SensorNumber_nsprefix_ = None
        self.PlaceId = PlaceId
        self.validate_PlaceEnum(self.PlaceId)
        self.PlaceId_nsprefix_ = None
        self.SensorModel = SensorModel
        self.validate_NoEmptyString(self.SensorModel)
        self.SensorModel_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SensorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SensorType.subclass:
            return SensorType.subclass(*args_, **kwargs_)
        else:
            return SensorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SensorNumber(self):
        return self.SensorNumber
    def set_SensorNumber(self, SensorNumber):
        self.SensorNumber = SensorNumber
    def get_PlaceId(self):
        return self.PlaceId
    def set_PlaceId(self, PlaceId):
        self.PlaceId = PlaceId
    def get_SensorModel(self):
        return self.SensorModel
    def set_SensorModel(self, SensorModel):
        self.SensorModel = SensorModel
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def validate_PlaceEnum(self, value):
        result = True
        # Validate type PlaceEnum, a restriction on c:FSRARIDType.
        pass
        return result
    def hasContent_(self):
        if (
            self.SensorNumber is not None or
            self.PlaceId is not None or
            self.SensorModel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='SensorType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SensorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SensorType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SensorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SensorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SensorType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='SensorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SensorNumber is not None:
            namespaceprefix_ = self.SensorNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SensorNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSensorNumber>%s</%sSensorNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SensorNumber), input_name='SensorNumber')), namespaceprefix_ , eol_))
        if self.PlaceId is not None:
            namespaceprefix_ = self.PlaceId_nsprefix_ + ':' if (UseCapturedNS_ and self.PlaceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlaceId>%s</%sPlaceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlaceId), input_name='PlaceId')), namespaceprefix_ , eol_))
        if self.SensorModel is not None:
            namespaceprefix_ = self.SensorModel_nsprefix_ + ':' if (UseCapturedNS_ and self.SensorModel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSensorModel>%s</%sSensorModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SensorModel), input_name='SensorModel')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SensorNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SensorNumber')
            value_ = self.gds_validate_string(value_, node, 'SensorNumber')
            self.SensorNumber = value_
            self.SensorNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.SensorNumber)
        elif nodeName_ == 'PlaceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlaceId')
            value_ = self.gds_validate_string(value_, node, 'PlaceId')
            self.PlaceId = value_
            self.PlaceId_nsprefix_ = child_.prefix
            # validate type PlaceEnum
            self.validate_PlaceEnum(self.PlaceId)
        elif nodeName_ == 'SensorModel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SensorModel')
            value_ = self.gds_validate_string(value_, node, 'SensorModel')
            self.SensorModel = value_
            self.SensorModel_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.SensorModel)
# end class SensorType


class DataType184(GeneratedsSuper):
    """Перечень сведений от заданного средства измерений"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataType184)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataType184.subclass:
            return DataType184.subclass(*args_, **kwargs_)
        else:
            return DataType184(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation" ', name_='DataType184', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataType184')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataType184':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataType184')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataType184', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataType184'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:as="http://fsrar.ru/WEGAIS/AscpNavigation" ', name_='DataType184', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = DataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class DataType184


class SensorType185(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, SensorNumber=None, PlaceId=None, SensorModel=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.SensorNumber = SensorNumber
        self.validate_NoEmptyString(self.SensorNumber)
        self.SensorNumber_nsprefix_ = None
        self.PlaceId = PlaceId
        self.validate_PlaceEnum(self.PlaceId)
        self.PlaceId_nsprefix_ = None
        self.SensorModel = SensorModel
        self.validate_NoEmptyString(self.SensorModel)
        self.SensorModel_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SensorType185)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SensorType185.subclass:
            return SensorType185.subclass(*args_, **kwargs_)
        else:
            return SensorType185(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_SensorNumber(self):
        return self.SensorNumber
    def set_SensorNumber(self, SensorNumber):
        self.SensorNumber = SensorNumber
    def get_PlaceId(self):
        return self.PlaceId
    def set_PlaceId(self, PlaceId):
        self.PlaceId = PlaceId
    def get_SensorModel(self):
        return self.SensorModel
    def set_SensorModel(self, SensorModel):
        self.SensorModel = SensorModel
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def validate_PlaceEnum(self, value):
        result = True
        # Validate type PlaceEnum, a restriction on c:FSRARIDType.
        pass
        return result
    def hasContent_(self):
        if (
            self.SensorNumber is not None or
            self.PlaceId is not None or
            self.SensorModel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ass="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='SensorType185', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SensorType185')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SensorType185':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SensorType185')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SensorType185', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SensorType185'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ass="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='SensorType185', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SensorNumber is not None:
            namespaceprefix_ = self.SensorNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.SensorNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSensorNumber>%s</%sSensorNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SensorNumber), input_name='SensorNumber')), namespaceprefix_ , eol_))
        if self.PlaceId is not None:
            namespaceprefix_ = self.PlaceId_nsprefix_ + ':' if (UseCapturedNS_ and self.PlaceId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPlaceId>%s</%sPlaceId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PlaceId), input_name='PlaceId')), namespaceprefix_ , eol_))
        if self.SensorModel is not None:
            namespaceprefix_ = self.SensorModel_nsprefix_ + ':' if (UseCapturedNS_ and self.SensorModel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSensorModel>%s</%sSensorModel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SensorModel), input_name='SensorModel')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'SensorNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SensorNumber')
            value_ = self.gds_validate_string(value_, node, 'SensorNumber')
            self.SensorNumber = value_
            self.SensorNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.SensorNumber)
        elif nodeName_ == 'PlaceId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PlaceId')
            value_ = self.gds_validate_string(value_, node, 'PlaceId')
            self.PlaceId = value_
            self.PlaceId_nsprefix_ = child_.prefix
            # validate type PlaceEnum
            self.validate_PlaceEnum(self.PlaceId)
        elif nodeName_ == 'SensorModel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SensorModel')
            value_ = self.gds_validate_string(value_, node, 'SensorModel')
            self.SensorModel = value_
            self.SensorModel_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.SensorModel)
# end class SensorType185


class DataType186(GeneratedsSuper):
    """Перечень сведений от заданного средства измерений"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataType186)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataType186.subclass:
            return DataType186.subclass(*args_, **kwargs_)
        else:
            return DataType186(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DataType186', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataType186')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataType186':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataType186')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataType186', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataType186'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DataType186', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = DataType32.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class DataType186


class HeaderType187(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, ActDate=None, TypeChargeOn=None, ActWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeChargeOn = TypeChargeOn
        self.validate_TypeChargeOn(self.TypeChargeOn)
        self.TypeChargeOn_nsprefix_ = None
        self.ActWriteOff = ActWriteOff
        self.validate_NoEmptyString50(self.ActWriteOff)
        self.ActWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType188(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType187)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType187.subclass:
            return HeaderType187.subclass(*args_, **kwargs_)
        else:
            return HeaderType187(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeChargeOn(self):
        return self.TypeChargeOn
    def set_TypeChargeOn(self, TypeChargeOn):
        self.TypeChargeOn = TypeChargeOn
    def get_ActWriteOff(self):
        return self.ActWriteOff
    def set_ActWriteOff(self, ActWriteOff):
        self.ActWriteOff = ActWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeChargeOn(self, value):
        result = True
        # Validate type TypeChargeOn, a restriction on xs:string.
        pass
        return result
    def validate_NoteType188(self, value):
        result = True
        # Validate type NoteType188, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.ActDate is not None or
            self.TypeChargeOn is not None or
            self.ActWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType187', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType187')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType187':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType187')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType187', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType187'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType187', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeChargeOn is not None:
            namespaceprefix_ = self.TypeChargeOn_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeChargeOn_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeChargeOn>%s</%sTypeChargeOn>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeChargeOn), input_name='TypeChargeOn')), namespaceprefix_ , eol_))
        if self.ActWriteOff is not None:
            namespaceprefix_ = self.ActWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.ActWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActWriteOff>%s</%sActWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActWriteOff), input_name='ActWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeChargeOn':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeChargeOn')
            value_ = self.gds_validate_string(value_, node, 'TypeChargeOn')
            self.TypeChargeOn = value_
            self.TypeChargeOn_nsprefix_ = child_.prefix
            # validate type TypeChargeOn
            self.validate_TypeChargeOn(self.TypeChargeOn)
        elif nodeName_ == 'ActWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActWriteOff')
            value_ = self.gds_validate_string(value_, node, 'ActWriteOff')
            self.ActWriteOff = value_
            self.ActWriteOff_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType188
            self.validate_NoteType188(self.Note)
# end class HeaderType187


class ContentType189(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType189)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType189.subclass:
            return ContentType189.subclass(*args_, **kwargs_)
        else:
            return ContentType189(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType189', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType189')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType189':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType189')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType189', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType189'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType189', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActChargeOnShopPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType189


class HeaderType190(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActNumber=None, ActDate=None, TypeWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActNumber = ActNumber
        self.validate_NoEmptyString50(self.ActNumber)
        self.ActNumber_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeWriteOff = TypeWriteOff
        self.validate_TypeWriteOff(self.TypeWriteOff)
        self.TypeWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType191(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType190)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType190.subclass:
            return HeaderType190.subclass(*args_, **kwargs_)
        else:
            return HeaderType190(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActNumber(self):
        return self.ActNumber
    def set_ActNumber(self, ActNumber):
        self.ActNumber = ActNumber
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeWriteOff(self):
        return self.TypeWriteOff
    def set_TypeWriteOff(self, TypeWriteOff):
        self.TypeWriteOff = TypeWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeWriteOff(self, value):
        result = True
        # Validate type TypeWriteOff, a restriction on xs:string.
        pass
        return result
    def validate_NoteType191(self, value):
        result = True
        # Validate type NoteType191, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ActNumber is not None or
            self.ActDate is not None or
            self.TypeWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType190', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType190')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType190':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType190')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType190', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType190'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType190', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActNumber is not None:
            namespaceprefix_ = self.ActNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ActNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActNumber>%s</%sActNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActNumber), input_name='ActNumber')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeWriteOff is not None:
            namespaceprefix_ = self.TypeWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeWriteOff>%s</%sTypeWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeWriteOff), input_name='TypeWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActNumber')
            value_ = self.gds_validate_string(value_, node, 'ActNumber')
            self.ActNumber = value_
            self.ActNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActNumber)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeWriteOff')
            value_ = self.gds_validate_string(value_, node, 'TypeWriteOff')
            self.TypeWriteOff = value_
            self.TypeWriteOff_nsprefix_ = child_.prefix
            # validate type TypeWriteOff
            self.validate_TypeWriteOff(self.TypeWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType191
            self.validate_NoteType191(self.Note)
# end class HeaderType190


class ContentType192(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType192)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType192.subclass:
            return ContentType192.subclass(*args_, **kwargs_)
        else:
            return ContentType192(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType192', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType192')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType192':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType192')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType192', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType192'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType192', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActWriteOffShopPositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType192


class MarksType(GeneratedsSuper):
    """Список марок запроса"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Mark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Mark is None:
            self.Mark = []
        else:
            self.Mark = Mark
        self.Mark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksType.subclass:
            return MarksType.subclass(*args_, **kwargs_)
        else:
            return MarksType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Mark(self):
        return self.Mark
    def set_Mark(self, Mark):
        self.Mark = Mark
    def add_Mark(self, value):
        self.Mark.append(value)
    def insert_Mark_at(self, index, value):
        self.Mark.insert(index, value)
    def replace_Mark_at(self, index, value):
        self.Mark[index] = value
    def hasContent_(self):
        if (
            self.Mark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarksType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarksType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarksType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarksType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarksType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarksType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarksType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Mark_ in self.Mark:
            namespaceprefix_ = self.Mark_nsprefix_ + ':' if (UseCapturedNS_ and self.Mark_nsprefix_) else ''
            Mark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Mark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Mark':
            obj_ = MarkType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Mark.append(obj_)
            obj_.original_tagname_ = 'Mark'
# end class MarksType


class MarksType193(GeneratedsSuper):
    """Список ответов по запросу"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Mark=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Mark is None:
            self.Mark = []
        else:
            self.Mark = Mark
        self.Mark_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MarksType193)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MarksType193.subclass:
            return MarksType193.subclass(*args_, **kwargs_)
        else:
            return MarksType193(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Mark(self):
        return self.Mark
    def set_Mark(self, Mark):
        self.Mark = Mark
    def add_Mark(self, value):
        self.Mark.append(value)
    def insert_Mark_at(self, index, value):
        self.Mark.insert(index, value)
    def replace_Mark_at(self, index, value):
        self.Mark[index] = value
    def hasContent_(self):
        if (
            self.Mark
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarksType193', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MarksType193')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'MarksType193':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='MarksType193')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='MarksType193', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='MarksType193'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='MarksType193', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Mark_ in self.Mark:
            namespaceprefix_ = self.Mark_nsprefix_ + ':' if (UseCapturedNS_ and self.Mark_nsprefix_) else ''
            Mark_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Mark', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Mark':
            obj_ = BarcodeType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Mark.append(obj_)
            obj_.original_tagname_ = 'Mark'
# end class MarksType193


class HeaderType194(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsConfirm=None, ConfirmNumber=None, ConfirmDate=None, WBRegId=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsConfirm = IsConfirm
        self.validate_ConclusionType34(self.IsConfirm)
        self.IsConfirm_nsprefix_ = None
        self.ConfirmNumber = ConfirmNumber
        self.validate_NoEmptyString50(self.ConfirmNumber)
        self.ConfirmNumber_nsprefix_ = None
        if isinstance(ConfirmDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ConfirmDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ConfirmDate
        self.ConfirmDate = initvalue_
        self.ConfirmDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType195(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType194)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType194.subclass:
            return HeaderType194.subclass(*args_, **kwargs_)
        else:
            return HeaderType194(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsConfirm(self):
        return self.IsConfirm
    def set_IsConfirm(self, IsConfirm):
        self.IsConfirm = IsConfirm
    def get_ConfirmNumber(self):
        return self.ConfirmNumber
    def set_ConfirmNumber(self, ConfirmNumber):
        self.ConfirmNumber = ConfirmNumber
    def get_ConfirmDate(self):
        return self.ConfirmDate
    def set_ConfirmDate(self, ConfirmDate):
        self.ConfirmDate = ConfirmDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_ConclusionType34(self, value):
        result = True
        # Validate type ConclusionType34, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType195(self, value):
        result = True
        # Validate type NoteType195, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IsConfirm is not None or
            self.ConfirmNumber is not None or
            self.ConfirmDate is not None or
            self.WBRegId is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType194', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType194')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType194':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType194')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType194', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType194'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType194', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsConfirm is not None:
            namespaceprefix_ = self.IsConfirm_nsprefix_ + ':' if (UseCapturedNS_ and self.IsConfirm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsConfirm>%s</%sIsConfirm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsConfirm), input_name='IsConfirm')), namespaceprefix_ , eol_))
        if self.ConfirmNumber is not None:
            namespaceprefix_ = self.ConfirmNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmNumber>%s</%sConfirmNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ConfirmNumber), input_name='ConfirmNumber')), namespaceprefix_ , eol_))
        if self.ConfirmDate is not None:
            namespaceprefix_ = self.ConfirmDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ConfirmDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConfirmDate>%s</%sConfirmDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ConfirmDate, input_name='ConfirmDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsConfirm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IsConfirm')
            value_ = self.gds_validate_string(value_, node, 'IsConfirm')
            self.IsConfirm = value_
            self.IsConfirm_nsprefix_ = child_.prefix
            # validate type ConclusionType34
            self.validate_ConclusionType34(self.IsConfirm)
        elif nodeName_ == 'ConfirmNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ConfirmNumber')
            value_ = self.gds_validate_string(value_, node, 'ConfirmNumber')
            self.ConfirmNumber = value_
            self.ConfirmNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ConfirmNumber)
        elif nodeName_ == 'ConfirmDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ConfirmDate = dval_
            self.ConfirmDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ConfirmDate)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType195
            self.validate_NoteType195(self.Note)
# end class HeaderType194


class ProductsType196(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, StockPosition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if StockPosition is None:
            self.StockPosition = []
        else:
            self.StockPosition = StockPosition
        self.StockPosition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType196)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType196.subclass:
            return ProductsType196.subclass(*args_, **kwargs_)
        else:
            return ProductsType196(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_StockPosition(self):
        return self.StockPosition
    def set_StockPosition(self, StockPosition):
        self.StockPosition = StockPosition
    def add_StockPosition(self, value):
        self.StockPosition.append(value)
    def insert_StockPosition_at(self, index, value):
        self.StockPosition.insert(index, value)
    def replace_StockPosition_at(self, index, value):
        self.StockPosition[index] = value
    def hasContent_(self):
        if (
            self.StockPosition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType196', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType196')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType196':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType196')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType196', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType196'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType196', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StockPosition_ in self.StockPosition:
            namespaceprefix_ = self.StockPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.StockPosition_nsprefix_) else ''
            StockPosition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='StockPosition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'StockPosition':
            obj_ = StockPositionType35.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.StockPosition.append(obj_)
            obj_.original_tagname_ = 'StockPosition'
# end class ProductsType196


class ProductsType197(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ShopPosition=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if ShopPosition is None:
            self.ShopPosition = []
        else:
            self.ShopPosition = ShopPosition
        self.ShopPosition_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProductsType197)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProductsType197.subclass:
            return ProductsType197.subclass(*args_, **kwargs_)
        else:
            return ProductsType197(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ShopPosition(self):
        return self.ShopPosition
    def set_ShopPosition(self, ShopPosition):
        self.ShopPosition = ShopPosition
    def add_ShopPosition(self, value):
        self.ShopPosition.append(value)
    def insert_ShopPosition_at(self, index, value):
        self.ShopPosition.insert(index, value)
    def replace_ShopPosition_at(self, index, value):
        self.ShopPosition[index] = value
    def hasContent_(self):
        if (
            self.ShopPosition
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType197', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ProductsType197')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ProductsType197':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ProductsType197')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ProductsType197', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ProductsType197'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ProductsType197', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ShopPosition_ in self.ShopPosition:
            namespaceprefix_ = self.ShopPosition_nsprefix_ + ':' if (UseCapturedNS_ and self.ShopPosition_nsprefix_) else ''
            ShopPosition_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ShopPosition', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ShopPosition':
            obj_ = ShopPositionType36.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.ShopPosition.append(obj_)
            obj_.original_tagname_ = 'ShopPosition'
# end class ProductsType197


class HistoryType(GeneratedsSuper):
    """История двидения по справке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, DocData=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if DocData is None:
            self.DocData = []
        else:
            self.DocData = DocData
        self.DocData_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistoryType.subclass:
            return HistoryType.subclass(*args_, **kwargs_)
        else:
            return HistoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_DocData(self):
        return self.DocData
    def set_DocData(self, DocData):
        self.DocData = DocData
    def add_DocData(self, value):
        self.DocData.append(value)
    def insert_DocData_at(self, index, value):
        self.DocData.insert(index, value)
    def replace_DocData_at(self, index, value):
        self.DocData[index] = value
    def hasContent_(self):
        if (
            self.DocData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HistoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HistoryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HistoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HistoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HistoryType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for DocData_ in self.DocData:
            namespaceprefix_ = self.DocData_nsprefix_ + ':' if (UseCapturedNS_ and self.DocData_nsprefix_) else ''
            DocData_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='DocData', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'DocData':
            obj_ = DocDataType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.DocData.append(obj_)
            obj_.original_tagname_ = 'DocData'
# end class HistoryType


class SensorType206(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IMEI=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IMEI = IMEI
        self.validate_NoEmptyString(self.IMEI)
        self.IMEI_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SensorType206)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SensorType206.subclass:
            return SensorType206.subclass(*args_, **kwargs_)
        else:
            return SensorType206(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IMEI(self):
        return self.IMEI
    def set_IMEI(self, IMEI):
        self.IMEI = IMEI
    def validate_NoEmptyString(self, value):
        result = True
        # Validate type NoEmptyString, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IMEI is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='SensorType206', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SensorType206')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'SensorType206':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SensorType206')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='SensorType206', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='SensorType206'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='SensorType206', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IMEI is not None:
            namespaceprefix_ = self.IMEI_nsprefix_ + ':' if (UseCapturedNS_ and self.IMEI_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIMEI>%s</%sIMEI>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IMEI), input_name='IMEI')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IMEI':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IMEI')
            value_ = self.gds_validate_string(value_, node, 'IMEI')
            self.IMEI = value_
            self.IMEI_nsprefix_ = child_.prefix
            # validate type NoEmptyString
            self.validate_NoEmptyString(self.IMEI)
# end class SensorType206


class DataLevelGaugeType(GeneratedsSuper):
    """Перечень сведений от уровнемеров"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, LevelGauge=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if LevelGauge is None:
            self.LevelGauge = []
        else:
            self.LevelGauge = LevelGauge
        self.LevelGauge_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DataLevelGaugeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DataLevelGaugeType.subclass:
            return DataLevelGaugeType.subclass(*args_, **kwargs_)
        else:
            return DataLevelGaugeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_LevelGauge(self):
        return self.LevelGauge
    def set_LevelGauge(self, LevelGauge):
        self.LevelGauge = LevelGauge
    def add_LevelGauge(self, value):
        self.LevelGauge.append(value)
    def insert_LevelGauge_at(self, index, value):
        self.LevelGauge.insert(index, value)
    def replace_LevelGauge_at(self, index, value):
        self.LevelGauge[index] = value
    def hasContent_(self):
        if (
            self.LevelGauge
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DataLevelGaugeType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DataLevelGaugeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'DataLevelGaugeType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DataLevelGaugeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='DataLevelGaugeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='DataLevelGaugeType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='DataLevelGaugeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for LevelGauge_ in self.LevelGauge:
            namespaceprefix_ = self.LevelGauge_nsprefix_ + ':' if (UseCapturedNS_ and self.LevelGauge_nsprefix_) else ''
            LevelGauge_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LevelGauge', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'LevelGauge':
            obj_ = DataType37.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.LevelGauge.append(obj_)
            obj_.original_tagname_ = 'LevelGauge'
# end class DataLevelGaugeType


class HeaderType207(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type='WBInvoiceFromMe', NUMBER=None, Date=None, ShippingDate=None, Transport=None, Shipper=None, Consignee=None, Base=None, Note=None, VarField1=None, VarField2=None, VarField3=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_WbType40(self.Type)
        self.Type_nsprefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ShippingDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShippingDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShippingDate
        self.ShippingDate = initvalue_
        self.ShippingDate_nsprefix_ = None
        self.Transport = Transport
        self.Transport_nsprefix_ = None
        self.Shipper = Shipper
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.Consignee_nsprefix_ = None
        self.Base = Base
        self.validate_BaseType208(self.Base)
        self.Base_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType209(self.Note)
        self.Note_nsprefix_ = None
        self.VarField1 = VarField1
        self.validate_VarField1Type210(self.VarField1)
        self.VarField1_nsprefix_ = None
        self.VarField2 = VarField2
        self.validate_VarField2Type211(self.VarField2)
        self.VarField2_nsprefix_ = None
        self.VarField3 = VarField3
        self.validate_VarField3Type212(self.VarField3)
        self.VarField3_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType207)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType207.subclass:
            return HeaderType207.subclass(*args_, **kwargs_)
        else:
            return HeaderType207(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ShippingDate(self):
        return self.ShippingDate
    def set_ShippingDate(self, ShippingDate):
        self.ShippingDate = ShippingDate
    def get_Transport(self):
        return self.Transport
    def set_Transport(self, Transport):
        self.Transport = Transport
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_Base(self):
        return self.Base
    def set_Base(self, Base):
        self.Base = Base
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def get_VarField1(self):
        return self.VarField1
    def set_VarField1(self, VarField1):
        self.VarField1 = VarField1
    def get_VarField2(self):
        return self.VarField2
    def set_VarField2(self, VarField2):
        self.VarField2 = VarField2
    def get_VarField3(self):
        return self.VarField3
    def set_VarField3(self, VarField3):
        self.VarField3 = VarField3
    def validate_WbType40(self, value):
        result = True
        # Validate type WbType40, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_BaseType208(self, value):
        result = True
        # Validate type BaseType208, a restriction on xs:string.
        pass
        return result
    def validate_NoteType209(self, value):
        result = True
        # Validate type NoteType209, a restriction on xs:string.
        pass
        return result
    def validate_VarField1Type210(self, value):
        result = True
        # Validate type VarField1Type210, a restriction on xs:string.
        pass
        return result
    def validate_VarField2Type211(self, value):
        result = True
        # Validate type VarField2Type211, a restriction on xs:string.
        pass
        return result
    def validate_VarField3Type212(self, value):
        result = True
        # Validate type VarField3Type212, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type != "WBInvoiceFromMe" or
            self.NUMBER is not None or
            self.Date is not None or
            self.ShippingDate is not None or
            self.Transport is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.Base is not None or
            self.Note is not None or
            self.VarField1 is not None or
            self.VarField2 is not None or
            self.VarField3 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType207', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType207')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType207':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType207')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType207', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType207'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType207', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ShippingDate is not None:
            namespaceprefix_ = self.ShippingDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShippingDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShippingDate>%s</%sShippingDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShippingDate, input_name='ShippingDate'), namespaceprefix_ , eol_))
        if self.Transport is not None:
            namespaceprefix_ = self.Transport_nsprefix_ + ':' if (UseCapturedNS_ and self.Transport_nsprefix_) else ''
            self.Transport.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Transport', pretty_print=pretty_print)
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            self.Shipper.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Shipper', pretty_print=pretty_print)
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            self.Consignee.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Consignee', pretty_print=pretty_print)
        if self.Base is not None:
            namespaceprefix_ = self.Base_nsprefix_ + ':' if (UseCapturedNS_ and self.Base_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBase>%s</%sBase>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Base), input_name='Base')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
        if self.VarField1 is not None:
            namespaceprefix_ = self.VarField1_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField1>%s</%sVarField1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField1), input_name='VarField1')), namespaceprefix_ , eol_))
        if self.VarField2 is not None:
            namespaceprefix_ = self.VarField2_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField2>%s</%sVarField2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField2), input_name='VarField2')), namespaceprefix_ , eol_))
        if self.VarField3 is not None:
            namespaceprefix_ = self.VarField3_nsprefix_ + ':' if (UseCapturedNS_ and self.VarField3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVarField3>%s</%sVarField3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.VarField3), input_name='VarField3')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type WbType40
            self.validate_WbType40(self.Type)
        elif nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ShippingDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShippingDate = dval_
            self.ShippingDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShippingDate)
        elif nodeName_ == 'Transport':
            obj_ = TransportType39.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Transport = obj_
            obj_.original_tagname_ = 'Transport'
        elif nodeName_ == 'Shipper':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Shipper = obj_
            obj_.original_tagname_ = 'Shipper'
        elif nodeName_ == 'Consignee':
            obj_ = OrgInfo_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Consignee = obj_
            obj_.original_tagname_ = 'Consignee'
        elif nodeName_ == 'Base':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Base')
            value_ = self.gds_validate_string(value_, node, 'Base')
            self.Base = value_
            self.Base_nsprefix_ = child_.prefix
            # validate type BaseType208
            self.validate_BaseType208(self.Base)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType209
            self.validate_NoteType209(self.Note)
        elif nodeName_ == 'VarField1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField1')
            value_ = self.gds_validate_string(value_, node, 'VarField1')
            self.VarField1 = value_
            self.VarField1_nsprefix_ = child_.prefix
            # validate type VarField1Type210
            self.validate_VarField1Type210(self.VarField1)
        elif nodeName_ == 'VarField2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField2')
            value_ = self.gds_validate_string(value_, node, 'VarField2')
            self.VarField2 = value_
            self.VarField2_nsprefix_ = child_.prefix
            # validate type VarField2Type211
            self.validate_VarField2Type211(self.VarField2)
        elif nodeName_ == 'VarField3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'VarField3')
            value_ = self.gds_validate_string(value_, node, 'VarField3')
            self.VarField3 = value_
            self.VarField3_nsprefix_ = child_.prefix
            # validate type VarField3Type212
            self.validate_VarField3Type212(self.VarField3)
# end class HeaderType207


class ContentType213(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType213)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType213.subclass:
            return ContentType213.subclass(*args_, **kwargs_)
        else:
            return ContentType213(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType213', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType213')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType213':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType213')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType213', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType213'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType213', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType38.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType213


class boxInfoType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, boxtree=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if boxtree is None:
            self.boxtree = []
        else:
            self.boxtree = boxtree
        self.boxtree_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, boxInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if boxInfoType.subclass:
            return boxInfoType.subclass(*args_, **kwargs_)
        else:
            return boxInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_boxtree(self):
        return self.boxtree
    def set_boxtree(self, boxtree):
        self.boxtree = boxtree
    def add_boxtree(self, value):
        self.boxtree.append(value)
    def insert_boxtree_at(self, index, value):
        self.boxtree.insert(index, value)
    def replace_boxtree_at(self, index, value):
        self.boxtree[index] = value
    def hasContent_(self):
        if (
            self.boxtree
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='boxInfoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('boxInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'boxInfoType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='boxInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='boxInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='boxInfoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='boxInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for boxtree_ in self.boxtree:
            namespaceprefix_ = self.boxtree_nsprefix_ + ':' if (UseCapturedNS_ and self.boxtree_nsprefix_) else ''
            boxtree_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='boxtree', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'boxtree':
            obj_ = boxtype.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.boxtree.append(obj_)
            obj_.original_tagname_ = 'boxtree'
# end class boxInfoType


class HeaderType224(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ActNumber=None, ActDate=None, TypeWriteOff=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ActNumber = ActNumber
        self.validate_NoEmptyString50(self.ActNumber)
        self.ActNumber_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.TypeWriteOff = TypeWriteOff
        self.validate_TypeWriteOff(self.TypeWriteOff)
        self.TypeWriteOff_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType225(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType224)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType224.subclass:
            return HeaderType224.subclass(*args_, **kwargs_)
        else:
            return HeaderType224(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ActNumber(self):
        return self.ActNumber
    def set_ActNumber(self, ActNumber):
        self.ActNumber = ActNumber
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_TypeWriteOff(self):
        return self.TypeWriteOff
    def set_TypeWriteOff(self, TypeWriteOff):
        self.TypeWriteOff = TypeWriteOff
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_TypeWriteOff(self, value):
        result = True
        # Validate type TypeWriteOff, a restriction on xs:string.
        pass
        return result
    def validate_NoteType225(self, value):
        result = True
        # Validate type NoteType225, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.ActNumber is not None or
            self.ActDate is not None or
            self.TypeWriteOff is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType224', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType224')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType224':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType224')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType224', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType224'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:ce="http://fsrar.ru/WEGAIS/CommonEnum" ', name_='HeaderType224', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ActNumber is not None:
            namespaceprefix_ = self.ActNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ActNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActNumber>%s</%sActNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ActNumber), input_name='ActNumber')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.TypeWriteOff is not None:
            namespaceprefix_ = self.TypeWriteOff_nsprefix_ + ':' if (UseCapturedNS_ and self.TypeWriteOff_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTypeWriteOff>%s</%sTypeWriteOff>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.TypeWriteOff), input_name='TypeWriteOff')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ActNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ActNumber')
            value_ = self.gds_validate_string(value_, node, 'ActNumber')
            self.ActNumber = value_
            self.ActNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ActNumber)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'TypeWriteOff':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'TypeWriteOff')
            value_ = self.gds_validate_string(value_, node, 'TypeWriteOff')
            self.TypeWriteOff = value_
            self.TypeWriteOff_nsprefix_ = child_.prefix
            # validate type TypeWriteOff
            self.validate_TypeWriteOff(self.TypeWriteOff)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType225
            self.validate_NoteType225(self.Note)
# end class HeaderType224


class ContentType226(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType226)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType226.subclass:
            return ContentType226.subclass(*args_, **kwargs_)
        else:
            return ContentType226(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType226', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType226')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType226':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType226')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType226', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType226'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType226', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActWriteOffPositionType42.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType226


class HeaderType227(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, IsAccept=None, ACTNUMBER=None, ActDate=None, WBRegId=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.IsAccept = IsAccept
        self.validate_AcceptType45(self.IsAccept)
        self.IsAccept_nsprefix_ = None
        self.ACTNUMBER = ACTNUMBER
        self.validate_NoEmptyString50(self.ACTNUMBER)
        self.ACTNUMBER_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType228(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType227)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType227.subclass:
            return HeaderType227.subclass(*args_, **kwargs_)
        else:
            return HeaderType227(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_IsAccept(self):
        return self.IsAccept
    def set_IsAccept(self, IsAccept):
        self.IsAccept = IsAccept
    def get_ACTNUMBER(self):
        return self.ACTNUMBER
    def set_ACTNUMBER(self, ACTNUMBER):
        self.ACTNUMBER = ACTNUMBER
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_AcceptType45(self, value):
        result = True
        # Validate type AcceptType45, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType228(self, value):
        result = True
        # Validate type NoteType228, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.IsAccept is not None or
            self.ACTNUMBER is not None or
            self.ActDate is not None or
            self.WBRegId is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType227', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType227')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType227':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType227')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType227', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType227'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType227', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsAccept is not None:
            namespaceprefix_ = self.IsAccept_nsprefix_ + ':' if (UseCapturedNS_ and self.IsAccept_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsAccept>%s</%sIsAccept>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.IsAccept), input_name='IsAccept')), namespaceprefix_ , eol_))
        if self.ACTNUMBER is not None:
            namespaceprefix_ = self.ACTNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.ACTNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACTNUMBER>%s</%sACTNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ACTNUMBER), input_name='ACTNUMBER')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'IsAccept':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'IsAccept')
            value_ = self.gds_validate_string(value_, node, 'IsAccept')
            self.IsAccept = value_
            self.IsAccept_nsprefix_ = child_.prefix
            # validate type AcceptType45
            self.validate_AcceptType45(self.IsAccept)
        elif nodeName_ == 'ACTNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ACTNUMBER')
            value_ = self.gds_validate_string(value_, node, 'ACTNUMBER')
            self.ACTNUMBER = value_
            self.ACTNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ACTNUMBER)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType228
            self.validate_NoteType228(self.Note)
# end class HeaderType227


class ContentType229(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType229)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType229.subclass:
            return ContentType229.subclass(*args_, **kwargs_)
        else:
            return ContentType229(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType229', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType229')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType229':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType229')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType229', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType229'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType229', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType44.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType229


class HeaderType230(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Type='OperProduction', NUMBER=None, Date=None, ProducedDate=None, Producer=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Type = Type
        self.validate_OperType48(self.Type)
        self.Type_nsprefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ProducedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ProducedDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ProducedDate
        self.ProducedDate = initvalue_
        self.ProducedDate_nsprefix_ = None
        self.Producer = Producer
        self.Producer_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType231(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType230)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType230.subclass:
            return HeaderType230.subclass(*args_, **kwargs_)
        else:
            return HeaderType230(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Type(self):
        return self.Type
    def set_Type(self, Type):
        self.Type = Type
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ProducedDate(self):
        return self.ProducedDate
    def set_ProducedDate(self, ProducedDate):
        self.ProducedDate = ProducedDate
    def get_Producer(self):
        return self.Producer
    def set_Producer(self, Producer):
        self.Producer = Producer
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_OperType48(self, value):
        result = True
        # Validate type OperType48, a restriction on xs:string.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType231(self, value):
        result = True
        # Validate type NoteType231, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Type != "OperProduction" or
            self.NUMBER is not None or
            self.Date is not None or
            self.ProducedDate is not None or
            self.Producer is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType230', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType230')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType230':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType230')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType230', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType230'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType230', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Type is not None:
            namespaceprefix_ = self.Type_nsprefix_ + ':' if (UseCapturedNS_ and self.Type_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sType>%s</%sType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), namespaceprefix_ , eol_))
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ProducedDate is not None:
            namespaceprefix_ = self.ProducedDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ProducedDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProducedDate>%s</%sProducedDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ProducedDate, input_name='ProducedDate'), namespaceprefix_ , eol_))
        if self.Producer is not None:
            namespaceprefix_ = self.Producer_nsprefix_ + ':' if (UseCapturedNS_ and self.Producer_nsprefix_) else ''
            self.Producer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Producer', pretty_print=pretty_print)
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Type')
            value_ = self.gds_validate_string(value_, node, 'Type')
            self.Type = value_
            self.Type_nsprefix_ = child_.prefix
            # validate type OperType48
            self.validate_OperType48(self.Type)
        elif nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ProducedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ProducedDate = dval_
            self.ProducedDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ProducedDate)
        elif nodeName_ == 'Producer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Producer = obj_
            obj_.original_tagname_ = 'Producer'
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType231
            self.validate_NoteType231(self.Note)
# end class HeaderType230


class ContentType232(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType232)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType232.subclass:
            return ContentType232.subclass(*args_, **kwargs_)
        else:
            return ContentType232(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType232', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType232')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType232':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType232')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType232', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType232'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType232', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType46.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType232


class ContentResourceType233(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Resource=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Resource is None:
            self.Resource = []
        else:
            self.Resource = Resource
        self.Resource_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentResourceType233)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentResourceType233.subclass:
            return ContentResourceType233.subclass(*args_, **kwargs_)
        else:
            return ContentResourceType233(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Resource(self):
        return self.Resource
    def set_Resource(self, Resource):
        self.Resource = Resource
    def add_Resource(self, value):
        self.Resource.append(value)
    def insert_Resource_at(self, index, value):
        self.Resource.insert(index, value)
    def replace_Resource_at(self, index, value):
        self.Resource[index] = value
    def hasContent_(self):
        if (
            self.Resource
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentResourceType233', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentResourceType233')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentResourceType233':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentResourceType233')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentResourceType233', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentResourceType233'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentResourceType233', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Resource_ in self.Resource:
            namespaceprefix_ = self.Resource_nsprefix_ + ':' if (UseCapturedNS_ and self.Resource_nsprefix_) else ''
            Resource_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Resource', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Resource':
            obj_ = UsedResourceType47.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Resource.append(obj_)
            obj_.original_tagname_ = 'Resource'
# end class ContentResourceType233


class HeaderType237(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, NUMBER=None, Date=None, ImportedDate=None, Importer=None, Supplier=None, GTDNUMBER=None, GTDDate=None, ContractNUMBER=None, ContractDate=None, Country=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.NUMBER = NUMBER
        self.validate_NoEmptyString50(self.NUMBER)
        self.NUMBER_nsprefix_ = None
        if isinstance(Date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date, '%Y-%m-%d').date()
        else:
            initvalue_ = Date
        self.Date = initvalue_
        self.Date_nsprefix_ = None
        if isinstance(ImportedDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ImportedDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ImportedDate
        self.ImportedDate = initvalue_
        self.ImportedDate_nsprefix_ = None
        self.Importer = Importer
        self.Importer_nsprefix_ = None
        self.Supplier = Supplier
        self.Supplier_nsprefix_ = None
        self.GTDNUMBER = GTDNUMBER
        self.validate_NoEmptyString50(self.GTDNUMBER)
        self.GTDNUMBER_nsprefix_ = None
        if isinstance(GTDDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(GTDDate, '%Y-%m-%d').date()
        else:
            initvalue_ = GTDDate
        self.GTDDate = initvalue_
        self.GTDDate_nsprefix_ = None
        self.ContractNUMBER = ContractNUMBER
        self.validate_NoEmptyString50(self.ContractNUMBER)
        self.ContractNUMBER_nsprefix_ = None
        if isinstance(ContractDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ContractDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ContractDate
        self.ContractDate = initvalue_
        self.ContractDate_nsprefix_ = None
        self.Country = Country
        self.validate_CountryType238(self.Country)
        self.Country_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType239(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType237)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType237.subclass:
            return HeaderType237.subclass(*args_, **kwargs_)
        else:
            return HeaderType237(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_NUMBER(self):
        return self.NUMBER
    def set_NUMBER(self, NUMBER):
        self.NUMBER = NUMBER
    def get_Date(self):
        return self.Date
    def set_Date(self, Date):
        self.Date = Date
    def get_ImportedDate(self):
        return self.ImportedDate
    def set_ImportedDate(self, ImportedDate):
        self.ImportedDate = ImportedDate
    def get_Importer(self):
        return self.Importer
    def set_Importer(self, Importer):
        self.Importer = Importer
    def get_Supplier(self):
        return self.Supplier
    def set_Supplier(self, Supplier):
        self.Supplier = Supplier
    def get_GTDNUMBER(self):
        return self.GTDNUMBER
    def set_GTDNUMBER(self, GTDNUMBER):
        self.GTDNUMBER = GTDNUMBER
    def get_GTDDate(self):
        return self.GTDDate
    def set_GTDDate(self, GTDDate):
        self.GTDDate = GTDDate
    def get_ContractNUMBER(self):
        return self.ContractNUMBER
    def set_ContractNUMBER(self, ContractNUMBER):
        self.ContractNUMBER = ContractNUMBER
    def get_ContractDate(self):
        return self.ContractDate
    def set_ContractDate(self, ContractDate):
        self.ContractDate = ContractDate
    def get_Country(self):
        return self.Country
    def set_Country(self, Country):
        self.Country = Country
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_CountryType238(self, value):
        result = True
        # Validate type CountryType238, a restriction on xs:string.
        pass
        return result
    def validate_NoteType239(self, value):
        result = True
        # Validate type NoteType239, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.NUMBER is not None or
            self.Date is not None or
            self.ImportedDate is not None or
            self.Importer is not None or
            self.Supplier is not None or
            self.GTDNUMBER is not None or
            self.GTDDate is not None or
            self.ContractNUMBER is not None or
            self.ContractDate is not None or
            self.Country is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType237', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType237')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType237':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType237')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType237', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType237'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common"  xmlns:oref="http://fsrar.ru/WEGAIS/ClientRef" ', name_='HeaderType237', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NUMBER is not None:
            namespaceprefix_ = self.NUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.NUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNUMBER>%s</%sNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NUMBER), input_name='NUMBER')), namespaceprefix_ , eol_))
        if self.Date is not None:
            namespaceprefix_ = self.Date_nsprefix_ + ':' if (UseCapturedNS_ and self.Date_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespaceprefix_ , self.gds_format_date(self.Date, input_name='Date'), namespaceprefix_ , eol_))
        if self.ImportedDate is not None:
            namespaceprefix_ = self.ImportedDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ImportedDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sImportedDate>%s</%sImportedDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ImportedDate, input_name='ImportedDate'), namespaceprefix_ , eol_))
        if self.Importer is not None:
            namespaceprefix_ = self.Importer_nsprefix_ + ':' if (UseCapturedNS_ and self.Importer_nsprefix_) else ''
            self.Importer.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Importer', pretty_print=pretty_print)
        if self.Supplier is not None:
            namespaceprefix_ = self.Supplier_nsprefix_ + ':' if (UseCapturedNS_ and self.Supplier_nsprefix_) else ''
            self.Supplier.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Supplier', pretty_print=pretty_print)
        if self.GTDNUMBER is not None:
            namespaceprefix_ = self.GTDNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDNUMBER>%s</%sGTDNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.GTDNUMBER), input_name='GTDNUMBER')), namespaceprefix_ , eol_))
        if self.GTDDate is not None:
            namespaceprefix_ = self.GTDDate_nsprefix_ + ':' if (UseCapturedNS_ and self.GTDDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sGTDDate>%s</%sGTDDate>%s' % (namespaceprefix_ , self.gds_format_date(self.GTDDate, input_name='GTDDate'), namespaceprefix_ , eol_))
        if self.ContractNUMBER is not None:
            namespaceprefix_ = self.ContractNUMBER_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractNUMBER_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractNUMBER>%s</%sContractNUMBER>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ContractNUMBER), input_name='ContractNUMBER')), namespaceprefix_ , eol_))
        if self.ContractDate is not None:
            namespaceprefix_ = self.ContractDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ContractDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContractDate>%s</%sContractDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ContractDate, input_name='ContractDate'), namespaceprefix_ , eol_))
        if self.Country is not None:
            namespaceprefix_ = self.Country_nsprefix_ + ':' if (UseCapturedNS_ and self.Country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Country), input_name='Country')), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'NUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NUMBER')
            value_ = self.gds_validate_string(value_, node, 'NUMBER')
            self.NUMBER = value_
            self.NUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NUMBER)
        elif nodeName_ == 'Date':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.Date = dval_
            self.Date_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.Date)
        elif nodeName_ == 'ImportedDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ImportedDate = dval_
            self.ImportedDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ImportedDate)
        elif nodeName_ == 'Importer':
            obj_ = OrgInfoRus_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Importer = obj_
            obj_.original_tagname_ = 'Importer'
        elif nodeName_ == 'Supplier':
            obj_ = OrgInfoForeign_v2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Supplier = obj_
            obj_.original_tagname_ = 'Supplier'
        elif nodeName_ == 'GTDNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'GTDNUMBER')
            value_ = self.gds_validate_string(value_, node, 'GTDNUMBER')
            self.GTDNUMBER = value_
            self.GTDNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.GTDNUMBER)
        elif nodeName_ == 'GTDDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.GTDDate = dval_
            self.GTDDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.GTDDate)
        elif nodeName_ == 'ContractNUMBER':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ContractNUMBER')
            value_ = self.gds_validate_string(value_, node, 'ContractNUMBER')
            self.ContractNUMBER = value_
            self.ContractNUMBER_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ContractNUMBER)
        elif nodeName_ == 'ContractDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ContractDate = dval_
            self.ContractDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ContractDate)
        elif nodeName_ == 'Country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Country')
            value_ = self.gds_validate_string(value_, node, 'Country')
            self.Country = value_
            self.Country_nsprefix_ = child_.prefix
            # validate type CountryType238
            self.validate_CountryType238(self.Country)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType239
            self.validate_NoteType239(self.Note)
# end class HeaderType237


class ContentType240(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType240)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType240.subclass:
            return ContentType240.subclass(*args_, **kwargs_)
        else:
            return ContentType240(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType240', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType240')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType240':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType240')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType240', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType240'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType240', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType49.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType240


class HeaderType244(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, ActDate=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType245(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType244)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType244.subclass:
            return HeaderType244.subclass(*args_, **kwargs_)
        else:
            return HeaderType244(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType245(self, value):
        result = True
        # Validate type NoteType245, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.ActDate is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType244', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType244')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType244':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType244')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType244', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType244'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType244', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType245
            self.validate_NoteType245(self.Note)
# end class HeaderType244


class ContentType246(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType246)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType246.subclass:
            return ContentType246.subclass(*args_, **kwargs_)
        else:
            return ContentType246(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType246', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType246')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType246':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType246')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType246', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType246'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType246', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActFixBarCodePositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType246


class HeaderType247(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Number=None, ActDate=None, Note=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.Number = Number
        self.validate_NoEmptyString50(self.Number)
        self.Number_nsprefix_ = None
        if isinstance(ActDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ActDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ActDate
        self.ActDate = initvalue_
        self.ActDate_nsprefix_ = None
        self.Note = Note
        self.validate_NoteType248(self.Note)
        self.Note_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType247)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType247.subclass:
            return HeaderType247.subclass(*args_, **kwargs_)
        else:
            return HeaderType247(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Number(self):
        return self.Number
    def set_Number(self, Number):
        self.Number = Number
    def get_ActDate(self):
        return self.ActDate
    def set_ActDate(self, ActDate):
        self.ActDate = ActDate
    def get_Note(self):
        return self.Note
    def set_Note(self, Note):
        self.Note = Note
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def validate_NoteType248(self, value):
        result = True
        # Validate type NoteType248, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.Number is not None or
            self.ActDate is not None or
            self.Note is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType247', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType247')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType247':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType247')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType247', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType247'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType247', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Number is not None:
            namespaceprefix_ = self.Number_nsprefix_ + ':' if (UseCapturedNS_ and self.Number_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumber>%s</%sNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Number), input_name='Number')), namespaceprefix_ , eol_))
        if self.ActDate is not None:
            namespaceprefix_ = self.ActDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ActDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActDate>%s</%sActDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ActDate, input_name='ActDate'), namespaceprefix_ , eol_))
        if self.Note is not None:
            namespaceprefix_ = self.Note_nsprefix_ + ':' if (UseCapturedNS_ and self.Note_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Note), input_name='Note')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Number':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Number')
            value_ = self.gds_validate_string(value_, node, 'Number')
            self.Number = value_
            self.Number_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Number)
        elif nodeName_ == 'ActDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ActDate = dval_
            self.ActDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ActDate)
        elif nodeName_ == 'Note':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Note')
            value_ = self.gds_validate_string(value_, node, 'Note')
            self.Note = value_
            self.Note_nsprefix_ = child_.prefix
            # validate type NoteType248
            self.validate_NoteType248(self.Note)
# end class HeaderType247


class ContentType249(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType249)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType249.subclass:
            return ContentType249.subclass(*args_, **kwargs_)
        else:
            return ContentType249(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType249', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType249')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType249':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType249')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType249', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType249'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType249', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = ActUnFixBarCodePositionType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType249


class ParentHistType(GeneratedsSuper):
    """История двидения по справке"""
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, step=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if step is None:
            self.step = []
        else:
            self.step = step
        self.step_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParentHistType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParentHistType.subclass:
            return ParentHistType.subclass(*args_, **kwargs_)
        else:
            return ParentHistType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_step(self):
        return self.step
    def set_step(self, step):
        self.step = step
    def add_step(self, value):
        self.step.append(value)
    def insert_step_at(self, index, value):
        self.step.insert(index, value)
    def replace_step_at(self, index, value):
        self.step[index] = value
    def hasContent_(self):
        if (
            self.step
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ParentHistType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ParentHistType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ParentHistType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ParentHistType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ParentHistType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ParentHistType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ParentHistType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for step_ in self.step:
            namespaceprefix_ = self.step_nsprefix_ + ':' if (UseCapturedNS_ and self.step_nsprefix_) else ''
            step_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='step', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'step':
            obj_ = stepBType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.step.append(obj_)
            obj_.original_tagname_ = 'step'
# end class ParentHistType


class HeaderType250(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, WBRegId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.WBRegId = WBRegId
        self.validate_NoEmptyString50(self.WBRegId)
        self.WBRegId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType250)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType250.subclass:
            return HeaderType250.subclass(*args_, **kwargs_)
        else:
            return HeaderType250(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_WBRegId(self):
        return self.WBRegId
    def set_WBRegId(self, WBRegId):
        self.WBRegId = WBRegId
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def hasContent_(self):
        if (
            self.WBRegId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType250', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType250')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType250':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType250')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType250', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType250'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType250', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.WBRegId is not None:
            namespaceprefix_ = self.WBRegId_nsprefix_ + ':' if (UseCapturedNS_ and self.WBRegId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWBRegId>%s</%sWBRegId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.WBRegId), input_name='WBRegId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'WBRegId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'WBRegId')
            value_ = self.gds_validate_string(value_, node, 'WBRegId')
            self.WBRegId = value_
            self.WBRegId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.WBRegId)
# end class HeaderType250


class ContentType251(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType251)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType251.subclass:
            return ContentType251.subclass(*args_, **kwargs_)
        else:
            return ContentType251(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType251', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType251')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType251':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType251')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType251', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType251'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType251', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = InformParentF2Type.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType251


class HistF2Type(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, step=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if step is None:
            self.step = []
        else:
            self.step = step
        self.step_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HistF2Type)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HistF2Type.subclass:
            return HistF2Type.subclass(*args_, **kwargs_)
        else:
            return HistF2Type(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_step(self):
        return self.step
    def set_step(self, step):
        self.step = step
    def add_step(self, value):
        self.step.append(value)
    def insert_step_at(self, index, value):
        self.step.insert(index, value)
    def replace_step_at(self, index, value):
        self.step[index] = value
    def hasContent_(self):
        if (
            self.step
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistF2Type', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HistF2Type')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HistF2Type':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HistF2Type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HistF2Type', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HistF2Type'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='HistF2Type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for step_ in self.step:
            namespaceprefix_ = self.step_nsprefix_ + ':' if (UseCapturedNS_ and self.step_nsprefix_) else ''
            step_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='step', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'step':
            obj_ = stepType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.step.append(obj_)
            obj_.original_tagname_ = 'step'
# end class HistF2Type


class HeaderType252(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ClientIdentity=None, Serial=None, Shipper=None, Consignee=None, Carrier=None, ClientTransport=None, ShipmentOutDate=None, ShipmentInDate=None, EGAISFixNumberTTN=None, NotifNumber=None, NotifDate=None, NotifSupplierId=None, NotifCustomerId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ClientIdentity = ClientIdentity
        self.validate_IdentityType(self.ClientIdentity)
        self.ClientIdentity_nsprefix_ = None
        self.Serial = Serial
        self.validate_NoEmptyString50(self.Serial)
        self.Serial_nsprefix_ = None
        self.Shipper = Shipper
        self.validate_NoEmptyString50(self.Shipper)
        self.Shipper_nsprefix_ = None
        self.Consignee = Consignee
        self.validate_NoEmptyString50(self.Consignee)
        self.Consignee_nsprefix_ = None
        self.Carrier = Carrier
        self.validate_NoEmptyString50(self.Carrier)
        self.Carrier_nsprefix_ = None
        self.ClientTransport = ClientTransport
        self.validate_NoEmptyString50(self.ClientTransport)
        self.ClientTransport_nsprefix_ = None
        if isinstance(ShipmentOutDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipmentOutDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipmentOutDate
        self.ShipmentOutDate = initvalue_
        self.ShipmentOutDate_nsprefix_ = None
        if isinstance(ShipmentInDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(ShipmentInDate, '%Y-%m-%d').date()
        else:
            initvalue_ = ShipmentInDate
        self.ShipmentInDate = initvalue_
        self.ShipmentInDate_nsprefix_ = None
        self.EGAISFixNumberTTN = EGAISFixNumberTTN
        self.validate_NoEmptyString50(self.EGAISFixNumberTTN)
        self.EGAISFixNumberTTN_nsprefix_ = None
        self.NotifNumber = NotifNumber
        self.validate_NoEmptyString50(self.NotifNumber)
        self.NotifNumber_nsprefix_ = None
        if isinstance(NotifDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(NotifDate, '%Y-%m-%d').date()
        else:
            initvalue_ = NotifDate
        self.NotifDate = initvalue_
        self.NotifDate_nsprefix_ = None
        self.NotifSupplierId = NotifSupplierId
        self.validate_NoEmptyString50(self.NotifSupplierId)
        self.NotifSupplierId_nsprefix_ = None
        self.NotifCustomerId = NotifCustomerId
        self.validate_NoEmptyString50(self.NotifCustomerId)
        self.NotifCustomerId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HeaderType252)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HeaderType252.subclass:
            return HeaderType252.subclass(*args_, **kwargs_)
        else:
            return HeaderType252(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ClientIdentity(self):
        return self.ClientIdentity
    def set_ClientIdentity(self, ClientIdentity):
        self.ClientIdentity = ClientIdentity
    def get_Serial(self):
        return self.Serial
    def set_Serial(self, Serial):
        self.Serial = Serial
    def get_Shipper(self):
        return self.Shipper
    def set_Shipper(self, Shipper):
        self.Shipper = Shipper
    def get_Consignee(self):
        return self.Consignee
    def set_Consignee(self, Consignee):
        self.Consignee = Consignee
    def get_Carrier(self):
        return self.Carrier
    def set_Carrier(self, Carrier):
        self.Carrier = Carrier
    def get_ClientTransport(self):
        return self.ClientTransport
    def set_ClientTransport(self, ClientTransport):
        self.ClientTransport = ClientTransport
    def get_ShipmentOutDate(self):
        return self.ShipmentOutDate
    def set_ShipmentOutDate(self, ShipmentOutDate):
        self.ShipmentOutDate = ShipmentOutDate
    def get_ShipmentInDate(self):
        return self.ShipmentInDate
    def set_ShipmentInDate(self, ShipmentInDate):
        self.ShipmentInDate = ShipmentInDate
    def get_EGAISFixNumberTTN(self):
        return self.EGAISFixNumberTTN
    def set_EGAISFixNumberTTN(self, EGAISFixNumberTTN):
        self.EGAISFixNumberTTN = EGAISFixNumberTTN
    def get_NotifNumber(self):
        return self.NotifNumber
    def set_NotifNumber(self, NotifNumber):
        self.NotifNumber = NotifNumber
    def get_NotifDate(self):
        return self.NotifDate
    def set_NotifDate(self, NotifDate):
        self.NotifDate = NotifDate
    def get_NotifSupplierId(self):
        return self.NotifSupplierId
    def set_NotifSupplierId(self, NotifSupplierId):
        self.NotifSupplierId = NotifSupplierId
    def get_NotifCustomerId(self):
        return self.NotifCustomerId
    def set_NotifCustomerId(self, NotifCustomerId):
        self.NotifCustomerId = NotifCustomerId
    def validate_IdentityType(self, value):
        result = True
        # Validate type IdentityType, a restriction on ns:NoEmptyString.
        pass
        return result
    def validate_NoEmptyString50(self, value):
        result = True
        # Validate type NoEmptyString50, a restriction on xs:string.
        pass
        return result
    def validate_DateNoTime(self, value):
        result = True
        # Validate type DateNoTime, a restriction on xs:date.
        pass
        return result
    def hasContent_(self):
        if (
            self.ClientIdentity is not None or
            self.Serial is not None or
            self.Shipper is not None or
            self.Consignee is not None or
            self.Carrier is not None or
            self.ClientTransport is not None or
            self.ShipmentOutDate is not None or
            self.ShipmentInDate is not None or
            self.EGAISFixNumberTTN is not None or
            self.NotifNumber is not None or
            self.NotifDate is not None or
            self.NotifSupplierId is not None or
            self.NotifCustomerId is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType252', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HeaderType252')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'HeaderType252':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HeaderType252')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HeaderType252', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HeaderType252'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01" xmlns:c="http://fsrar.ru/WEGAIS/Common" ', name_='HeaderType252', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientIdentity is not None:
            namespaceprefix_ = self.ClientIdentity_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientIdentity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientIdentity>%s</%sClientIdentity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientIdentity), input_name='ClientIdentity')), namespaceprefix_ , eol_))
        if self.Serial is not None:
            namespaceprefix_ = self.Serial_nsprefix_ + ':' if (UseCapturedNS_ and self.Serial_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerial>%s</%sSerial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Serial), input_name='Serial')), namespaceprefix_ , eol_))
        if self.Shipper is not None:
            namespaceprefix_ = self.Shipper_nsprefix_ + ':' if (UseCapturedNS_ and self.Shipper_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipper>%s</%sShipper>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Shipper), input_name='Shipper')), namespaceprefix_ , eol_))
        if self.Consignee is not None:
            namespaceprefix_ = self.Consignee_nsprefix_ + ':' if (UseCapturedNS_ and self.Consignee_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConsignee>%s</%sConsignee>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Consignee), input_name='Consignee')), namespaceprefix_ , eol_))
        if self.Carrier is not None:
            namespaceprefix_ = self.Carrier_nsprefix_ + ':' if (UseCapturedNS_ and self.Carrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCarrier>%s</%sCarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Carrier), input_name='Carrier')), namespaceprefix_ , eol_))
        if self.ClientTransport is not None:
            namespaceprefix_ = self.ClientTransport_nsprefix_ + ':' if (UseCapturedNS_ and self.ClientTransport_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientTransport>%s</%sClientTransport>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ClientTransport), input_name='ClientTransport')), namespaceprefix_ , eol_))
        if self.ShipmentOutDate is not None:
            namespaceprefix_ = self.ShipmentOutDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentOutDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentOutDate>%s</%sShipmentOutDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipmentOutDate, input_name='ShipmentOutDate'), namespaceprefix_ , eol_))
        if self.ShipmentInDate is not None:
            namespaceprefix_ = self.ShipmentInDate_nsprefix_ + ':' if (UseCapturedNS_ and self.ShipmentInDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipmentInDate>%s</%sShipmentInDate>%s' % (namespaceprefix_ , self.gds_format_date(self.ShipmentInDate, input_name='ShipmentInDate'), namespaceprefix_ , eol_))
        if self.EGAISFixNumberTTN is not None:
            namespaceprefix_ = self.EGAISFixNumberTTN_nsprefix_ + ':' if (UseCapturedNS_ and self.EGAISFixNumberTTN_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEGAISFixNumberTTN>%s</%sEGAISFixNumberTTN>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EGAISFixNumberTTN), input_name='EGAISFixNumberTTN')), namespaceprefix_ , eol_))
        if self.NotifNumber is not None:
            namespaceprefix_ = self.NotifNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.NotifNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotifNumber>%s</%sNotifNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotifNumber), input_name='NotifNumber')), namespaceprefix_ , eol_))
        if self.NotifDate is not None:
            namespaceprefix_ = self.NotifDate_nsprefix_ + ':' if (UseCapturedNS_ and self.NotifDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotifDate>%s</%sNotifDate>%s' % (namespaceprefix_ , self.gds_format_date(self.NotifDate, input_name='NotifDate'), namespaceprefix_ , eol_))
        if self.NotifSupplierId is not None:
            namespaceprefix_ = self.NotifSupplierId_nsprefix_ + ':' if (UseCapturedNS_ and self.NotifSupplierId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotifSupplierId>%s</%sNotifSupplierId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotifSupplierId), input_name='NotifSupplierId')), namespaceprefix_ , eol_))
        if self.NotifCustomerId is not None:
            namespaceprefix_ = self.NotifCustomerId_nsprefix_ + ':' if (UseCapturedNS_ and self.NotifCustomerId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotifCustomerId>%s</%sNotifCustomerId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NotifCustomerId), input_name='NotifCustomerId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ClientIdentity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientIdentity')
            value_ = self.gds_validate_string(value_, node, 'ClientIdentity')
            self.ClientIdentity = value_
            self.ClientIdentity_nsprefix_ = child_.prefix
            # validate type IdentityType
            self.validate_IdentityType(self.ClientIdentity)
        elif nodeName_ == 'Serial':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Serial')
            value_ = self.gds_validate_string(value_, node, 'Serial')
            self.Serial = value_
            self.Serial_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Serial)
        elif nodeName_ == 'Shipper':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Shipper')
            value_ = self.gds_validate_string(value_, node, 'Shipper')
            self.Shipper = value_
            self.Shipper_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Shipper)
        elif nodeName_ == 'Consignee':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Consignee')
            value_ = self.gds_validate_string(value_, node, 'Consignee')
            self.Consignee = value_
            self.Consignee_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Consignee)
        elif nodeName_ == 'Carrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'Carrier')
            value_ = self.gds_validate_string(value_, node, 'Carrier')
            self.Carrier = value_
            self.Carrier_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.Carrier)
        elif nodeName_ == 'ClientTransport':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ClientTransport')
            value_ = self.gds_validate_string(value_, node, 'ClientTransport')
            self.ClientTransport = value_
            self.ClientTransport_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.ClientTransport)
        elif nodeName_ == 'ShipmentOutDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipmentOutDate = dval_
            self.ShipmentOutDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShipmentOutDate)
        elif nodeName_ == 'ShipmentInDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.ShipmentInDate = dval_
            self.ShipmentInDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.ShipmentInDate)
        elif nodeName_ == 'EGAISFixNumberTTN':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EGAISFixNumberTTN')
            value_ = self.gds_validate_string(value_, node, 'EGAISFixNumberTTN')
            self.EGAISFixNumberTTN = value_
            self.EGAISFixNumberTTN_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.EGAISFixNumberTTN)
        elif nodeName_ == 'NotifNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotifNumber')
            value_ = self.gds_validate_string(value_, node, 'NotifNumber')
            self.NotifNumber = value_
            self.NotifNumber_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NotifNumber)
        elif nodeName_ == 'NotifDate':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.NotifDate = dval_
            self.NotifDate_nsprefix_ = child_.prefix
            # validate type DateNoTime
            self.validate_DateNoTime(self.NotifDate)
        elif nodeName_ == 'NotifSupplierId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotifSupplierId')
            value_ = self.gds_validate_string(value_, node, 'NotifSupplierId')
            self.NotifSupplierId = value_
            self.NotifSupplierId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NotifSupplierId)
        elif nodeName_ == 'NotifCustomerId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'NotifCustomerId')
            value_ = self.gds_validate_string(value_, node, 'NotifCustomerId')
            self.NotifCustomerId = value_
            self.NotifCustomerId_nsprefix_ = child_.prefix
            # validate type NoEmptyString50
            self.validate_NoEmptyString50(self.NotifCustomerId)
# end class HeaderType252


class ContentType253(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, Position=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if Position is None:
            self.Position = []
        else:
            self.Position = Position
        self.Position_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ContentType253)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ContentType253.subclass:
            return ContentType253.subclass(*args_, **kwargs_)
        else:
            return ContentType253(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_Position(self):
        return self.Position
    def set_Position(self, Position):
        self.Position = Position
    def add_Position(self, value):
        self.Position.append(value)
    def insert_Position_at(self, index, value):
        self.Position.insert(index, value)
    def replace_Position_at(self, index, value):
        self.Position[index] = value
    def hasContent_(self):
        if (
            self.Position
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType253', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ContentType253')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'ContentType253':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ContentType253')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ContentType253', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ContentType253'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"', name_='ContentType253', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Position_ in self.Position:
            namespaceprefix_ = self.Position_nsprefix_ + ':' if (UseCapturedNS_ and self.Position_nsprefix_) else ''
            Position_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Position', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'Position':
            obj_ = PositionType50.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.Position.append(obj_)
            obj_.original_tagname_ = 'Position'
# end class ContentType253


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Documents'
        rootClass = Documents
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_=namespacedefs,
##             pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Documents'
        rootClass = Documents
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(str(content))
##         sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Documents'
        rootClass = Documents
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='xmlns:ns="http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Documents'
        rootClass = Documents
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
##     if not silence:
##         sys.stdout.write('#from egais import *\n\n')
##         sys.stdout.write('import egais as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
    "{http://fsrar.ru/WEGAIS/ActChargeOn_v2}ActChargeOnPositionType": "ActChargeOnPositionType29",
    "{http://fsrar.ru/WEGAIS/ActChargeOn}MarkCodeInfoType": "MarkCodeInfoType4",
    "{http://fsrar.ru/WEGAIS/ActInventoryInformF2Reg}InformInvPositionType": "InformInvPositionType30",
    "{http://fsrar.ru/WEGAIS/ActTTNSingle_v2}AcceptType": "AcceptType28",
    "{http://fsrar.ru/WEGAIS/ActTTNSingle_v2}PositionType": "PositionType27",
    "{http://fsrar.ru/WEGAIS/ActTTNSingle_v3}AcceptType": "AcceptType45",
    "{http://fsrar.ru/WEGAIS/ActTTNSingle_v3}PositionType": "PositionType44",
    "{http://fsrar.ru/WEGAIS/ActTTNSingle}PositionType": "PositionType2",
    "{http://fsrar.ru/WEGAIS/ActWriteOff_v2}ActWriteOffPositionType": "ActWriteOffPositionType31",
    "{http://fsrar.ru/WEGAIS/ActWriteOff_v3}ActWriteOffPositionType": "ActWriteOffPositionType42",
    "{http://fsrar.ru/WEGAIS/ActWriteOff_v3}InformF1F2": "InformF1F243",
    "{http://fsrar.ru/WEGAIS/ActWriteOff}TypeWriteOff": "TypeWriteOff5",
    "{http://fsrar.ru/WEGAIS/AscpNavigation}DataType": "DataType37",
    "{http://fsrar.ru/WEGAIS/AsiiuTime}DataType": "DataType32",
    "{http://fsrar.ru/WEGAIS/CarrierNotice}PositionType": "PositionType50",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}INN10Type": "INN10Type12",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}INN12Type": "INN12Type14",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}INNType": "INNType11",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}KPPType": "KPPType13",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}OrgAddressType": "OrgAddressType9",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}OrgItemType": "OrgItemType8",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}OrganizationsType": "OrganizationsType7",
    "{http://fsrar.ru/WEGAIS/ClientRef_v2}ProductContractType": "ProductContractType10",
    "{http://fsrar.ru/WEGAIS/ConfirmRepealWB}ConclusionType": "ConclusionType34",
    "{http://fsrar.ru/WEGAIS/ConfirmTicket}ConclusionType": "ConclusionType3",
    "{http://fsrar.ru/WEGAIS/ProductRef_v2}MarkInfoType": "MarkInfoType15",
    "{http://fsrar.ru/WEGAIS/ProductRef_v2}MarkNumberType": "MarkNumberType19",
    "{http://fsrar.ru/WEGAIS/ProductRef_v2}ProductType": "ProductType17",
    "{http://fsrar.ru/WEGAIS/ProductRef_v2}RankType": "RankType18",
    "{http://fsrar.ru/WEGAIS/ProductRef_v2}WbUnitType": "WbUnitType16",
    "{http://fsrar.ru/WEGAIS/RepImportedProduct_v3}PositionType": "PositionType49",
    "{http://fsrar.ru/WEGAIS/RepImportedProduct}PositionType": "PositionType20",
    "{http://fsrar.ru/WEGAIS/RepProducedProduct_v3}OperType": "OperType48",
    "{http://fsrar.ru/WEGAIS/RepProducedProduct_v3}PositionType": "PositionType46",
    "{http://fsrar.ru/WEGAIS/RepProducedProduct_v3}UsedResourceType": "UsedResourceType47",
    "{http://fsrar.ru/WEGAIS/RepProducedProduct}PositionType": "PositionType6",
    "{http://fsrar.ru/WEGAIS/ReplyBarcode}PDF417String": "PDF417String33",
    "{http://fsrar.ru/WEGAIS/ReplyHistForm2}OperationBType": "OperationBType22",
    "{http://fsrar.ru/WEGAIS/ReplyRestsShop_Mini}ShopPositionType": "ShopPositionType36",
    "{http://fsrar.ru/WEGAIS/ReplyRests_Mini}StockPositionType": "StockPositionType35",
    "{http://fsrar.ru/WEGAIS/ReplyRests_v2}StockPositionType": "StockPositionType21",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v2}PositionType": "PositionType23",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v2}TransportType": "TransportType24",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v2}WbType": "WbType25",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v2}WbUnitType": "WbUnitType26",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v3}PositionType": "PositionType38",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v3}TransportType": "TransportType39",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v3}WbType": "WbType40",
    "{http://fsrar.ru/WEGAIS/TTNSingle_v3}WbUnitType": "WbUnitType41",
    "{http://fsrar.ru/WEGAIS/TTNSingle}WbUnitType": "WbUnitType1",
}

__all__ = [
    "AMCforDocType",
    "ActChargeOnPositionType",
    "ActChargeOnPositionType29",
    "ActChargeOnShopPositionType",
    "ActChargeOnShopType_v2",
    "ActChargeOnType",
    "ActChargeOnType_v2",
    "ActFixBarCode",
    "ActFixBarCodePositionType",
    "ActInventoryInformBReg",
    "ActInventoryInformF2Reg",
    "ActInventoryPositionType",
    "ActInventoryType",
    "ActUnFixBarCode",
    "ActUnFixBarCodePositionType",
    "ActWriteOffPositionType",
    "ActWriteOffPositionType31",
    "ActWriteOffPositionType42",
    "ActWriteOffShopPositionType",
    "ActWriteOffShopType_v2",
    "ActWriteOffType",
    "ActWriteOffType_v2",
    "ActWriteOffType_v3",
    "AddFOType",
    "AddTSType",
    "AscpNav",
    "Asiiu",
    "AsiiuTime",
    "BarcodeType",
    "CarrierNotice",
    "ClientsType",
    "ClientsType144",
    "ConfirmRepealWB",
    "ConfirmTicketType",
    "ContentResourceType",
    "ContentResourceType233",
    "ContentType",
    "ContentType134",
    "ContentType150",
    "ContentType163",
    "ContentType166",
    "ContentType168",
    "ContentType171",
    "ContentType174",
    "ContentType177",
    "ContentType180",
    "ContentType182",
    "ContentType189",
    "ContentType192",
    "ContentType213",
    "ContentType226",
    "ContentType229",
    "ContentType232",
    "ContentType240",
    "ContentType246",
    "ContentType249",
    "ContentType251",
    "ContentType253",
    "ContentType57",
    "ContentType62",
    "ContentType66",
    "ContentType68",
    "ContentType71",
    "ContentType74",
    "ContentType77",
    "DataLevelGaugeType",
    "DataType",
    "DataType184",
    "DataType186",
    "DataType32",
    "DataType37",
    "DocBody",
    "DocDataType",
    "Documents",
    "FLReplyType",
    "FLType",
    "FOType",
    "HeaderType",
    "HeaderType131",
    "HeaderType147",
    "HeaderType161",
    "HeaderType164",
    "HeaderType167",
    "HeaderType170",
    "HeaderType172",
    "HeaderType175",
    "HeaderType178",
    "HeaderType181",
    "HeaderType187",
    "HeaderType190",
    "HeaderType194",
    "HeaderType207",
    "HeaderType224",
    "HeaderType227",
    "HeaderType230",
    "HeaderType237",
    "HeaderType244",
    "HeaderType247",
    "HeaderType250",
    "HeaderType252",
    "HeaderType55",
    "HeaderType58",
    "HeaderType60",
    "HeaderType64",
    "HeaderType67",
    "HeaderType70",
    "HeaderType72",
    "HeaderType75",
    "HistF2Type",
    "HistoryBType",
    "HistoryF2Type",
    "HistoryType",
    "InfoVersionTTN",
    "InformABKeyType",
    "InformABRegType",
    "InformABType",
    "InformARegType",
    "InformAType",
    "InformBPositionType",
    "InformBType",
    "InformBType63",
    "InformBType69",
    "InformBTypeItem",
    "InformBTypeRegItem",
    "InformF1F2",
    "InformF1F243",
    "InformF1F2RegType",
    "InformF1F2Type",
    "InformF1PositionType",
    "InformF1RegType",
    "InformF1Type",
    "InformF2PositionType",
    "InformF2Type",
    "InformF2Type169",
    "InformF2TypeItem",
    "InformF2TypeItemBC",
    "InformF2TypeRegItem",
    "InformInvBRegItem",
    "InformInvF2RegItem",
    "InformInvPositionType",
    "InformInvPositionType30",
    "InformParentF2Type",
    "MarkCodeInfoType",
    "MarkCodeInfoType4",
    "MarkInfoType",
    "MarkInfoType15",
    "MarkInfoTypeBC",
    "MarkType",
    "MarksType",
    "MarksType193",
    "NoAnswerTTN",
    "NoAnswerType",
    "OperationBType",
    "OperationBType22",
    "OperationResultType",
    "OrgAddressType",
    "OrgAddressType9",
    "OrgAddressTypeFOTS",
    "OrgAddressTypeULFL",
    "OrgAddressTypeULFLReply",
    "OrgInfo",
    "OrgInfoEx",
    "OrgInfoEx_v2",
    "OrgInfoForeignAddType",
    "OrgInfoForeignReply_v2",
    "OrgInfoForeign_v2",
    "OrgInfoReply_v2",
    "OrgInfoRusReply_v2",
    "OrgInfoRus_v2",
    "OrgInfo_v2",
    "OrgItemType",
    "OrgItemType8",
    "OrgLicenseType",
    "OrganizationsType",
    "OrganizationsType7",
    "Parameter",
    "ParametersType",
    "ParentHistType",
    "PositionType",
    "PositionType2",
    "PositionType20",
    "PositionType23",
    "PositionType27",
    "PositionType38",
    "PositionType44",
    "PositionType46",
    "PositionType49",
    "PositionType50",
    "PositionType6",
    "ProductContractType",
    "ProductContractType10",
    "ProductInfo",
    "ProductInfoAsiiu_v2",
    "ProductInfoForeign_v2",
    "ProductInfoReply_v2",
    "ProductInfoRus_v2",
    "ProductInfoTest_v2",
    "ProductInfo_v2",
    "ProductsType",
    "ProductsType138",
    "ProductsType139",
    "ProductsType140",
    "ProductsType141",
    "ProductsType142",
    "ProductsType143",
    "ProductsType145",
    "ProductsType146",
    "ProductsType183",
    "ProductsType196",
    "ProductsType197",
    "ProductsType_v2",
    "QueryBarcode",
    "QueryFormAB",
    "QueryFormF1F2",
    "QueryParameters",
    "QueryRejectRepImported",
    "QueryRejectRepProduced",
    "RangeType",
    "RangeType105",
    "RangesType",
    "RangesType104",
    "RepImportedType",
    "RepImportedType_v3",
    "RepPIInformF1RegType",
    "RepProducedType",
    "RepProducedType_v3",
    "ReplyAP",
    "ReplyAP_v2",
    "ReplyBarcode",
    "ReplyClient",
    "ReplyClientVersion",
    "ReplyClient_v2",
    "ReplyForm1",
    "ReplyForm2",
    "ReplyFormA",
    "ReplyFormB",
    "ReplyHistForm2",
    "ReplyHistFormB",
    "ReplyHistoryTransferShop",
    "ReplyParentHistForm2",
    "ReplyRestBCode",
    "ReplyRests",
    "ReplyRestsShop_Mini",
    "ReplyRestsShop_v2",
    "ReplyRests_Mini",
    "ReplyRests_v2",
    "ReplySSP",
    "ReplySSP_v2",
    "ReplySpirit",
    "ReplySpirit_v2",
    "ReplyWOCheque",
    "RequestAddFProducer",
    "RequestAddProducts",
    "RequestAddSSPPositionType",
    "RequestRepealACO",
    "RequestRepealAWO",
    "RequestRepealWB",
    "SenderInfo",
    "SensorType",
    "SensorType185",
    "SensorType206",
    "ShopPositionType",
    "ShopPositionType36",
    "StockPositionType",
    "StockPositionType21",
    "StockPositionType35",
    "TSReplyType",
    "TSType",
    "TTNHistoryF2Reg",
    "TicketResultType",
    "TicketType",
    "TransferFromShopPositionType",
    "TransferFromShopType",
    "TransferToShopPositionType",
    "TransferToShopType",
    "TransportType",
    "TransportType24",
    "TransportType39",
    "ULReplyType",
    "ULType",
    "UsedResourceType",
    "UsedResourceType47",
    "WayBillActType",
    "WayBillActType_v2",
    "WayBillActType_v3",
    "WayBillInformBRegType",
    "WayBillInformF2RegType",
    "WayBillType",
    "WayBillType_v2",
    "WayBillType_v3",
    "addresslistType",
    "addresslistType78",
    "bktype",
    "boxInfoType",
    "boxamcType",
    "boxtype",
    "stepBType",
    "stepType",
    "ttnlistType"
]
